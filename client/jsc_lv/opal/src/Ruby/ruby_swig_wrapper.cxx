/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGRUBY


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



#include <ruby.h>

/* Remove global macros defined in Ruby's win32.h */
#ifdef write
# undef write
#endif
#ifdef read
# undef read
#endif
#ifdef bind
# undef bind
#endif
#ifdef close
# undef close
#endif
#ifdef connect
# undef connect
#endif


/* Ruby 1.7 defines NUM2LL(), LL2NUM() and ULL2NUM() macros */
#ifndef NUM2LL
#define NUM2LL(x) NUM2LONG((x))
#endif
#ifndef LL2NUM
#define LL2NUM(x) INT2NUM((long) (x))
#endif
#ifndef ULL2NUM
#define ULL2NUM(x) UINT2NUM((unsigned long) (x))
#endif

/* Ruby 1.7 doesn't (yet) define NUM2ULL() */
#ifndef NUM2ULL
#ifdef HAVE_LONG_LONG
#define NUM2ULL(x) rb_num2ull((x))
#else
#define NUM2ULL(x) NUM2ULONG(x)
#endif
#endif

/* RSTRING_LEN, etc are new in Ruby 1.9, but ->ptr and ->len no longer work */
/* Define these for older versions so we can just write code the new way */
#ifndef RSTRING_LEN
# define RSTRING_LEN(x) RSTRING(x)->len
#endif
#ifndef RSTRING_PTR
# define RSTRING_PTR(x) RSTRING(x)->ptr
#endif
#ifndef RSTRING_END
# define RSTRING_END(x) (RSTRING_PTR(x) + RSTRING_LEN(x))
#endif
#ifndef RARRAY_LEN
# define RARRAY_LEN(x) RARRAY(x)->len
#endif
#ifndef RARRAY_PTR
# define RARRAY_PTR(x) RARRAY(x)->ptr
#endif
#ifndef RFLOAT_VALUE
# define RFLOAT_VALUE(x) RFLOAT(x)->value
#endif
#ifndef DOUBLE2NUM
# define DOUBLE2NUM(x) rb_float_new(x)
#endif
#ifndef RHASH_TBL
# define RHASH_TBL(x) (RHASH(x)->tbl)
#endif
#ifndef RHASH_ITER_LEV
# define RHASH_ITER_LEV(x) (RHASH(x)->iter_lev)
#endif
#ifndef RHASH_IFNONE
# define RHASH_IFNONE(x) (RHASH(x)->ifnone)
#endif
#ifndef RHASH_SIZE
# define RHASH_SIZE(x) (RHASH(x)->tbl->num_entries)
#endif
#ifndef RHASH_EMPTY_P
# define RHASH_EMPTY_P(x) (RHASH_SIZE(x) == 0)
#endif
#ifndef RSTRUCT_LEN
# define RSTRUCT_LEN(x) RSTRUCT(x)->len
#endif
#ifndef RSTRUCT_PTR
# define RSTRUCT_PTR(x) RSTRUCT(x)->ptr
#endif



/*
 * Need to be very careful about how these macros are defined, especially
 * when compiling C++ code or C code with an ANSI C compiler.
 *
 * VALUEFUNC(f) is a macro used to typecast a C function that implements
 * a Ruby method so that it can be passed as an argument to API functions
 * like rb_define_method() and rb_define_singleton_method().
 *
 * VOIDFUNC(f) is a macro used to typecast a C function that implements
 * either the "mark" or "free" stuff for a Ruby Data object, so that it
 * can be passed as an argument to API functions like Data_Wrap_Struct()
 * and Data_Make_Struct().
 */
 
#ifdef __cplusplus
#  ifndef RUBY_METHOD_FUNC /* These definitions should work for Ruby 1.4.6 */
#    define PROTECTFUNC(f) ((VALUE (*)()) f)
#    define VALUEFUNC(f) ((VALUE (*)()) f)
#    define VOIDFUNC(f)  ((void (*)()) f)
#  else
#    ifndef ANYARGS /* These definitions should work for Ruby 1.6 */
#      define PROTECTFUNC(f) ((VALUE (*)()) f)
#      define VALUEFUNC(f) ((VALUE (*)()) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    else /* These definitions should work for Ruby 1.7+ */
#      define PROTECTFUNC(f) ((VALUE (*)(VALUE)) f)
#      define VALUEFUNC(f) ((VALUE (*)(ANYARGS)) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    endif
#  endif
#else
#  define VALUEFUNC(f) (f)
#  define VOIDFUNC(f) (f)
#endif

/* Don't use for expressions have side effect */
#ifndef RB_STRING_VALUE
#define RB_STRING_VALUE(s) (TYPE(s) == T_STRING ? (s) : (*(volatile VALUE *)&(s) = rb_str_to_str(s)))
#endif
#ifndef StringValue
#define StringValue(s) RB_STRING_VALUE(s)
#endif
#ifndef StringValuePtr
#define StringValuePtr(s) RSTRING_PTR(RB_STRING_VALUE(s))
#endif
#ifndef StringValueLen
#define StringValueLen(s) RSTRING_LEN(RB_STRING_VALUE(s))
#endif
#ifndef SafeStringValue
#define SafeStringValue(v) do {\
    StringValue(v);\
    rb_check_safe_str(v);\
} while (0)
#endif

#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
#define rb_define_alloc_func(klass, func) rb_define_singleton_method((klass), "new", VALUEFUNC((func)), -1)
#define rb_undef_alloc_func(klass) rb_undef_method(CLASS_OF((klass)), "new")
#endif

static VALUE _mSWIG = Qnil;

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */


/* Define some additional error types */
#define SWIG_ObjectPreviouslyDeletedError  -100


/* Define custom exceptions for errors that do not map to existing Ruby
   exceptions.  Note this only works for C++ since a global cannot be
   initialized by a funtion in C.  For C, fallback to rb_eRuntimeError.*/

SWIGINTERN VALUE 
getNullReferenceError(void) {
  static int init = 0;
  static VALUE rb_eNullReferenceError ;
  if (!init) {
    init = 1;
    rb_eNullReferenceError = rb_define_class("NullReferenceError", rb_eRuntimeError);
  }
  return rb_eNullReferenceError;
} 

SWIGINTERN VALUE 
getObjectPreviouslyDeletedError(void) {
  static int init = 0;
  static VALUE rb_eObjectPreviouslyDeleted ;
  if (!init) {
    init = 1;
    rb_eObjectPreviouslyDeleted = rb_define_class("ObjectPreviouslyDeleted", rb_eRuntimeError);
  }
  return rb_eObjectPreviouslyDeleted;
} 


SWIGINTERN VALUE
SWIG_Ruby_ErrorType(int SWIG_code) {
  VALUE type;
  switch (SWIG_code) {
  case SWIG_MemoryError:
    type = rb_eNoMemError;
    break;
  case SWIG_IOError:
    type = rb_eIOError;
    break;
  case SWIG_RuntimeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_IndexError:
    type = rb_eIndexError;
    break;
  case SWIG_TypeError:
    type = rb_eTypeError;
    break;
  case SWIG_DivisionByZero:
    type = rb_eZeroDivError;
    break;
  case SWIG_OverflowError:
    type = rb_eRangeError;
    break;
  case SWIG_SyntaxError:
    type = rb_eSyntaxError;
    break;
  case SWIG_ValueError:
    type = rb_eArgError;
    break;
  case SWIG_SystemError:
    type = rb_eFatal;
    break;
  case SWIG_AttributeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_NullReferenceError:
    type = getNullReferenceError();
    break;
  case SWIG_ObjectPreviouslyDeletedError:
    type = getObjectPreviouslyDeletedError();
    break;
  case SWIG_UnknownError:
    type = rb_eRuntimeError;
    break;
  default:
    type = rb_eRuntimeError;
  }
  return type;
}


/* This function is called when a user inputs a wrong argument to
   a method.
 */
SWIGINTERN 
const char* Ruby_Format_TypeError( const char* msg,
				   const char* type, 
				   const char* name, 
				   const int argn,
				   VALUE input )
{
  char buf[128];
  VALUE str;
  VALUE asStr;
  if ( msg && *msg )
    {
      str = rb_str_new2(msg);
    }
  else
    {
      str = rb_str_new(NULL, 0);
    }

  str = rb_str_cat2( str, "Expected argument " );
  sprintf( buf, "%d of type ", argn-1 );
  str = rb_str_cat2( str, buf );
  str = rb_str_cat2( str, type );
  str = rb_str_cat2( str, ", but got " );
  str = rb_str_cat2( str, rb_obj_classname(input) );
  str = rb_str_cat2( str, " " );
  asStr = rb_inspect(input);
  if ( RSTRING_LEN(asStr) > 30 )
    {
      str = rb_str_cat( str, StringValuePtr(asStr), 30 );
      str = rb_str_cat2( str, "..." );
    }
  else
    {
      str = rb_str_append( str, asStr );
    }

  if ( name )
    {
      str = rb_str_cat2( str, "\n\tin SWIG method '" );
      str = rb_str_cat2( str, name );
      str = rb_str_cat2( str, "'" );
    }

  return StringValuePtr( str );
}

/* This function is called when an overloaded method fails */
SWIGINTERN 
void Ruby_Format_OverloadedError(
				 const int argc,
				 const int maxargs,
				 const char* method, 
				 const char* prototypes 
				 )
{
  const char* msg = "Wrong # of arguments";
  if ( argc <= maxargs ) msg = "Wrong arguments";
  rb_raise(rb_eArgError,"%s for overloaded method '%s'.\n"  
	   "Possible C/C++ prototypes are:\n%s",
	   msg, method, prototypes);
}

/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * rubytracking.swg
 *
 * This file contains support for tracking mappings from 
 * Ruby objects to C++ objects.  This functionality is needed
 * to implement mark functions for Ruby's mark and sweep
 * garbage collector.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* Ruby 1.8 actually assumes the first case. */
#if SIZEOF_VOIDP == SIZEOF_LONG
#  define SWIG2NUM(v) LONG2NUM((unsigned long)v)
#  define NUM2SWIG(x) (unsigned long)NUM2LONG(x)
#elif SIZEOF_VOIDP == SIZEOF_LONG_LONG
#  define SWIG2NUM(v) LL2NUM((unsigned long long)v)
#  define NUM2SWIG(x) (unsigned long long)NUM2LL(x)
#else
#  error sizeof(void*) is not the same as long or long long
#endif


/* Global Ruby hash table to store Trackings from C/C++
   structs to Ruby Objects. 
*/
static VALUE swig_ruby_trackings = Qnil;

/* Global variable that stores a reference to the ruby
   hash table delete function. */
static ID swig_ruby_hash_delete;

/* Setup a Ruby hash table to store Trackings */
SWIGRUNTIME void SWIG_RubyInitializeTrackings(void) {
  /* Create a ruby hash table to store Trackings from C++ 
     objects to Ruby objects. */

  /* Try to see if some other .so has already created a 
     tracking hash table, which we keep hidden in an instance var
     in the SWIG module.
     This is done to allow multiple DSOs to share the same
     tracking table.
  */
  ID trackings_id = rb_intern( "@__trackings__" );
  VALUE verbose = rb_gv_get("VERBOSE");
  rb_gv_set("VERBOSE", Qfalse);
  swig_ruby_trackings = rb_ivar_get( _mSWIG, trackings_id );
  rb_gv_set("VERBOSE", verbose);

  /* No, it hasn't.  Create one ourselves */ 
  if ( swig_ruby_trackings == Qnil )
    {
      swig_ruby_trackings = rb_hash_new();
      rb_ivar_set( _mSWIG, trackings_id, swig_ruby_trackings );
    }

  /* Now store a reference to the hash table delete function
     so that we only have to look it up once.*/
  swig_ruby_hash_delete = rb_intern("delete");
}

/* Get a Ruby number to reference a pointer */
SWIGRUNTIME VALUE SWIG_RubyPtrToReference(void* ptr) {
  /* We cast the pointer to an unsigned long
     and then store a reference to it using
     a Ruby number object. */

  /* Convert the pointer to a Ruby number */
  return SWIG2NUM(ptr);
}

/* Get a Ruby number to reference an object */
SWIGRUNTIME VALUE SWIG_RubyObjectToReference(VALUE object) {
  /* We cast the object to an unsigned long
     and then store a reference to it using
     a Ruby number object. */

  /* Convert the Object to a Ruby number */
  return SWIG2NUM(object);
}

/* Get a Ruby object from a previously stored reference */
SWIGRUNTIME VALUE SWIG_RubyReferenceToObject(VALUE reference) {
  /* The provided Ruby number object is a reference
     to the Ruby object we want.*/

  /* Convert the Ruby number to a Ruby object */
  return NUM2SWIG(reference);
}

/* Add a Tracking from a C/C++ struct to a Ruby object */
SWIGRUNTIME void SWIG_RubyAddTracking(void* ptr, VALUE object) {
  /* In a Ruby hash table we store the pointer and
     the associated Ruby object.  The trick here is
     that we cannot store the Ruby object directly - if
     we do then it cannot be garbage collected.  So
     instead we typecast it as a unsigned long and
     convert it to a Ruby number object.*/

  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Get a reference to the Ruby object as a Ruby number */
  VALUE value = SWIG_RubyObjectToReference(object);

  /* Store the mapping to the global hash table. */
  rb_hash_aset(swig_ruby_trackings, key, value);
}

/* Get the Ruby object that owns the specified C/C++ struct */
SWIGRUNTIME VALUE SWIG_RubyInstanceFor(void* ptr) {
  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Now lookup the value stored in the global hash table */
  VALUE value = rb_hash_aref(swig_ruby_trackings, key);
	
  if (value == Qnil) {
    /* No object exists - return nil. */
    return Qnil;
  }
  else {
    /* Convert this value to Ruby object */
    return SWIG_RubyReferenceToObject(value);
  }
}

/* Remove a Tracking from a C/C++ struct to a Ruby object.  It
   is very important to remove objects once they are destroyed
   since the same memory address may be reused later to create
   a new object. */
SWIGRUNTIME void SWIG_RubyRemoveTracking(void* ptr) {
  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Delete the object from the hash table by calling Ruby's
     do this we need to call the Hash.delete method.*/
  rb_funcall(swig_ruby_trackings, swig_ruby_hash_delete, 1, key);
}

/* This is a helper method that unlinks a Ruby object from its
   underlying C++ object.  This is needed if the lifetime of the
   Ruby object is longer than the C++ object */
SWIGRUNTIME void SWIG_RubyUnlinkObjects(void* ptr) {
  VALUE object = SWIG_RubyInstanceFor(ptr);

  if (object != Qnil) {
    DATA_PTR(object) = 0;
  }
}


#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Ruby API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

SWIGINTERN VALUE
SWIG_Ruby_AppendOutput(VALUE target, VALUE o) {
  if (NIL_P(target)) {
    target = o;
  } else {
    if (TYPE(target) != T_ARRAY) {
      VALUE o2 = target;
      target = rb_ary_new();
      rb_ary_push(target, o2);
    }
    rb_ary_push(target, o);
  }
  return target;
}

/* For ruby1.8.4 and earlier. */
#ifndef RUBY_INIT_STACK
   RUBY_EXTERN void Init_stack(VALUE* addr);
#  define RUBY_INIT_STACK \
   VALUE variable_in_this_stack_frame; \
   Init_stack(&variable_in_this_stack_frame);
#endif


#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * rubyrun.swg
 *
 * This file contains the runtime support for Ruby modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0

/* for raw pointers */
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Ruby_NewPointerObj(ptr, type, flags)
#define SWIG_AcquirePtr(ptr, own)                       SWIG_Ruby_AcquirePtr(ptr, own)
#define swig_owntype                                    ruby_owntype

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Ruby_GetModule()	
#define SWIG_SetModule(clientdata, pointer) 		SWIG_Ruby_SetModule(pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Ruby_ErrorType(code)               
#define SWIG_Error(code, msg)            		rb_raise(SWIG_Ruby_ErrorType(code), msg)
#define SWIG_fail                        		goto fail				 


/* Ruby-specific SWIG API */

#define SWIG_InitRuntime()                              SWIG_Ruby_InitRuntime()              
#define SWIG_define_class(ty)                        	SWIG_Ruby_define_class(ty)
#define SWIG_NewClassInstance(value, ty)             	SWIG_Ruby_NewClassInstance(value, ty)
#define SWIG_MangleStr(value)                        	SWIG_Ruby_MangleStr(value)		  
#define SWIG_CheckConvert(value, ty)                 	SWIG_Ruby_CheckConvert(value, ty)	  

#include "assert.h"

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

typedef struct {
  VALUE klass;
  VALUE mImpl;
  void  (*mark)(void *);
  void  (*destroy)(void *);
  int trackObjects;
} swig_class;


/* Global pointer used to keep some internal SWIG stuff */
static VALUE _cSWIG_Pointer = Qnil;
static VALUE swig_runtime_data_type_pointer = Qnil;

/* Global IDs used to keep some internal SWIG stuff */
static ID swig_arity_id = 0;
static ID swig_call_id  = 0;

/*
  If your swig extension is to be run within an embedded ruby and has
  director callbacks, you should set -DRUBY_EMBEDDED during compilation.  
  This will reset ruby's stack frame on each entry point from the main 
  program the first time a virtual director function is invoked (in a 
  non-recursive way).
  If this is not done, you run the risk of Ruby trashing the stack.
*/

#ifdef RUBY_EMBEDDED

#  define SWIG_INIT_STACK                            \
      if ( !swig_virtual_calls ) { RUBY_INIT_STACK } \
      ++swig_virtual_calls;
#  define SWIG_RELEASE_STACK --swig_virtual_calls;
#  define Ruby_DirectorTypeMismatchException(x) \
          rb_raise( rb_eTypeError, x ); return c_result;

      static unsigned int swig_virtual_calls = 0;

#else  /* normal non-embedded extension */

#  define SWIG_INIT_STACK
#  define SWIG_RELEASE_STACK
#  define Ruby_DirectorTypeMismatchException(x) \
          throw Swig::DirectorTypeMismatchException( x );

#endif  /* RUBY_EMBEDDED */


SWIGRUNTIME VALUE 
getExceptionClass(void) {
  static int init = 0;
  static VALUE rubyExceptionClass ;
  if (!init) {
    init = 1;
    rubyExceptionClass = rb_const_get(_mSWIG, rb_intern("Exception"));
  }
  return rubyExceptionClass;
} 

/* This code checks to see if the Ruby object being raised as part
   of an exception inherits from the Ruby class Exception.  If so,
   the object is simply returned.  If not, then a new Ruby exception
   object is created and that will be returned to Ruby.*/
SWIGRUNTIME VALUE
SWIG_Ruby_ExceptionType(swig_type_info *desc, VALUE obj) {
  VALUE exceptionClass = getExceptionClass();
  if (rb_obj_is_kind_of(obj, exceptionClass)) {
    return obj;
  }  else {
    return rb_exc_new3(rb_eRuntimeError, rb_obj_as_string(obj));
  }
}

/* Initialize Ruby runtime support */
SWIGRUNTIME void
SWIG_Ruby_InitRuntime(void)
{
  if (_mSWIG == Qnil) {
    _mSWIG = rb_define_module("SWIG");
    swig_call_id  = rb_intern("call");
    swig_arity_id = rb_intern("arity");
  }
}

/* Define Ruby class for C type */
SWIGRUNTIME void
SWIG_Ruby_define_class(swig_type_info *type)
{
  VALUE klass;
  char *klass_name = (char *) malloc(4 + strlen(type->name) + 1);
  sprintf(klass_name, "TYPE%s", type->name);
  if (NIL_P(_cSWIG_Pointer)) {
    _cSWIG_Pointer = rb_define_class_under(_mSWIG, "Pointer", rb_cObject);
    rb_undef_method(CLASS_OF(_cSWIG_Pointer), "new");
  }
  klass = rb_define_class_under(_mSWIG, klass_name, _cSWIG_Pointer);
  free((void *) klass_name);
}

/* Create a new pointer object */
SWIGRUNTIME VALUE
SWIG_Ruby_NewPointerObj(void *ptr, swig_type_info *type, int flags)
{
  int own =  flags & SWIG_POINTER_OWN; 
  int track;
  char *klass_name;
  swig_class *sklass;
  VALUE klass;
  VALUE obj;
  
  if (!ptr)
    return Qnil;
  
  if (type->clientdata) {
    sklass = (swig_class *) type->clientdata;
		
    /* Are we tracking this class and have we already returned this Ruby object? */
    track = sklass->trackObjects;
    if (track) {
      obj = SWIG_RubyInstanceFor(ptr);
      
      /* Check the object's type and make sure it has the correct type.
        It might not in cases where methods do things like 
        downcast methods. */
      if (obj != Qnil) {
        VALUE value = rb_iv_get(obj, "@__swigtype__");
        char* type_name = RSTRING_PTR(value);
				
        if (strcmp(type->name, type_name) == 0) {
          return obj;
        }
      }
    }

    /* Create a new Ruby object */
    obj = Data_Wrap_Struct(sklass->klass, VOIDFUNC(sklass->mark), 
			   ( own ? VOIDFUNC(sklass->destroy) : 
			     (track ? VOIDFUNC(SWIG_RubyRemoveTracking) : 0 )
			     ), ptr);

    /* If tracking is on for this class then track this object. */
    if (track) {
      SWIG_RubyAddTracking(ptr, obj);
    }
  } else {
    klass_name = (char *) malloc(4 + strlen(type->name) + 1);
    sprintf(klass_name, "TYPE%s", type->name);
    klass = rb_const_get(_mSWIG, rb_intern(klass_name));
    free((void *) klass_name);
    obj = Data_Wrap_Struct(klass, 0, 0, ptr);
  }
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  
  return obj;
}

/* Create a new class instance (always owned) */
SWIGRUNTIME VALUE
SWIG_Ruby_NewClassInstance(VALUE klass, swig_type_info *type)
{
  VALUE obj;
  swig_class *sklass = (swig_class *) type->clientdata;
  obj = Data_Wrap_Struct(klass, VOIDFUNC(sklass->mark), VOIDFUNC(sklass->destroy), 0);
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  return obj;
}

/* Get type mangle from class name */
SWIGRUNTIMEINLINE char *
SWIG_Ruby_MangleStr(VALUE obj)
{
  VALUE stype = rb_iv_get(obj, "@__swigtype__");
  return StringValuePtr(stype);
}

/* Acquire a pointer value */
typedef void (*ruby_owntype)(void*);

SWIGRUNTIME ruby_owntype
SWIG_Ruby_AcquirePtr(VALUE obj, ruby_owntype own) {
  if (obj) {
    ruby_owntype oldown = RDATA(obj)->dfree;
    RDATA(obj)->dfree = own;
    return oldown;
  } else {
    return 0;
  }
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPtrAndOwn(VALUE obj, void **ptr, swig_type_info *ty, int flags, ruby_owntype *own)
{
  char *c;
  swig_cast_info *tc;
  void *vptr = 0;

  /* Grab the pointer */
  if (NIL_P(obj)) {
    *ptr = 0;
    return SWIG_OK;
  } else {
    if (TYPE(obj) != T_DATA) {
      return SWIG_ERROR;
    }
    Data_Get_Struct(obj, void, vptr);
  }
  
  if (own) *own = RDATA(obj)->dfree;
    
  /* Check to see if the input object is giving up ownership
     of the underlying C struct or C++ object.  If so then we
     need to reset the destructor since the Ruby object no 
     longer owns the underlying C++ object.*/ 
  if (flags & SWIG_POINTER_DISOWN) {
    /* Is tracking on for this class? */
    int track = 0;
    if (ty && ty->clientdata) {
      swig_class *sklass = (swig_class *) ty->clientdata;
      track = sklass->trackObjects;
    }
		
    if (track) {
      /* We are tracking objects for this class.  Thus we change the destructor
       * to SWIG_RubyRemoveTracking.  This allows us to
       * remove the mapping from the C++ to Ruby object
       * when the Ruby object is garbage collected.  If we don't
       * do this, then it is possible we will return a reference 
       * to a Ruby object that no longer exists thereby crashing Ruby. */
      RDATA(obj)->dfree = SWIG_RubyRemoveTracking;
    } else {    
      RDATA(obj)->dfree = 0;
    }
  }

  /* Do type-checking if type info was provided */
  if (ty) {
    if (ty->clientdata) {
      if (rb_obj_is_kind_of(obj, ((swig_class *) (ty->clientdata))->klass)) {
        if (vptr == 0) {
          /* The object has already been deleted */
          return SWIG_ObjectPreviouslyDeletedError;
        }
        *ptr = vptr;
        return SWIG_OK;
      }
    }
    if ((c = SWIG_MangleStr(obj)) == NULL) {
      return SWIG_ERROR;
    }
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) {
      return SWIG_ERROR;
    } else {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc, vptr, &newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    }
  } else {
    *ptr = vptr;
  }
  
  return SWIG_OK;
}

/* Check convert */
SWIGRUNTIMEINLINE int
SWIG_Ruby_CheckConvert(VALUE obj, swig_type_info *ty)
{
  char *c = SWIG_MangleStr(obj);
  if (!c) return 0;
  return SWIG_TypeCheck(c,ty) != 0;
}

SWIGRUNTIME VALUE
SWIG_Ruby_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r, ptr, sz);
  strcpy(r, type->name);
  return rb_str_new2(result);
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPacked(VALUE obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (TYPE(obj) != T_STRING) goto type_error;
  c = StringValuePtr(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c, ptr, sz);
  if (ty) {
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:
  return SWIG_ERROR;
}

SWIGRUNTIME swig_module_info *
SWIG_Ruby_GetModule(void)
{
  VALUE pointer;
  swig_module_info *ret = 0;
  VALUE verbose = rb_gv_get("VERBOSE");

 /* temporarily disable warnings, since the pointer check causes warnings with 'ruby -w' */
  rb_gv_set("VERBOSE", Qfalse);
  
  /* first check if pointer already created */
  pointer = rb_gv_get("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  if (pointer != Qnil) {
    Data_Get_Struct(pointer, swig_module_info, ret);
  }

  /* reinstate warnings */
  rb_gv_set("VERBOSE", verbose);
  return ret;
}

SWIGRUNTIME void 
SWIG_Ruby_SetModule(swig_module_info *pointer)
{
  /* register a new class */
  VALUE cl = rb_define_class("swig_runtime_data", rb_cObject);
  /* create and store the structure pointer to a global variable */
  swig_runtime_data_type_pointer = Data_Wrap_Struct(cl, 0, 0, pointer);
  rb_define_readonly_variable("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, &swig_runtime_data_type_pointer);
}

/* This function can be used to check whether a proc or method or similarly
   callable function has been passed.  Usually used in a %typecheck, like:

   %typecheck(c_callback_t, precedence=SWIG_TYPECHECK_POINTER) {
        $result = SWIG_Ruby_isCallable( $input );
   }
 */
SWIGINTERN
int SWIG_Ruby_isCallable( VALUE proc )
{
  if ( rb_respond_to( proc, swig_call_id ) == Qtrue )
    return 1;
  return 0;
}

/* This function can be used to check the arity (number of arguments)
   a proc or method can take.  Usually used in a %typecheck.
   Valid arities will be that equal to minimal or those < 0
   which indicate a variable number of parameters at the end.
 */
SWIGINTERN
int SWIG_Ruby_arity( VALUE proc, int minimal )
{
  if ( rb_respond_to( proc, swig_arity_id ) == Qtrue )
    {
      VALUE num = rb_funcall( proc, swig_arity_id, 0 );
      int arity = NUM2INT(num);
      if ( arity < 0 && (arity+1) < -minimal ) return 1;
      if ( arity == minimal ) return 1;
      return 1;
    }
  return 0;
}


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_OpalCallEndReason swig_types[0]
#define SWIGTYPE_p_OpalContext swig_types[1]
#define SWIGTYPE_p_OpalEchoCancelMode swig_types[2]
#define SWIGTYPE_p_OpalHandleStruct swig_types[3]
#define SWIGTYPE_p_OpalLineAppearanceStates swig_types[4]
#define SWIGTYPE_p_OpalMediaDataType swig_types[5]
#define SWIGTYPE_p_OpalMediaStates swig_types[6]
#define SWIGTYPE_p_OpalMediaTiming swig_types[7]
#define SWIGTYPE_p_OpalMessage swig_types[8]
#define SWIGTYPE_p_OpalMessagePtr swig_types[9]
#define SWIGTYPE_p_OpalMessageType swig_types[10]
#define SWIGTYPE_p_OpalMessage_m_param swig_types[11]
#define SWIGTYPE_p_OpalParamCallCleared swig_types[12]
#define SWIGTYPE_p_OpalParamGeneral swig_types[13]
#define SWIGTYPE_p_OpalParamProtocol swig_types[14]
#define SWIGTYPE_p_OpalParamRecording swig_types[15]
#define SWIGTYPE_p_OpalParamRegistration swig_types[16]
#define SWIGTYPE_p_OpalParamSetUpCall swig_types[17]
#define SWIGTYPE_p_OpalParamSetUserData swig_types[18]
#define SWIGTYPE_p_OpalProductDescription swig_types[19]
#define SWIGTYPE_p_OpalRegistrationStates swig_types[20]
#define SWIGTYPE_p_OpalSilenceDetectMode swig_types[21]
#define SWIGTYPE_p_OpalStatusCallCleared swig_types[22]
#define SWIGTYPE_p_OpalStatusIncomingCall swig_types[23]
#define SWIGTYPE_p_OpalStatusLineAppearance swig_types[24]
#define SWIGTYPE_p_OpalStatusMediaStream swig_types[25]
#define SWIGTYPE_p_OpalStatusMessageWaiting swig_types[26]
#define SWIGTYPE_p_OpalStatusRegistration swig_types[27]
#define SWIGTYPE_p_OpalStatusUserInput swig_types[28]
#define SWIGTYPE_p_OpalVideoRecordMixMode swig_types[29]
#define SWIGTYPE_p_char swig_types[30]
#define SWIGTYPE_p_f_p_q_const__OpalMessage__int swig_types[31]
#define SWIGTYPE_p_f_p_q_const__char_p_q_const__char_p_q_const__char_p_void_p_void_int__int swig_types[32]
#define SWIGTYPE_p_unsigned_int swig_types[33]
#define SWIGTYPE_p_void swig_types[34]
static swig_type_info *swig_types[36];
static swig_module_info swig_module = {swig_types, 35, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Init_opal
#define SWIG_name    "Opal"

static VALUE mOpal;

#define SWIG_RUBY_THREAD_BEGIN_BLOCK
#define SWIG_RUBY_THREAD_END_BLOCK


#define SWIGVERSION 0x010340 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


    /* Includes the header in the wrapper code */
    #include "opal.h"
  

#ifdef __cplusplus
extern "C" {
#endif

// Ruby 1.9 changed the file name of this header
#ifdef HAVE_RUBY_IO_H
#include "ruby/io.h"
#else
#include "rubyio.h"
#endif

#ifdef __cplusplus
}
#endif


#ifdef __cplusplus
extern "C" {
#endif
#ifdef HAVE_SYS_TIME_H
# include <sys/time.h>
struct timeval rb_time_timeval(VALUE);
#endif
#ifdef __cplusplus
}
#endif


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


  #define SWIG_From_long   LONG2NUM 


SWIGINTERNINLINE VALUE
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(VALUE obj, char** cptr, size_t* psize, int *alloc)
{
  if (TYPE(obj) == T_STRING) {
    #if defined(StringValuePtr)
    char *cstr = StringValuePtr(obj); 
    #else
    char *cstr = STR2CSTR(obj);
    #endif
    size_t size = RSTRING_LEN(obj) + 1;
    if (cptr)  {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy((new char[size]), cstr, sizeof(char)*(size)));
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      }
    }
    if (psize) *psize = size;
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *)vptr;
	if (psize) *psize = vptr ? (strlen((char*)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }  
  return SWIG_TypeError;
}





SWIGINTERNINLINE VALUE 
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > LONG_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : Qnil;
    } else {
      return rb_str_new(carray, static_cast< long >(size));
    }
  } else {
    return Qnil;
  }
}


SWIGINTERNINLINE VALUE 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERN VALUE
SWIG_ruby_failed(void)
{
  return Qnil;
} 


/*@SWIG:c:\\tools\\Lib\\ruby\\rubyprimtypes.swg,23,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2ULONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  unsigned long *res = (unsigned long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2ULONG(obj) : rb_big2ulong(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (VALUE obj, unsigned long *val) 
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    unsigned long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2ULONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (VALUE obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return ULONG2NUM(value); 
}


SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


/*@SWIG:c:\\tools\\Lib\\ruby\\rubyprimtypes.swg,23,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2LONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  long *res = (long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2LONG(obj) : rb_big2long(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_long (VALUE obj, long* val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2LONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (VALUE obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


typedef union {
    const char *             m_commandError;                                       
    OpalParamGeneral         m_general;                                                    
    OpalParamProtocol        m_protocol;                                                    
    OpalParamRegistration    m_registrationInfo;                                   
    OpalStatusRegistration   m_registrationStatus;                                 
    OpalParamSetUpCall       m_callSetUp;                                                                                            
    const char *             m_callToken;                                                                                                                 
    OpalStatusIncomingCall   m_incomingCall;                                       
    OpalStatusUserInput      m_userInput;                                                        
    OpalStatusMessageWaiting m_messageWaiting;                                       
    OpalStatusLineAppearance m_lineAppearance;                                       
    OpalStatusCallCleared    m_callCleared;                                       
    OpalParamCallCleared     m_clearCall;                                       
    OpalStatusMediaStream    m_mediaStream;                                                          
    OpalParamSetUserData     m_setUserData;                                       
    OpalParamRecording       m_recording;                                            
  } OpalMessage_m_param;



SWIGINTERNINLINE VALUE
SWIG_From_bool  (bool value)
{
  return value ? Qtrue : Qfalse;
}


/*
  Document-method: Opal.OpalInitialise

  call-seq:
    OpalInitialise(unsigned int version, char options) -> OpalHandle

A module function.

*/
SWIGINTERN VALUE
_wrap_OpalInitialise(int argc, VALUE *argv, VALUE self) {
  unsigned int *arg1 = (unsigned int *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  OpalHandle result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "unsigned int *","OpalInitialise", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< unsigned int * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","OpalInitialise", 2, argv[1] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (OpalHandle)OpalInitialise(arg1,(char const *)arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpalHandleStruct, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}



/*
  Document-method: Opal.OpalShutDown

  call-seq:
    OpalShutDown(OpalHandle opal)

A module function.

*/
SWIGINTERN VALUE
_wrap_OpalShutDown(int argc, VALUE *argv, VALUE self) {
  OpalHandle arg1 = (OpalHandle) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OpalHandleStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalHandle","OpalShutDown", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< OpalHandle >(argp1);
  OpalShutDown(arg1);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Opal.OpalGetMessage

  call-seq:
    OpalGetMessage(OpalHandle opal, unsigned int timeout) -> OpalMessage

A module function.

*/
SWIGINTERN VALUE
_wrap_OpalGetMessage(int argc, VALUE *argv, VALUE self) {
  OpalHandle arg1 = (OpalHandle) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  OpalMessage *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OpalHandleStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalHandle","OpalGetMessage", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< OpalHandle >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","OpalGetMessage", 2, argv[1] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (OpalMessage *)OpalGetMessage(arg1,arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpalMessage, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal.OpalSendMessage

  call-seq:
    OpalSendMessage(OpalHandle opal, OpalMessage message) -> OpalMessage

A module function.

*/
SWIGINTERN VALUE
_wrap_OpalSendMessage(int argc, VALUE *argv, VALUE self) {
  OpalHandle arg1 = (OpalHandle) 0 ;
  OpalMessage *arg2 = (OpalMessage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  OpalMessage *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OpalHandleStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalHandle","OpalSendMessage", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< OpalHandle >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_OpalMessage, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "OpalMessage const *","OpalSendMessage", 2, argv[1] )); 
  }
  arg2 = reinterpret_cast< OpalMessage * >(argp2);
  result = (OpalMessage *)OpalSendMessage(arg1,(OpalMessage const *)arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpalMessage, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal.OpalFreeMessage

  call-seq:
    OpalFreeMessage(OpalMessage message)

A module function.

*/
SWIGINTERN VALUE
_wrap_OpalFreeMessage(int argc, VALUE *argv, VALUE self) {
  OpalMessage *arg1 = (OpalMessage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_OpalMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessage *","OpalFreeMessage", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< OpalMessage * >(argp1);
  OpalFreeMessage(arg1);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-class: Opal::OpalParamGeneral

  Proxy of C++ Opal::OpalParamGeneral class


*/
swig_class SwigClassOpalParamGeneral;


/*
  Document-method: Opal::OpalParamGeneral.m_audioRecordDevice

  call-seq:
    m_audioRecordDevice -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamGeneral.m_audioRecordDevice=

  call-seq:
    m_audioRecordDevice=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_audioRecordDevice_set(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_audioRecordDevice", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_audioRecordDevice", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_audioRecordDevice = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_audioRecordDevice = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_audioRecordDevice_get(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_audioRecordDevice", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  result = (char *) ((arg1)->m_audioRecordDevice);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamGeneral.m_audioPlayerDevice

  call-seq:
    m_audioPlayerDevice -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamGeneral.m_audioPlayerDevice=

  call-seq:
    m_audioPlayerDevice=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_audioPlayerDevice_set(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_audioPlayerDevice", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_audioPlayerDevice", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_audioPlayerDevice = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_audioPlayerDevice = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_audioPlayerDevice_get(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_audioPlayerDevice", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  result = (char *) ((arg1)->m_audioPlayerDevice);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamGeneral.m_videoInputDevice

  call-seq:
    m_videoInputDevice -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamGeneral.m_videoInputDevice=

  call-seq:
    m_videoInputDevice=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_videoInputDevice_set(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_videoInputDevice", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_videoInputDevice", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_videoInputDevice = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_videoInputDevice = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_videoInputDevice_get(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_videoInputDevice", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  result = (char *) ((arg1)->m_videoInputDevice);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamGeneral.m_videoOutputDevice

  call-seq:
    m_videoOutputDevice -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamGeneral.m_videoOutputDevice=

  call-seq:
    m_videoOutputDevice=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_videoOutputDevice_set(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_videoOutputDevice", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_videoOutputDevice", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_videoOutputDevice = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_videoOutputDevice = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_videoOutputDevice_get(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_videoOutputDevice", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  result = (char *) ((arg1)->m_videoOutputDevice);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamGeneral.m_videoPreviewDevice

  call-seq:
    m_videoPreviewDevice -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamGeneral.m_videoPreviewDevice=

  call-seq:
    m_videoPreviewDevice=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_videoPreviewDevice_set(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_videoPreviewDevice", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_videoPreviewDevice", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_videoPreviewDevice = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_videoPreviewDevice = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_videoPreviewDevice_get(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_videoPreviewDevice", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  result = (char *) ((arg1)->m_videoPreviewDevice);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamGeneral.m_mediaOrder

  call-seq:
    m_mediaOrder -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamGeneral.m_mediaOrder=

  call-seq:
    m_mediaOrder=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_mediaOrder_set(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_mediaOrder", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_mediaOrder", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_mediaOrder = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_mediaOrder = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_mediaOrder_get(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_mediaOrder", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  result = (char *) ((arg1)->m_mediaOrder);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamGeneral.m_mediaMask

  call-seq:
    m_mediaMask -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamGeneral.m_mediaMask=

  call-seq:
    m_mediaMask=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_mediaMask_set(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_mediaMask", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_mediaMask", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_mediaMask = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_mediaMask = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_mediaMask_get(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_mediaMask", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  result = (char *) ((arg1)->m_mediaMask);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamGeneral.m_autoRxMedia

  call-seq:
    m_autoRxMedia -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamGeneral.m_autoRxMedia=

  call-seq:
    m_autoRxMedia=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_autoRxMedia_set(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_autoRxMedia", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_autoRxMedia", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_autoRxMedia = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_autoRxMedia = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_autoRxMedia_get(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_autoRxMedia", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  result = (char *) ((arg1)->m_autoRxMedia);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamGeneral.m_autoTxMedia

  call-seq:
    m_autoTxMedia -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamGeneral.m_autoTxMedia=

  call-seq:
    m_autoTxMedia=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_autoTxMedia_set(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_autoTxMedia", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_autoTxMedia", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_autoTxMedia = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_autoTxMedia = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_autoTxMedia_get(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_autoTxMedia", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  result = (char *) ((arg1)->m_autoTxMedia);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamGeneral.m_natRouter

  call-seq:
    m_natRouter -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamGeneral.m_natRouter=

  call-seq:
    m_natRouter=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_natRouter_set(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_natRouter", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_natRouter", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_natRouter = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_natRouter = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_natRouter_get(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_natRouter", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  result = (char *) ((arg1)->m_natRouter);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamGeneral.m_stunServer

  call-seq:
    m_stunServer -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamGeneral.m_stunServer=

  call-seq:
    m_stunServer=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_stunServer_set(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_stunServer", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_stunServer", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_stunServer = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_stunServer = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_stunServer_get(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_stunServer", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  result = (char *) ((arg1)->m_stunServer);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamGeneral.m_tcpPortBase

  call-seq:
    m_tcpPortBase -> unsigned int

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamGeneral.m_tcpPortBase=

  call-seq:
    m_tcpPortBase=(x) -> unsigned int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_tcpPortBase_set(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_tcpPortBase", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","m_tcpPortBase", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->m_tcpPortBase = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_tcpPortBase_get(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_tcpPortBase", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  result = (unsigned int) ((arg1)->m_tcpPortBase);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamGeneral.m_tcpPortMax

  call-seq:
    m_tcpPortMax -> unsigned int

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamGeneral.m_tcpPortMax=

  call-seq:
    m_tcpPortMax=(x) -> unsigned int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_tcpPortMax_set(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_tcpPortMax", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","m_tcpPortMax", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->m_tcpPortMax = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_tcpPortMax_get(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_tcpPortMax", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  result = (unsigned int) ((arg1)->m_tcpPortMax);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamGeneral.m_udpPortBase

  call-seq:
    m_udpPortBase -> unsigned int

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamGeneral.m_udpPortBase=

  call-seq:
    m_udpPortBase=(x) -> unsigned int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_udpPortBase_set(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_udpPortBase", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","m_udpPortBase", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->m_udpPortBase = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_udpPortBase_get(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_udpPortBase", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  result = (unsigned int) ((arg1)->m_udpPortBase);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamGeneral.m_udpPortMax

  call-seq:
    m_udpPortMax -> unsigned int

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamGeneral.m_udpPortMax=

  call-seq:
    m_udpPortMax=(x) -> unsigned int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_udpPortMax_set(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_udpPortMax", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","m_udpPortMax", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->m_udpPortMax = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_udpPortMax_get(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_udpPortMax", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  result = (unsigned int) ((arg1)->m_udpPortMax);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamGeneral.m_rtpPortBase

  call-seq:
    m_rtpPortBase -> unsigned int

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamGeneral.m_rtpPortBase=

  call-seq:
    m_rtpPortBase=(x) -> unsigned int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_rtpPortBase_set(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_rtpPortBase", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","m_rtpPortBase", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->m_rtpPortBase = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_rtpPortBase_get(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_rtpPortBase", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  result = (unsigned int) ((arg1)->m_rtpPortBase);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamGeneral.m_rtpPortMax

  call-seq:
    m_rtpPortMax -> unsigned int

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamGeneral.m_rtpPortMax=

  call-seq:
    m_rtpPortMax=(x) -> unsigned int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_rtpPortMax_set(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_rtpPortMax", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","m_rtpPortMax", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->m_rtpPortMax = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_rtpPortMax_get(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_rtpPortMax", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  result = (unsigned int) ((arg1)->m_rtpPortMax);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamGeneral.m_rtpTypeOfService

  call-seq:
    m_rtpTypeOfService -> unsigned int

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamGeneral.m_rtpTypeOfService=

  call-seq:
    m_rtpTypeOfService=(x) -> unsigned int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_rtpTypeOfService_set(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_rtpTypeOfService", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","m_rtpTypeOfService", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->m_rtpTypeOfService = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_rtpTypeOfService_get(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_rtpTypeOfService", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  result = (unsigned int) ((arg1)->m_rtpTypeOfService);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamGeneral.m_rtpMaxPayloadSize

  call-seq:
    m_rtpMaxPayloadSize -> unsigned int

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamGeneral.m_rtpMaxPayloadSize=

  call-seq:
    m_rtpMaxPayloadSize=(x) -> unsigned int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_rtpMaxPayloadSize_set(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_rtpMaxPayloadSize", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","m_rtpMaxPayloadSize", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->m_rtpMaxPayloadSize = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_rtpMaxPayloadSize_get(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_rtpMaxPayloadSize", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  result = (unsigned int) ((arg1)->m_rtpMaxPayloadSize);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamGeneral.m_minAudioJitter

  call-seq:
    m_minAudioJitter -> unsigned int

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamGeneral.m_minAudioJitter=

  call-seq:
    m_minAudioJitter=(x) -> unsigned int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_minAudioJitter_set(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_minAudioJitter", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","m_minAudioJitter", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->m_minAudioJitter = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_minAudioJitter_get(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_minAudioJitter", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  result = (unsigned int) ((arg1)->m_minAudioJitter);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamGeneral.m_maxAudioJitter

  call-seq:
    m_maxAudioJitter -> unsigned int

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamGeneral.m_maxAudioJitter=

  call-seq:
    m_maxAudioJitter=(x) -> unsigned int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_maxAudioJitter_set(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_maxAudioJitter", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","m_maxAudioJitter", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->m_maxAudioJitter = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_maxAudioJitter_get(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_maxAudioJitter", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  result = (unsigned int) ((arg1)->m_maxAudioJitter);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamGeneral.m_silenceDetectMode

  call-seq:
    m_silenceDetectMode -> int

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamGeneral.m_silenceDetectMode=

  call-seq:
    m_silenceDetectMode=(x) -> int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_silenceDetectMode_set(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  OpalSilenceDetectMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_silenceDetectMode", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "OpalSilenceDetectMode","m_silenceDetectMode", 2, argv[0] ));
  } 
  arg2 = static_cast< OpalSilenceDetectMode >(val2);
  if (arg1) (arg1)->m_silenceDetectMode = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_silenceDetectMode_get(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalSilenceDetectMode result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_silenceDetectMode", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  result = (OpalSilenceDetectMode) ((arg1)->m_silenceDetectMode);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamGeneral.m_silenceThreshold

  call-seq:
    m_silenceThreshold -> unsigned int

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamGeneral.m_silenceThreshold=

  call-seq:
    m_silenceThreshold=(x) -> unsigned int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_silenceThreshold_set(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_silenceThreshold", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","m_silenceThreshold", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->m_silenceThreshold = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_silenceThreshold_get(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_silenceThreshold", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  result = (unsigned int) ((arg1)->m_silenceThreshold);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamGeneral.m_signalDeadband

  call-seq:
    m_signalDeadband -> unsigned int

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamGeneral.m_signalDeadband=

  call-seq:
    m_signalDeadband=(x) -> unsigned int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_signalDeadband_set(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_signalDeadband", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","m_signalDeadband", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->m_signalDeadband = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_signalDeadband_get(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_signalDeadband", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  result = (unsigned int) ((arg1)->m_signalDeadband);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamGeneral.m_silenceDeadband

  call-seq:
    m_silenceDeadband -> unsigned int

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamGeneral.m_silenceDeadband=

  call-seq:
    m_silenceDeadband=(x) -> unsigned int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_silenceDeadband_set(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_silenceDeadband", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","m_silenceDeadband", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->m_silenceDeadband = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_silenceDeadband_get(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_silenceDeadband", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  result = (unsigned int) ((arg1)->m_silenceDeadband);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamGeneral.m_silenceAdaptPeriod

  call-seq:
    m_silenceAdaptPeriod -> unsigned int

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamGeneral.m_silenceAdaptPeriod=

  call-seq:
    m_silenceAdaptPeriod=(x) -> unsigned int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_silenceAdaptPeriod_set(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_silenceAdaptPeriod", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","m_silenceAdaptPeriod", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->m_silenceAdaptPeriod = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_silenceAdaptPeriod_get(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_silenceAdaptPeriod", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  result = (unsigned int) ((arg1)->m_silenceAdaptPeriod);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamGeneral.m_echoCancellation

  call-seq:
    m_echoCancellation -> int

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamGeneral.m_echoCancellation=

  call-seq:
    m_echoCancellation=(x) -> int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_echoCancellation_set(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  OpalEchoCancelMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_echoCancellation", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "OpalEchoCancelMode","m_echoCancellation", 2, argv[0] ));
  } 
  arg2 = static_cast< OpalEchoCancelMode >(val2);
  if (arg1) (arg1)->m_echoCancellation = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_echoCancellation_get(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalEchoCancelMode result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_echoCancellation", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  result = (OpalEchoCancelMode) ((arg1)->m_echoCancellation);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamGeneral.m_audioBuffers

  call-seq:
    m_audioBuffers -> unsigned int

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamGeneral.m_audioBuffers=

  call-seq:
    m_audioBuffers=(x) -> unsigned int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_audioBuffers_set(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_audioBuffers", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","m_audioBuffers", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->m_audioBuffers = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_audioBuffers_get(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_audioBuffers", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  result = (unsigned int) ((arg1)->m_audioBuffers);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamGeneral.m_mediaReadData

  call-seq:
    m_mediaReadData -> OpalMediaDataFunction

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamGeneral.m_mediaReadData=

  call-seq:
    m_mediaReadData=(x) -> OpalMediaDataFunction

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_mediaReadData_set(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  OpalMediaDataFunction arg2 = (OpalMediaDataFunction) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_mediaReadData", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(argv[0], (void**)(&arg2), SWIGTYPE_p_f_p_q_const__char_p_q_const__char_p_q_const__char_p_void_p_void_int__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), Ruby_Format_TypeError( "", "OpalMediaDataFunction","m_mediaReadData", 2, argv[0] )); 
    }
  }
  if (arg1) (arg1)->m_mediaReadData = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_mediaReadData_get(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalMediaDataFunction result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_mediaReadData", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  result = (OpalMediaDataFunction) ((arg1)->m_mediaReadData);
  vresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_q_const__char_p_q_const__char_p_q_const__char_p_void_p_void_int__int);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamGeneral.m_mediaWriteData

  call-seq:
    m_mediaWriteData -> OpalMediaDataFunction

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamGeneral.m_mediaWriteData=

  call-seq:
    m_mediaWriteData=(x) -> OpalMediaDataFunction

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_mediaWriteData_set(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  OpalMediaDataFunction arg2 = (OpalMediaDataFunction) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_mediaWriteData", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(argv[0], (void**)(&arg2), SWIGTYPE_p_f_p_q_const__char_p_q_const__char_p_q_const__char_p_void_p_void_int__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), Ruby_Format_TypeError( "", "OpalMediaDataFunction","m_mediaWriteData", 2, argv[0] )); 
    }
  }
  if (arg1) (arg1)->m_mediaWriteData = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_mediaWriteData_get(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalMediaDataFunction result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_mediaWriteData", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  result = (OpalMediaDataFunction) ((arg1)->m_mediaWriteData);
  vresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_q_const__char_p_q_const__char_p_q_const__char_p_void_p_void_int__int);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamGeneral.m_mediaDataHeader

  call-seq:
    m_mediaDataHeader -> int

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamGeneral.m_mediaDataHeader=

  call-seq:
    m_mediaDataHeader=(x) -> int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_mediaDataHeader_set(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  OpalMediaDataType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_mediaDataHeader", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "OpalMediaDataType","m_mediaDataHeader", 2, argv[0] ));
  } 
  arg2 = static_cast< OpalMediaDataType >(val2);
  if (arg1) (arg1)->m_mediaDataHeader = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_mediaDataHeader_get(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalMediaDataType result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_mediaDataHeader", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  result = (OpalMediaDataType) ((arg1)->m_mediaDataHeader);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamGeneral.m_messageAvailable

  call-seq:
    m_messageAvailable -> OpalMessageAvailableFunction

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamGeneral.m_messageAvailable=

  call-seq:
    m_messageAvailable=(x) -> OpalMessageAvailableFunction

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_messageAvailable_set(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  OpalMessageAvailableFunction arg2 = (OpalMessageAvailableFunction) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_messageAvailable", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(argv[0], (void**)(&arg2), SWIGTYPE_p_f_p_q_const__OpalMessage__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), Ruby_Format_TypeError( "", "OpalMessageAvailableFunction","m_messageAvailable", 2, argv[0] )); 
    }
  }
  if (arg1) (arg1)->m_messageAvailable = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_messageAvailable_get(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalMessageAvailableFunction result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_messageAvailable", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  result = (OpalMessageAvailableFunction) ((arg1)->m_messageAvailable);
  vresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_q_const__OpalMessage__int);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamGeneral.m_mediaOptions

  call-seq:
    m_mediaOptions -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamGeneral.m_mediaOptions=

  call-seq:
    m_mediaOptions=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_mediaOptions_set(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_mediaOptions", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_mediaOptions", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_mediaOptions = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_mediaOptions = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_mediaOptions_get(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_mediaOptions", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  result = (char *) ((arg1)->m_mediaOptions);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamGeneral.m_audioBufferTime

  call-seq:
    m_audioBufferTime -> unsigned int

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamGeneral.m_audioBufferTime=

  call-seq:
    m_audioBufferTime=(x) -> unsigned int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_audioBufferTime_set(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_audioBufferTime", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","m_audioBufferTime", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->m_audioBufferTime = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_audioBufferTime_get(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_audioBufferTime", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  result = (unsigned int) ((arg1)->m_audioBufferTime);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamGeneral.m_manualAlerting

  call-seq:
    m_manualAlerting -> unsigned int

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamGeneral.m_manualAlerting=

  call-seq:
    m_manualAlerting=(x) -> unsigned int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_manualAlerting_set(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_manualAlerting", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","m_manualAlerting", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->m_manualAlerting = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_manualAlerting_get(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_manualAlerting", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  result = (unsigned int) ((arg1)->m_manualAlerting);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamGeneral.m_mediaTiming

  call-seq:
    m_mediaTiming -> int

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamGeneral.m_mediaTiming=

  call-seq:
    m_mediaTiming=(x) -> int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_mediaTiming_set(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  OpalMediaTiming arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_mediaTiming", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "OpalMediaTiming","m_mediaTiming", 2, argv[0] ));
  } 
  arg2 = static_cast< OpalMediaTiming >(val2);
  if (arg1) (arg1)->m_mediaTiming = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamGeneral_m_mediaTiming_get(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *arg1 = (OpalParamGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalMediaTiming result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_mediaTiming", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamGeneral * >(argp1);
  result = (OpalMediaTiming) ((arg1)->m_mediaTiming);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_OpalParamGeneral_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_OpalParamGeneral_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_OpalParamGeneral);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: Opal::OpalParamGeneral.new

  call-seq:
    OpalParamGeneral.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_OpalParamGeneral(int argc, VALUE *argv, VALUE self) {
  OpalParamGeneral *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (OpalParamGeneral *)new OpalParamGeneral();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_OpalParamGeneral(OpalParamGeneral *arg1) {
    delete arg1;
}


/*
  Document-class: Opal::OpalProductDescription

  Proxy of C++ Opal::OpalProductDescription class


*/
swig_class SwigClassOpalProductDescription;


/*
  Document-method: Opal::OpalProductDescription.m_vendor

  call-seq:
    m_vendor -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalProductDescription.m_vendor=

  call-seq:
    m_vendor=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalProductDescription_m_vendor_set(int argc, VALUE *argv, VALUE self) {
  OpalProductDescription *arg1 = (OpalProductDescription *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalProductDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalProductDescription *","m_vendor", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalProductDescription * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_vendor", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_vendor = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_vendor = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalProductDescription_m_vendor_get(int argc, VALUE *argv, VALUE self) {
  OpalProductDescription *arg1 = (OpalProductDescription *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalProductDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalProductDescription *","m_vendor", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalProductDescription * >(argp1);
  result = (char *) ((arg1)->m_vendor);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalProductDescription.m_name

  call-seq:
    m_name -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalProductDescription.m_name=

  call-seq:
    m_name=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalProductDescription_m_name_set(int argc, VALUE *argv, VALUE self) {
  OpalProductDescription *arg1 = (OpalProductDescription *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalProductDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalProductDescription *","m_name", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalProductDescription * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_name", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_name = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_name = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalProductDescription_m_name_get(int argc, VALUE *argv, VALUE self) {
  OpalProductDescription *arg1 = (OpalProductDescription *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalProductDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalProductDescription *","m_name", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalProductDescription * >(argp1);
  result = (char *) ((arg1)->m_name);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalProductDescription.m_version

  call-seq:
    m_version -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalProductDescription.m_version=

  call-seq:
    m_version=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalProductDescription_m_version_set(int argc, VALUE *argv, VALUE self) {
  OpalProductDescription *arg1 = (OpalProductDescription *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalProductDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalProductDescription *","m_version", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalProductDescription * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_version", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_version = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_version = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalProductDescription_m_version_get(int argc, VALUE *argv, VALUE self) {
  OpalProductDescription *arg1 = (OpalProductDescription *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalProductDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalProductDescription *","m_version", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalProductDescription * >(argp1);
  result = (char *) ((arg1)->m_version);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalProductDescription.m_t35CountryCode

  call-seq:
    m_t35CountryCode -> unsigned int

Get value of attribute.

*/

/*
  Document-method: Opal::OpalProductDescription.m_t35CountryCode=

  call-seq:
    m_t35CountryCode=(x) -> unsigned int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalProductDescription_m_t35CountryCode_set(int argc, VALUE *argv, VALUE self) {
  OpalProductDescription *arg1 = (OpalProductDescription *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalProductDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalProductDescription *","m_t35CountryCode", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalProductDescription * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","m_t35CountryCode", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->m_t35CountryCode = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalProductDescription_m_t35CountryCode_get(int argc, VALUE *argv, VALUE self) {
  OpalProductDescription *arg1 = (OpalProductDescription *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalProductDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalProductDescription *","m_t35CountryCode", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalProductDescription * >(argp1);
  result = (unsigned int) ((arg1)->m_t35CountryCode);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalProductDescription.m_t35Extension

  call-seq:
    m_t35Extension -> unsigned int

Get value of attribute.

*/

/*
  Document-method: Opal::OpalProductDescription.m_t35Extension=

  call-seq:
    m_t35Extension=(x) -> unsigned int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalProductDescription_m_t35Extension_set(int argc, VALUE *argv, VALUE self) {
  OpalProductDescription *arg1 = (OpalProductDescription *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalProductDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalProductDescription *","m_t35Extension", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalProductDescription * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","m_t35Extension", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->m_t35Extension = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalProductDescription_m_t35Extension_get(int argc, VALUE *argv, VALUE self) {
  OpalProductDescription *arg1 = (OpalProductDescription *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalProductDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalProductDescription *","m_t35Extension", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalProductDescription * >(argp1);
  result = (unsigned int) ((arg1)->m_t35Extension);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalProductDescription.m_manufacturerCode

  call-seq:
    m_manufacturerCode -> unsigned int

Get value of attribute.

*/

/*
  Document-method: Opal::OpalProductDescription.m_manufacturerCode=

  call-seq:
    m_manufacturerCode=(x) -> unsigned int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalProductDescription_m_manufacturerCode_set(int argc, VALUE *argv, VALUE self) {
  OpalProductDescription *arg1 = (OpalProductDescription *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalProductDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalProductDescription *","m_manufacturerCode", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalProductDescription * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","m_manufacturerCode", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->m_manufacturerCode = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalProductDescription_m_manufacturerCode_get(int argc, VALUE *argv, VALUE self) {
  OpalProductDescription *arg1 = (OpalProductDescription *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalProductDescription, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalProductDescription *","m_manufacturerCode", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalProductDescription * >(argp1);
  result = (unsigned int) ((arg1)->m_manufacturerCode);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_OpalProductDescription_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_OpalProductDescription_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_OpalProductDescription);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: Opal::OpalProductDescription.new

  call-seq:
    OpalProductDescription.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_OpalProductDescription(int argc, VALUE *argv, VALUE self) {
  OpalProductDescription *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (OpalProductDescription *)new OpalProductDescription();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_OpalProductDescription(OpalProductDescription *arg1) {
    delete arg1;
}


/*
  Document-class: Opal::OpalParamProtocol

  Proxy of C++ Opal::OpalParamProtocol class


*/
swig_class SwigClassOpalParamProtocol;


/*
  Document-method: Opal::OpalParamProtocol.m_prefix

  call-seq:
    m_prefix -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamProtocol.m_prefix=

  call-seq:
    m_prefix=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamProtocol_m_prefix_set(int argc, VALUE *argv, VALUE self) {
  OpalParamProtocol *arg1 = (OpalParamProtocol *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamProtocol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamProtocol *","m_prefix", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamProtocol * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_prefix", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_prefix = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_prefix = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamProtocol_m_prefix_get(int argc, VALUE *argv, VALUE self) {
  OpalParamProtocol *arg1 = (OpalParamProtocol *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamProtocol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamProtocol *","m_prefix", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamProtocol * >(argp1);
  result = (char *) ((arg1)->m_prefix);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamProtocol.m_userName

  call-seq:
    m_userName -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamProtocol.m_userName=

  call-seq:
    m_userName=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamProtocol_m_userName_set(int argc, VALUE *argv, VALUE self) {
  OpalParamProtocol *arg1 = (OpalParamProtocol *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamProtocol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamProtocol *","m_userName", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamProtocol * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_userName", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_userName = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_userName = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamProtocol_m_userName_get(int argc, VALUE *argv, VALUE self) {
  OpalParamProtocol *arg1 = (OpalParamProtocol *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamProtocol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamProtocol *","m_userName", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamProtocol * >(argp1);
  result = (char *) ((arg1)->m_userName);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamProtocol.m_displayName

  call-seq:
    m_displayName -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamProtocol.m_displayName=

  call-seq:
    m_displayName=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamProtocol_m_displayName_set(int argc, VALUE *argv, VALUE self) {
  OpalParamProtocol *arg1 = (OpalParamProtocol *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamProtocol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamProtocol *","m_displayName", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamProtocol * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_displayName", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_displayName = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_displayName = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamProtocol_m_displayName_get(int argc, VALUE *argv, VALUE self) {
  OpalParamProtocol *arg1 = (OpalParamProtocol *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamProtocol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamProtocol *","m_displayName", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamProtocol * >(argp1);
  result = (char *) ((arg1)->m_displayName);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamProtocol.m_product

  call-seq:
    m_product -> OpalProductDescription

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamProtocol.m_product=

  call-seq:
    m_product=(x) -> OpalProductDescription

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamProtocol_m_product_set(int argc, VALUE *argv, VALUE self) {
  OpalParamProtocol *arg1 = (OpalParamProtocol *) 0 ;
  OpalProductDescription *arg2 = (OpalProductDescription *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamProtocol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamProtocol *","m_product", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamProtocol * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_OpalProductDescription, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "OpalProductDescription *","m_product", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< OpalProductDescription * >(argp2);
  if (arg1) (arg1)->m_product = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamProtocol_m_product_get(int argc, VALUE *argv, VALUE self) {
  OpalParamProtocol *arg1 = (OpalParamProtocol *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalProductDescription *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamProtocol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamProtocol *","m_product", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamProtocol * >(argp1);
  result = (OpalProductDescription *)& ((arg1)->m_product);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpalProductDescription, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamProtocol.m_interfaceAddresses

  call-seq:
    m_interfaceAddresses -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamProtocol.m_interfaceAddresses=

  call-seq:
    m_interfaceAddresses=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamProtocol_m_interfaceAddresses_set(int argc, VALUE *argv, VALUE self) {
  OpalParamProtocol *arg1 = (OpalParamProtocol *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamProtocol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamProtocol *","m_interfaceAddresses", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamProtocol * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_interfaceAddresses", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_interfaceAddresses = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_interfaceAddresses = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamProtocol_m_interfaceAddresses_get(int argc, VALUE *argv, VALUE self) {
  OpalParamProtocol *arg1 = (OpalParamProtocol *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamProtocol, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamProtocol *","m_interfaceAddresses", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamProtocol * >(argp1);
  result = (char *) ((arg1)->m_interfaceAddresses);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_OpalParamProtocol_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_OpalParamProtocol_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_OpalParamProtocol);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: Opal::OpalParamProtocol.new

  call-seq:
    OpalParamProtocol.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_OpalParamProtocol(int argc, VALUE *argv, VALUE self) {
  OpalParamProtocol *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (OpalParamProtocol *)new OpalParamProtocol();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_OpalParamProtocol(OpalParamProtocol *arg1) {
    delete arg1;
}


/*
  Document-class: Opal::OpalParamRegistration

  Proxy of C++ Opal::OpalParamRegistration class


*/
swig_class SwigClassOpalParamRegistration;


/*
  Document-method: Opal::OpalParamRegistration.m_protocol

  call-seq:
    m_protocol -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamRegistration.m_protocol=

  call-seq:
    m_protocol=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamRegistration_m_protocol_set(int argc, VALUE *argv, VALUE self) {
  OpalParamRegistration *arg1 = (OpalParamRegistration *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamRegistration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamRegistration *","m_protocol", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamRegistration * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_protocol", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_protocol = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_protocol = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamRegistration_m_protocol_get(int argc, VALUE *argv, VALUE self) {
  OpalParamRegistration *arg1 = (OpalParamRegistration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamRegistration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamRegistration *","m_protocol", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamRegistration * >(argp1);
  result = (char *) ((arg1)->m_protocol);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamRegistration.m_identifier

  call-seq:
    m_identifier -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamRegistration.m_identifier=

  call-seq:
    m_identifier=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamRegistration_m_identifier_set(int argc, VALUE *argv, VALUE self) {
  OpalParamRegistration *arg1 = (OpalParamRegistration *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamRegistration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamRegistration *","m_identifier", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamRegistration * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_identifier", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_identifier = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_identifier = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamRegistration_m_identifier_get(int argc, VALUE *argv, VALUE self) {
  OpalParamRegistration *arg1 = (OpalParamRegistration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamRegistration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamRegistration *","m_identifier", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamRegistration * >(argp1);
  result = (char *) ((arg1)->m_identifier);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamRegistration.m_hostName

  call-seq:
    m_hostName -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamRegistration.m_hostName=

  call-seq:
    m_hostName=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamRegistration_m_hostName_set(int argc, VALUE *argv, VALUE self) {
  OpalParamRegistration *arg1 = (OpalParamRegistration *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamRegistration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamRegistration *","m_hostName", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamRegistration * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_hostName", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_hostName = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_hostName = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamRegistration_m_hostName_get(int argc, VALUE *argv, VALUE self) {
  OpalParamRegistration *arg1 = (OpalParamRegistration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamRegistration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamRegistration *","m_hostName", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamRegistration * >(argp1);
  result = (char *) ((arg1)->m_hostName);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamRegistration.m_authUserName

  call-seq:
    m_authUserName -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamRegistration.m_authUserName=

  call-seq:
    m_authUserName=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamRegistration_m_authUserName_set(int argc, VALUE *argv, VALUE self) {
  OpalParamRegistration *arg1 = (OpalParamRegistration *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamRegistration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamRegistration *","m_authUserName", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamRegistration * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_authUserName", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_authUserName = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_authUserName = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamRegistration_m_authUserName_get(int argc, VALUE *argv, VALUE self) {
  OpalParamRegistration *arg1 = (OpalParamRegistration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamRegistration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamRegistration *","m_authUserName", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamRegistration * >(argp1);
  result = (char *) ((arg1)->m_authUserName);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamRegistration.m_password

  call-seq:
    m_password -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamRegistration.m_password=

  call-seq:
    m_password=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamRegistration_m_password_set(int argc, VALUE *argv, VALUE self) {
  OpalParamRegistration *arg1 = (OpalParamRegistration *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamRegistration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamRegistration *","m_password", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamRegistration * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_password", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_password = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_password = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamRegistration_m_password_get(int argc, VALUE *argv, VALUE self) {
  OpalParamRegistration *arg1 = (OpalParamRegistration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamRegistration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamRegistration *","m_password", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamRegistration * >(argp1);
  result = (char *) ((arg1)->m_password);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamRegistration.m_adminEntity

  call-seq:
    m_adminEntity -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamRegistration.m_adminEntity=

  call-seq:
    m_adminEntity=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamRegistration_m_adminEntity_set(int argc, VALUE *argv, VALUE self) {
  OpalParamRegistration *arg1 = (OpalParamRegistration *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamRegistration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamRegistration *","m_adminEntity", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamRegistration * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_adminEntity", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_adminEntity = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_adminEntity = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamRegistration_m_adminEntity_get(int argc, VALUE *argv, VALUE self) {
  OpalParamRegistration *arg1 = (OpalParamRegistration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamRegistration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamRegistration *","m_adminEntity", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamRegistration * >(argp1);
  result = (char *) ((arg1)->m_adminEntity);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamRegistration.m_timeToLive

  call-seq:
    m_timeToLive -> unsigned int

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamRegistration.m_timeToLive=

  call-seq:
    m_timeToLive=(x) -> unsigned int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamRegistration_m_timeToLive_set(int argc, VALUE *argv, VALUE self) {
  OpalParamRegistration *arg1 = (OpalParamRegistration *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamRegistration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamRegistration *","m_timeToLive", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamRegistration * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","m_timeToLive", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->m_timeToLive = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamRegistration_m_timeToLive_get(int argc, VALUE *argv, VALUE self) {
  OpalParamRegistration *arg1 = (OpalParamRegistration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamRegistration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamRegistration *","m_timeToLive", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamRegistration * >(argp1);
  result = (unsigned int) ((arg1)->m_timeToLive);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamRegistration.m_restoreTime

  call-seq:
    m_restoreTime -> unsigned int

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamRegistration.m_restoreTime=

  call-seq:
    m_restoreTime=(x) -> unsigned int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamRegistration_m_restoreTime_set(int argc, VALUE *argv, VALUE self) {
  OpalParamRegistration *arg1 = (OpalParamRegistration *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamRegistration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamRegistration *","m_restoreTime", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamRegistration * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","m_restoreTime", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->m_restoreTime = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamRegistration_m_restoreTime_get(int argc, VALUE *argv, VALUE self) {
  OpalParamRegistration *arg1 = (OpalParamRegistration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamRegistration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamRegistration *","m_restoreTime", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamRegistration * >(argp1);
  result = (unsigned int) ((arg1)->m_restoreTime);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamRegistration.m_eventPackage

  call-seq:
    m_eventPackage -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamRegistration.m_eventPackage=

  call-seq:
    m_eventPackage=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamRegistration_m_eventPackage_set(int argc, VALUE *argv, VALUE self) {
  OpalParamRegistration *arg1 = (OpalParamRegistration *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamRegistration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamRegistration *","m_eventPackage", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamRegistration * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_eventPackage", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_eventPackage = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_eventPackage = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamRegistration_m_eventPackage_get(int argc, VALUE *argv, VALUE self) {
  OpalParamRegistration *arg1 = (OpalParamRegistration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamRegistration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamRegistration *","m_eventPackage", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamRegistration * >(argp1);
  result = (char *) ((arg1)->m_eventPackage);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_OpalParamRegistration_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_OpalParamRegistration_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_OpalParamRegistration);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: Opal::OpalParamRegistration.new

  call-seq:
    OpalParamRegistration.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_OpalParamRegistration(int argc, VALUE *argv, VALUE self) {
  OpalParamRegistration *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (OpalParamRegistration *)new OpalParamRegistration();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_OpalParamRegistration(OpalParamRegistration *arg1) {
    delete arg1;
}


/*
  Document-class: Opal::OpalStatusRegistration

  Proxy of C++ Opal::OpalStatusRegistration class


*/
swig_class SwigClassOpalStatusRegistration;


/*
  Document-method: Opal::OpalStatusRegistration.m_protocol

  call-seq:
    m_protocol -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalStatusRegistration.m_protocol=

  call-seq:
    m_protocol=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalStatusRegistration_m_protocol_set(int argc, VALUE *argv, VALUE self) {
  OpalStatusRegistration *arg1 = (OpalStatusRegistration *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusRegistration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusRegistration *","m_protocol", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusRegistration * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_protocol", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_protocol = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_protocol = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalStatusRegistration_m_protocol_get(int argc, VALUE *argv, VALUE self) {
  OpalStatusRegistration *arg1 = (OpalStatusRegistration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusRegistration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusRegistration *","m_protocol", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusRegistration * >(argp1);
  result = (char *) ((arg1)->m_protocol);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalStatusRegistration.m_serverName

  call-seq:
    m_serverName -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalStatusRegistration.m_serverName=

  call-seq:
    m_serverName=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalStatusRegistration_m_serverName_set(int argc, VALUE *argv, VALUE self) {
  OpalStatusRegistration *arg1 = (OpalStatusRegistration *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusRegistration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusRegistration *","m_serverName", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusRegistration * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_serverName", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_serverName = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_serverName = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalStatusRegistration_m_serverName_get(int argc, VALUE *argv, VALUE self) {
  OpalStatusRegistration *arg1 = (OpalStatusRegistration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusRegistration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusRegistration *","m_serverName", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusRegistration * >(argp1);
  result = (char *) ((arg1)->m_serverName);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalStatusRegistration.m_error

  call-seq:
    m_error -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalStatusRegistration.m_error=

  call-seq:
    m_error=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalStatusRegistration_m_error_set(int argc, VALUE *argv, VALUE self) {
  OpalStatusRegistration *arg1 = (OpalStatusRegistration *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusRegistration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusRegistration *","m_error", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusRegistration * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_error", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_error = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_error = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalStatusRegistration_m_error_get(int argc, VALUE *argv, VALUE self) {
  OpalStatusRegistration *arg1 = (OpalStatusRegistration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusRegistration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusRegistration *","m_error", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusRegistration * >(argp1);
  result = (char *) ((arg1)->m_error);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalStatusRegistration.m_status

  call-seq:
    m_status -> int

Get value of attribute.

*/

/*
  Document-method: Opal::OpalStatusRegistration.m_status=

  call-seq:
    m_status=(x) -> int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalStatusRegistration_m_status_set(int argc, VALUE *argv, VALUE self) {
  OpalStatusRegistration *arg1 = (OpalStatusRegistration *) 0 ;
  OpalRegistrationStates arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusRegistration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusRegistration *","m_status", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusRegistration * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "OpalRegistrationStates","m_status", 2, argv[0] ));
  } 
  arg2 = static_cast< OpalRegistrationStates >(val2);
  if (arg1) (arg1)->m_status = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalStatusRegistration_m_status_get(int argc, VALUE *argv, VALUE self) {
  OpalStatusRegistration *arg1 = (OpalStatusRegistration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalRegistrationStates result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusRegistration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusRegistration *","m_status", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusRegistration * >(argp1);
  result = (OpalRegistrationStates) ((arg1)->m_status);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalStatusRegistration.m_product

  call-seq:
    m_product -> OpalProductDescription

Get value of attribute.

*/

/*
  Document-method: Opal::OpalStatusRegistration.m_product=

  call-seq:
    m_product=(x) -> OpalProductDescription

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalStatusRegistration_m_product_set(int argc, VALUE *argv, VALUE self) {
  OpalStatusRegistration *arg1 = (OpalStatusRegistration *) 0 ;
  OpalProductDescription *arg2 = (OpalProductDescription *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusRegistration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusRegistration *","m_product", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusRegistration * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_OpalProductDescription, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "OpalProductDescription *","m_product", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< OpalProductDescription * >(argp2);
  if (arg1) (arg1)->m_product = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalStatusRegistration_m_product_get(int argc, VALUE *argv, VALUE self) {
  OpalStatusRegistration *arg1 = (OpalStatusRegistration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalProductDescription *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusRegistration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusRegistration *","m_product", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusRegistration * >(argp1);
  result = (OpalProductDescription *)& ((arg1)->m_product);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpalProductDescription, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_OpalStatusRegistration_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_OpalStatusRegistration_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_OpalStatusRegistration);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: Opal::OpalStatusRegistration.new

  call-seq:
    OpalStatusRegistration.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_OpalStatusRegistration(int argc, VALUE *argv, VALUE self) {
  OpalStatusRegistration *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (OpalStatusRegistration *)new OpalStatusRegistration();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_OpalStatusRegistration(OpalStatusRegistration *arg1) {
    delete arg1;
}


/*
  Document-class: Opal::OpalParamSetUpCall

  Proxy of C++ Opal::OpalParamSetUpCall class


*/
swig_class SwigClassOpalParamSetUpCall;


/*
  Document-method: Opal::OpalParamSetUpCall.m_partyA

  call-seq:
    m_partyA -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamSetUpCall.m_partyA=

  call-seq:
    m_partyA=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamSetUpCall_m_partyA_set(int argc, VALUE *argv, VALUE self) {
  OpalParamSetUpCall *arg1 = (OpalParamSetUpCall *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamSetUpCall, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamSetUpCall *","m_partyA", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamSetUpCall * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_partyA", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_partyA = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_partyA = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamSetUpCall_m_partyA_get(int argc, VALUE *argv, VALUE self) {
  OpalParamSetUpCall *arg1 = (OpalParamSetUpCall *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamSetUpCall, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamSetUpCall *","m_partyA", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamSetUpCall * >(argp1);
  result = (char *) ((arg1)->m_partyA);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamSetUpCall.m_partyB

  call-seq:
    m_partyB -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamSetUpCall.m_partyB=

  call-seq:
    m_partyB=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamSetUpCall_m_partyB_set(int argc, VALUE *argv, VALUE self) {
  OpalParamSetUpCall *arg1 = (OpalParamSetUpCall *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamSetUpCall, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamSetUpCall *","m_partyB", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamSetUpCall * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_partyB", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_partyB = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_partyB = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamSetUpCall_m_partyB_get(int argc, VALUE *argv, VALUE self) {
  OpalParamSetUpCall *arg1 = (OpalParamSetUpCall *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamSetUpCall, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamSetUpCall *","m_partyB", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamSetUpCall * >(argp1);
  result = (char *) ((arg1)->m_partyB);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamSetUpCall.m_callToken

  call-seq:
    m_callToken -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamSetUpCall.m_callToken=

  call-seq:
    m_callToken=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamSetUpCall_m_callToken_set(int argc, VALUE *argv, VALUE self) {
  OpalParamSetUpCall *arg1 = (OpalParamSetUpCall *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamSetUpCall, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamSetUpCall *","m_callToken", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamSetUpCall * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_callToken", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_callToken = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_callToken = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamSetUpCall_m_callToken_get(int argc, VALUE *argv, VALUE self) {
  OpalParamSetUpCall *arg1 = (OpalParamSetUpCall *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamSetUpCall, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamSetUpCall *","m_callToken", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamSetUpCall * >(argp1);
  result = (char *) ((arg1)->m_callToken);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamSetUpCall.m_alertingType

  call-seq:
    m_alertingType -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamSetUpCall.m_alertingType=

  call-seq:
    m_alertingType=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamSetUpCall_m_alertingType_set(int argc, VALUE *argv, VALUE self) {
  OpalParamSetUpCall *arg1 = (OpalParamSetUpCall *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamSetUpCall, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamSetUpCall *","m_alertingType", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamSetUpCall * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_alertingType", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_alertingType = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_alertingType = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamSetUpCall_m_alertingType_get(int argc, VALUE *argv, VALUE self) {
  OpalParamSetUpCall *arg1 = (OpalParamSetUpCall *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamSetUpCall, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamSetUpCall *","m_alertingType", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamSetUpCall * >(argp1);
  result = (char *) ((arg1)->m_alertingType);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamSetUpCall.m_protocolCallId

  call-seq:
    m_protocolCallId -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamSetUpCall.m_protocolCallId=

  call-seq:
    m_protocolCallId=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamSetUpCall_m_protocolCallId_set(int argc, VALUE *argv, VALUE self) {
  OpalParamSetUpCall *arg1 = (OpalParamSetUpCall *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamSetUpCall, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamSetUpCall *","m_protocolCallId", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamSetUpCall * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_protocolCallId", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_protocolCallId = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_protocolCallId = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamSetUpCall_m_protocolCallId_get(int argc, VALUE *argv, VALUE self) {
  OpalParamSetUpCall *arg1 = (OpalParamSetUpCall *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamSetUpCall, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamSetUpCall *","m_protocolCallId", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamSetUpCall * >(argp1);
  result = (char *) ((arg1)->m_protocolCallId);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_OpalParamSetUpCall_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_OpalParamSetUpCall_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_OpalParamSetUpCall);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: Opal::OpalParamSetUpCall.new

  call-seq:
    OpalParamSetUpCall.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_OpalParamSetUpCall(int argc, VALUE *argv, VALUE self) {
  OpalParamSetUpCall *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (OpalParamSetUpCall *)new OpalParamSetUpCall();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_OpalParamSetUpCall(OpalParamSetUpCall *arg1) {
    delete arg1;
}


/*
  Document-class: Opal::OpalStatusIncomingCall

  Proxy of C++ Opal::OpalStatusIncomingCall class


*/
swig_class SwigClassOpalStatusIncomingCall;


/*
  Document-method: Opal::OpalStatusIncomingCall.m_callToken

  call-seq:
    m_callToken -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalStatusIncomingCall.m_callToken=

  call-seq:
    m_callToken=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalStatusIncomingCall_m_callToken_set(int argc, VALUE *argv, VALUE self) {
  OpalStatusIncomingCall *arg1 = (OpalStatusIncomingCall *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusIncomingCall, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusIncomingCall *","m_callToken", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusIncomingCall * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_callToken", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_callToken = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_callToken = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalStatusIncomingCall_m_callToken_get(int argc, VALUE *argv, VALUE self) {
  OpalStatusIncomingCall *arg1 = (OpalStatusIncomingCall *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusIncomingCall, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusIncomingCall *","m_callToken", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusIncomingCall * >(argp1);
  result = (char *) ((arg1)->m_callToken);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalStatusIncomingCall.m_localAddress

  call-seq:
    m_localAddress -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalStatusIncomingCall.m_localAddress=

  call-seq:
    m_localAddress=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalStatusIncomingCall_m_localAddress_set(int argc, VALUE *argv, VALUE self) {
  OpalStatusIncomingCall *arg1 = (OpalStatusIncomingCall *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusIncomingCall, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusIncomingCall *","m_localAddress", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusIncomingCall * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_localAddress", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_localAddress = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_localAddress = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalStatusIncomingCall_m_localAddress_get(int argc, VALUE *argv, VALUE self) {
  OpalStatusIncomingCall *arg1 = (OpalStatusIncomingCall *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusIncomingCall, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusIncomingCall *","m_localAddress", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusIncomingCall * >(argp1);
  result = (char *) ((arg1)->m_localAddress);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalStatusIncomingCall.m_remoteAddress

  call-seq:
    m_remoteAddress -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalStatusIncomingCall.m_remoteAddress=

  call-seq:
    m_remoteAddress=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalStatusIncomingCall_m_remoteAddress_set(int argc, VALUE *argv, VALUE self) {
  OpalStatusIncomingCall *arg1 = (OpalStatusIncomingCall *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusIncomingCall, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusIncomingCall *","m_remoteAddress", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusIncomingCall * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_remoteAddress", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_remoteAddress = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_remoteAddress = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalStatusIncomingCall_m_remoteAddress_get(int argc, VALUE *argv, VALUE self) {
  OpalStatusIncomingCall *arg1 = (OpalStatusIncomingCall *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusIncomingCall, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusIncomingCall *","m_remoteAddress", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusIncomingCall * >(argp1);
  result = (char *) ((arg1)->m_remoteAddress);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalStatusIncomingCall.m_remotePartyNumber

  call-seq:
    m_remotePartyNumber -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalStatusIncomingCall.m_remotePartyNumber=

  call-seq:
    m_remotePartyNumber=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalStatusIncomingCall_m_remotePartyNumber_set(int argc, VALUE *argv, VALUE self) {
  OpalStatusIncomingCall *arg1 = (OpalStatusIncomingCall *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusIncomingCall, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusIncomingCall *","m_remotePartyNumber", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusIncomingCall * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_remotePartyNumber", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_remotePartyNumber = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_remotePartyNumber = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalStatusIncomingCall_m_remotePartyNumber_get(int argc, VALUE *argv, VALUE self) {
  OpalStatusIncomingCall *arg1 = (OpalStatusIncomingCall *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusIncomingCall, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusIncomingCall *","m_remotePartyNumber", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusIncomingCall * >(argp1);
  result = (char *) ((arg1)->m_remotePartyNumber);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalStatusIncomingCall.m_remoteDisplayName

  call-seq:
    m_remoteDisplayName -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalStatusIncomingCall.m_remoteDisplayName=

  call-seq:
    m_remoteDisplayName=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalStatusIncomingCall_m_remoteDisplayName_set(int argc, VALUE *argv, VALUE self) {
  OpalStatusIncomingCall *arg1 = (OpalStatusIncomingCall *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusIncomingCall, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusIncomingCall *","m_remoteDisplayName", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusIncomingCall * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_remoteDisplayName", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_remoteDisplayName = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_remoteDisplayName = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalStatusIncomingCall_m_remoteDisplayName_get(int argc, VALUE *argv, VALUE self) {
  OpalStatusIncomingCall *arg1 = (OpalStatusIncomingCall *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusIncomingCall, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusIncomingCall *","m_remoteDisplayName", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusIncomingCall * >(argp1);
  result = (char *) ((arg1)->m_remoteDisplayName);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalStatusIncomingCall.m_calledAddress

  call-seq:
    m_calledAddress -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalStatusIncomingCall.m_calledAddress=

  call-seq:
    m_calledAddress=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalStatusIncomingCall_m_calledAddress_set(int argc, VALUE *argv, VALUE self) {
  OpalStatusIncomingCall *arg1 = (OpalStatusIncomingCall *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusIncomingCall, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusIncomingCall *","m_calledAddress", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusIncomingCall * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_calledAddress", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_calledAddress = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_calledAddress = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalStatusIncomingCall_m_calledAddress_get(int argc, VALUE *argv, VALUE self) {
  OpalStatusIncomingCall *arg1 = (OpalStatusIncomingCall *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusIncomingCall, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusIncomingCall *","m_calledAddress", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusIncomingCall * >(argp1);
  result = (char *) ((arg1)->m_calledAddress);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalStatusIncomingCall.m_calledPartyNumber

  call-seq:
    m_calledPartyNumber -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalStatusIncomingCall.m_calledPartyNumber=

  call-seq:
    m_calledPartyNumber=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalStatusIncomingCall_m_calledPartyNumber_set(int argc, VALUE *argv, VALUE self) {
  OpalStatusIncomingCall *arg1 = (OpalStatusIncomingCall *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusIncomingCall, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusIncomingCall *","m_calledPartyNumber", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusIncomingCall * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_calledPartyNumber", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_calledPartyNumber = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_calledPartyNumber = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalStatusIncomingCall_m_calledPartyNumber_get(int argc, VALUE *argv, VALUE self) {
  OpalStatusIncomingCall *arg1 = (OpalStatusIncomingCall *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusIncomingCall, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusIncomingCall *","m_calledPartyNumber", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusIncomingCall * >(argp1);
  result = (char *) ((arg1)->m_calledPartyNumber);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalStatusIncomingCall.m_product

  call-seq:
    m_product -> OpalProductDescription

Get value of attribute.

*/

/*
  Document-method: Opal::OpalStatusIncomingCall.m_product=

  call-seq:
    m_product=(x) -> OpalProductDescription

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalStatusIncomingCall_m_product_set(int argc, VALUE *argv, VALUE self) {
  OpalStatusIncomingCall *arg1 = (OpalStatusIncomingCall *) 0 ;
  OpalProductDescription *arg2 = (OpalProductDescription *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusIncomingCall, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusIncomingCall *","m_product", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusIncomingCall * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_OpalProductDescription, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "OpalProductDescription *","m_product", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< OpalProductDescription * >(argp2);
  if (arg1) (arg1)->m_product = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalStatusIncomingCall_m_product_get(int argc, VALUE *argv, VALUE self) {
  OpalStatusIncomingCall *arg1 = (OpalStatusIncomingCall *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalProductDescription *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusIncomingCall, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusIncomingCall *","m_product", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusIncomingCall * >(argp1);
  result = (OpalProductDescription *)& ((arg1)->m_product);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpalProductDescription, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalStatusIncomingCall.m_alertingType

  call-seq:
    m_alertingType -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalStatusIncomingCall.m_alertingType=

  call-seq:
    m_alertingType=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalStatusIncomingCall_m_alertingType_set(int argc, VALUE *argv, VALUE self) {
  OpalStatusIncomingCall *arg1 = (OpalStatusIncomingCall *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusIncomingCall, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusIncomingCall *","m_alertingType", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusIncomingCall * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_alertingType", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_alertingType = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_alertingType = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalStatusIncomingCall_m_alertingType_get(int argc, VALUE *argv, VALUE self) {
  OpalStatusIncomingCall *arg1 = (OpalStatusIncomingCall *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusIncomingCall, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusIncomingCall *","m_alertingType", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusIncomingCall * >(argp1);
  result = (char *) ((arg1)->m_alertingType);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalStatusIncomingCall.m_protocolCallId

  call-seq:
    m_protocolCallId -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalStatusIncomingCall.m_protocolCallId=

  call-seq:
    m_protocolCallId=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalStatusIncomingCall_m_protocolCallId_set(int argc, VALUE *argv, VALUE self) {
  OpalStatusIncomingCall *arg1 = (OpalStatusIncomingCall *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusIncomingCall, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusIncomingCall *","m_protocolCallId", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusIncomingCall * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_protocolCallId", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_protocolCallId = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_protocolCallId = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalStatusIncomingCall_m_protocolCallId_get(int argc, VALUE *argv, VALUE self) {
  OpalStatusIncomingCall *arg1 = (OpalStatusIncomingCall *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusIncomingCall, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusIncomingCall *","m_protocolCallId", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusIncomingCall * >(argp1);
  result = (char *) ((arg1)->m_protocolCallId);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_OpalStatusIncomingCall_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_OpalStatusIncomingCall_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_OpalStatusIncomingCall);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: Opal::OpalStatusIncomingCall.new

  call-seq:
    OpalStatusIncomingCall.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_OpalStatusIncomingCall(int argc, VALUE *argv, VALUE self) {
  OpalStatusIncomingCall *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (OpalStatusIncomingCall *)new OpalStatusIncomingCall();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_OpalStatusIncomingCall(OpalStatusIncomingCall *arg1) {
    delete arg1;
}


/*
  Document-class: Opal::OpalStatusMediaStream

  Proxy of C++ Opal::OpalStatusMediaStream class


*/
swig_class SwigClassOpalStatusMediaStream;


/*
  Document-method: Opal::OpalStatusMediaStream.m_callToken

  call-seq:
    m_callToken -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalStatusMediaStream.m_callToken=

  call-seq:
    m_callToken=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalStatusMediaStream_m_callToken_set(int argc, VALUE *argv, VALUE self) {
  OpalStatusMediaStream *arg1 = (OpalStatusMediaStream *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusMediaStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusMediaStream *","m_callToken", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusMediaStream * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_callToken", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_callToken = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_callToken = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalStatusMediaStream_m_callToken_get(int argc, VALUE *argv, VALUE self) {
  OpalStatusMediaStream *arg1 = (OpalStatusMediaStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusMediaStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusMediaStream *","m_callToken", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusMediaStream * >(argp1);
  result = (char *) ((arg1)->m_callToken);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalStatusMediaStream.m_identifier

  call-seq:
    m_identifier -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalStatusMediaStream.m_identifier=

  call-seq:
    m_identifier=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalStatusMediaStream_m_identifier_set(int argc, VALUE *argv, VALUE self) {
  OpalStatusMediaStream *arg1 = (OpalStatusMediaStream *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusMediaStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusMediaStream *","m_identifier", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusMediaStream * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_identifier", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_identifier = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_identifier = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalStatusMediaStream_m_identifier_get(int argc, VALUE *argv, VALUE self) {
  OpalStatusMediaStream *arg1 = (OpalStatusMediaStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusMediaStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusMediaStream *","m_identifier", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusMediaStream * >(argp1);
  result = (char *) ((arg1)->m_identifier);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalStatusMediaStream.m_type

  call-seq:
    m_type -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalStatusMediaStream.m_type=

  call-seq:
    m_type=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalStatusMediaStream_m_type_set(int argc, VALUE *argv, VALUE self) {
  OpalStatusMediaStream *arg1 = (OpalStatusMediaStream *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusMediaStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusMediaStream *","m_type", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusMediaStream * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_type", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_type = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_type = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalStatusMediaStream_m_type_get(int argc, VALUE *argv, VALUE self) {
  OpalStatusMediaStream *arg1 = (OpalStatusMediaStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusMediaStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusMediaStream *","m_type", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusMediaStream * >(argp1);
  result = (char *) ((arg1)->m_type);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalStatusMediaStream.m_format

  call-seq:
    m_format -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalStatusMediaStream.m_format=

  call-seq:
    m_format=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalStatusMediaStream_m_format_set(int argc, VALUE *argv, VALUE self) {
  OpalStatusMediaStream *arg1 = (OpalStatusMediaStream *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusMediaStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusMediaStream *","m_format", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusMediaStream * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_format", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_format = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_format = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalStatusMediaStream_m_format_get(int argc, VALUE *argv, VALUE self) {
  OpalStatusMediaStream *arg1 = (OpalStatusMediaStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusMediaStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusMediaStream *","m_format", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusMediaStream * >(argp1);
  result = (char *) ((arg1)->m_format);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalStatusMediaStream.m_state

  call-seq:
    m_state -> int

Get value of attribute.

*/

/*
  Document-method: Opal::OpalStatusMediaStream.m_state=

  call-seq:
    m_state=(x) -> int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalStatusMediaStream_m_state_set(int argc, VALUE *argv, VALUE self) {
  OpalStatusMediaStream *arg1 = (OpalStatusMediaStream *) 0 ;
  OpalMediaStates arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusMediaStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusMediaStream *","m_state", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusMediaStream * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "OpalMediaStates","m_state", 2, argv[0] ));
  } 
  arg2 = static_cast< OpalMediaStates >(val2);
  if (arg1) (arg1)->m_state = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalStatusMediaStream_m_state_get(int argc, VALUE *argv, VALUE self) {
  OpalStatusMediaStream *arg1 = (OpalStatusMediaStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalMediaStates result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusMediaStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusMediaStream *","m_state", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusMediaStream * >(argp1);
  result = (OpalMediaStates) ((arg1)->m_state);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_OpalStatusMediaStream_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_OpalStatusMediaStream_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_OpalStatusMediaStream);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: Opal::OpalStatusMediaStream.new

  call-seq:
    OpalStatusMediaStream.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_OpalStatusMediaStream(int argc, VALUE *argv, VALUE self) {
  OpalStatusMediaStream *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (OpalStatusMediaStream *)new OpalStatusMediaStream();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_OpalStatusMediaStream(OpalStatusMediaStream *arg1) {
    delete arg1;
}


/*
  Document-class: Opal::OpalParamSetUserData

  Proxy of C++ Opal::OpalParamSetUserData class


*/
swig_class SwigClassOpalParamSetUserData;


/*
  Document-method: Opal::OpalParamSetUserData.m_callToken

  call-seq:
    m_callToken -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamSetUserData.m_callToken=

  call-seq:
    m_callToken=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamSetUserData_m_callToken_set(int argc, VALUE *argv, VALUE self) {
  OpalParamSetUserData *arg1 = (OpalParamSetUserData *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamSetUserData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamSetUserData *","m_callToken", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamSetUserData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_callToken", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_callToken = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_callToken = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamSetUserData_m_callToken_get(int argc, VALUE *argv, VALUE self) {
  OpalParamSetUserData *arg1 = (OpalParamSetUserData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamSetUserData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamSetUserData *","m_callToken", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamSetUserData * >(argp1);
  result = (char *) ((arg1)->m_callToken);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamSetUserData.m_userData

  call-seq:
    m_userData -> void

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamSetUserData.m_userData=

  call-seq:
    m_userData=(x) -> void

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamSetUserData_m_userData_set(int argc, VALUE *argv, VALUE self) {
  OpalParamSetUserData *arg1 = (OpalParamSetUserData *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamSetUserData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamSetUserData *","m_userData", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamSetUserData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "void *","m_userData", 2, argv[0] )); 
  }
  if (arg1) (arg1)->m_userData = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamSetUserData_m_userData_get(int argc, VALUE *argv, VALUE self) {
  OpalParamSetUserData *arg1 = (OpalParamSetUserData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamSetUserData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamSetUserData *","m_userData", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamSetUserData * >(argp1);
  result = (void *) ((arg1)->m_userData);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_OpalParamSetUserData_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_OpalParamSetUserData_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_OpalParamSetUserData);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: Opal::OpalParamSetUserData.new

  call-seq:
    OpalParamSetUserData.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_OpalParamSetUserData(int argc, VALUE *argv, VALUE self) {
  OpalParamSetUserData *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (OpalParamSetUserData *)new OpalParamSetUserData();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_OpalParamSetUserData(OpalParamSetUserData *arg1) {
    delete arg1;
}


/*
  Document-class: Opal::OpalStatusUserInput

  Proxy of C++ Opal::OpalStatusUserInput class


*/
swig_class SwigClassOpalStatusUserInput;


/*
  Document-method: Opal::OpalStatusUserInput.m_callToken

  call-seq:
    m_callToken -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalStatusUserInput.m_callToken=

  call-seq:
    m_callToken=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalStatusUserInput_m_callToken_set(int argc, VALUE *argv, VALUE self) {
  OpalStatusUserInput *arg1 = (OpalStatusUserInput *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusUserInput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusUserInput *","m_callToken", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusUserInput * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_callToken", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_callToken = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_callToken = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalStatusUserInput_m_callToken_get(int argc, VALUE *argv, VALUE self) {
  OpalStatusUserInput *arg1 = (OpalStatusUserInput *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusUserInput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusUserInput *","m_callToken", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusUserInput * >(argp1);
  result = (char *) ((arg1)->m_callToken);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalStatusUserInput.m_userInput

  call-seq:
    m_userInput -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalStatusUserInput.m_userInput=

  call-seq:
    m_userInput=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalStatusUserInput_m_userInput_set(int argc, VALUE *argv, VALUE self) {
  OpalStatusUserInput *arg1 = (OpalStatusUserInput *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusUserInput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusUserInput *","m_userInput", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusUserInput * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_userInput", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_userInput = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_userInput = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalStatusUserInput_m_userInput_get(int argc, VALUE *argv, VALUE self) {
  OpalStatusUserInput *arg1 = (OpalStatusUserInput *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusUserInput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusUserInput *","m_userInput", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusUserInput * >(argp1);
  result = (char *) ((arg1)->m_userInput);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalStatusUserInput.m_duration

  call-seq:
    m_duration -> unsigned int

Get value of attribute.

*/

/*
  Document-method: Opal::OpalStatusUserInput.m_duration=

  call-seq:
    m_duration=(x) -> unsigned int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalStatusUserInput_m_duration_set(int argc, VALUE *argv, VALUE self) {
  OpalStatusUserInput *arg1 = (OpalStatusUserInput *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusUserInput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusUserInput *","m_duration", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusUserInput * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","m_duration", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->m_duration = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalStatusUserInput_m_duration_get(int argc, VALUE *argv, VALUE self) {
  OpalStatusUserInput *arg1 = (OpalStatusUserInput *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusUserInput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusUserInput *","m_duration", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusUserInput * >(argp1);
  result = (unsigned int) ((arg1)->m_duration);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_OpalStatusUserInput_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_OpalStatusUserInput_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_OpalStatusUserInput);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: Opal::OpalStatusUserInput.new

  call-seq:
    OpalStatusUserInput.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_OpalStatusUserInput(int argc, VALUE *argv, VALUE self) {
  OpalStatusUserInput *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (OpalStatusUserInput *)new OpalStatusUserInput();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_OpalStatusUserInput(OpalStatusUserInput *arg1) {
    delete arg1;
}


/*
  Document-class: Opal::OpalStatusMessageWaiting

  Proxy of C++ Opal::OpalStatusMessageWaiting class


*/
swig_class SwigClassOpalStatusMessageWaiting;


/*
  Document-method: Opal::OpalStatusMessageWaiting.m_party

  call-seq:
    m_party -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalStatusMessageWaiting.m_party=

  call-seq:
    m_party=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalStatusMessageWaiting_m_party_set(int argc, VALUE *argv, VALUE self) {
  OpalStatusMessageWaiting *arg1 = (OpalStatusMessageWaiting *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusMessageWaiting, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusMessageWaiting *","m_party", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusMessageWaiting * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_party", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_party = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_party = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalStatusMessageWaiting_m_party_get(int argc, VALUE *argv, VALUE self) {
  OpalStatusMessageWaiting *arg1 = (OpalStatusMessageWaiting *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusMessageWaiting, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusMessageWaiting *","m_party", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusMessageWaiting * >(argp1);
  result = (char *) ((arg1)->m_party);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalStatusMessageWaiting.m_type

  call-seq:
    m_type -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalStatusMessageWaiting.m_type=

  call-seq:
    m_type=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalStatusMessageWaiting_m_type_set(int argc, VALUE *argv, VALUE self) {
  OpalStatusMessageWaiting *arg1 = (OpalStatusMessageWaiting *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusMessageWaiting, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusMessageWaiting *","m_type", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusMessageWaiting * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_type", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_type = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_type = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalStatusMessageWaiting_m_type_get(int argc, VALUE *argv, VALUE self) {
  OpalStatusMessageWaiting *arg1 = (OpalStatusMessageWaiting *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusMessageWaiting, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusMessageWaiting *","m_type", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusMessageWaiting * >(argp1);
  result = (char *) ((arg1)->m_type);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalStatusMessageWaiting.m_extraInfo

  call-seq:
    m_extraInfo -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalStatusMessageWaiting.m_extraInfo=

  call-seq:
    m_extraInfo=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalStatusMessageWaiting_m_extraInfo_set(int argc, VALUE *argv, VALUE self) {
  OpalStatusMessageWaiting *arg1 = (OpalStatusMessageWaiting *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusMessageWaiting, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusMessageWaiting *","m_extraInfo", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusMessageWaiting * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_extraInfo", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_extraInfo = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_extraInfo = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalStatusMessageWaiting_m_extraInfo_get(int argc, VALUE *argv, VALUE self) {
  OpalStatusMessageWaiting *arg1 = (OpalStatusMessageWaiting *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusMessageWaiting, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusMessageWaiting *","m_extraInfo", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusMessageWaiting * >(argp1);
  result = (char *) ((arg1)->m_extraInfo);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_OpalStatusMessageWaiting_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_OpalStatusMessageWaiting_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_OpalStatusMessageWaiting);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: Opal::OpalStatusMessageWaiting.new

  call-seq:
    OpalStatusMessageWaiting.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_OpalStatusMessageWaiting(int argc, VALUE *argv, VALUE self) {
  OpalStatusMessageWaiting *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (OpalStatusMessageWaiting *)new OpalStatusMessageWaiting();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_OpalStatusMessageWaiting(OpalStatusMessageWaiting *arg1) {
    delete arg1;
}


/*
  Document-class: Opal::OpalStatusLineAppearance

  Proxy of C++ Opal::OpalStatusLineAppearance class


*/
swig_class SwigClassOpalStatusLineAppearance;


/*
  Document-method: Opal::OpalStatusLineAppearance.m_line

  call-seq:
    m_line -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalStatusLineAppearance.m_line=

  call-seq:
    m_line=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalStatusLineAppearance_m_line_set(int argc, VALUE *argv, VALUE self) {
  OpalStatusLineAppearance *arg1 = (OpalStatusLineAppearance *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusLineAppearance, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusLineAppearance *","m_line", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusLineAppearance * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_line", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_line = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_line = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalStatusLineAppearance_m_line_get(int argc, VALUE *argv, VALUE self) {
  OpalStatusLineAppearance *arg1 = (OpalStatusLineAppearance *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusLineAppearance, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusLineAppearance *","m_line", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusLineAppearance * >(argp1);
  result = (char *) ((arg1)->m_line);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalStatusLineAppearance.m_state

  call-seq:
    m_state -> int

Get value of attribute.

*/

/*
  Document-method: Opal::OpalStatusLineAppearance.m_state=

  call-seq:
    m_state=(x) -> int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalStatusLineAppearance_m_state_set(int argc, VALUE *argv, VALUE self) {
  OpalStatusLineAppearance *arg1 = (OpalStatusLineAppearance *) 0 ;
  OpalLineAppearanceStates arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusLineAppearance, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusLineAppearance *","m_state", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusLineAppearance * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "OpalLineAppearanceStates","m_state", 2, argv[0] ));
  } 
  arg2 = static_cast< OpalLineAppearanceStates >(val2);
  if (arg1) (arg1)->m_state = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalStatusLineAppearance_m_state_get(int argc, VALUE *argv, VALUE self) {
  OpalStatusLineAppearance *arg1 = (OpalStatusLineAppearance *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalLineAppearanceStates result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusLineAppearance, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusLineAppearance *","m_state", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusLineAppearance * >(argp1);
  result = (OpalLineAppearanceStates) ((arg1)->m_state);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalStatusLineAppearance.m_appearance

  call-seq:
    m_appearance -> int

Get value of attribute.

*/

/*
  Document-method: Opal::OpalStatusLineAppearance.m_appearance=

  call-seq:
    m_appearance=(x) -> int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalStatusLineAppearance_m_appearance_set(int argc, VALUE *argv, VALUE self) {
  OpalStatusLineAppearance *arg1 = (OpalStatusLineAppearance *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusLineAppearance, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusLineAppearance *","m_appearance", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusLineAppearance * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","m_appearance", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_appearance = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalStatusLineAppearance_m_appearance_get(int argc, VALUE *argv, VALUE self) {
  OpalStatusLineAppearance *arg1 = (OpalStatusLineAppearance *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusLineAppearance, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusLineAppearance *","m_appearance", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusLineAppearance * >(argp1);
  result = (int) ((arg1)->m_appearance);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalStatusLineAppearance.m_callId

  call-seq:
    m_callId -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalStatusLineAppearance.m_callId=

  call-seq:
    m_callId=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalStatusLineAppearance_m_callId_set(int argc, VALUE *argv, VALUE self) {
  OpalStatusLineAppearance *arg1 = (OpalStatusLineAppearance *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusLineAppearance, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusLineAppearance *","m_callId", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusLineAppearance * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_callId", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_callId = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_callId = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalStatusLineAppearance_m_callId_get(int argc, VALUE *argv, VALUE self) {
  OpalStatusLineAppearance *arg1 = (OpalStatusLineAppearance *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusLineAppearance, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusLineAppearance *","m_callId", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusLineAppearance * >(argp1);
  result = (char *) ((arg1)->m_callId);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalStatusLineAppearance.m_partyA

  call-seq:
    m_partyA -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalStatusLineAppearance.m_partyA=

  call-seq:
    m_partyA=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalStatusLineAppearance_m_partyA_set(int argc, VALUE *argv, VALUE self) {
  OpalStatusLineAppearance *arg1 = (OpalStatusLineAppearance *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusLineAppearance, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusLineAppearance *","m_partyA", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusLineAppearance * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_partyA", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_partyA = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_partyA = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalStatusLineAppearance_m_partyA_get(int argc, VALUE *argv, VALUE self) {
  OpalStatusLineAppearance *arg1 = (OpalStatusLineAppearance *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusLineAppearance, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusLineAppearance *","m_partyA", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusLineAppearance * >(argp1);
  result = (char *) ((arg1)->m_partyA);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalStatusLineAppearance.m_partyB

  call-seq:
    m_partyB -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalStatusLineAppearance.m_partyB=

  call-seq:
    m_partyB=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalStatusLineAppearance_m_partyB_set(int argc, VALUE *argv, VALUE self) {
  OpalStatusLineAppearance *arg1 = (OpalStatusLineAppearance *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusLineAppearance, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusLineAppearance *","m_partyB", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusLineAppearance * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_partyB", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_partyB = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_partyB = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalStatusLineAppearance_m_partyB_get(int argc, VALUE *argv, VALUE self) {
  OpalStatusLineAppearance *arg1 = (OpalStatusLineAppearance *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusLineAppearance, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusLineAppearance *","m_partyB", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusLineAppearance * >(argp1);
  result = (char *) ((arg1)->m_partyB);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_OpalStatusLineAppearance_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_OpalStatusLineAppearance_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_OpalStatusLineAppearance);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: Opal::OpalStatusLineAppearance.new

  call-seq:
    OpalStatusLineAppearance.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_OpalStatusLineAppearance(int argc, VALUE *argv, VALUE self) {
  OpalStatusLineAppearance *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (OpalStatusLineAppearance *)new OpalStatusLineAppearance();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_OpalStatusLineAppearance(OpalStatusLineAppearance *arg1) {
    delete arg1;
}


/*
  Document-class: Opal::OpalParamRecording

  Proxy of C++ Opal::OpalParamRecording class


*/
swig_class SwigClassOpalParamRecording;


/*
  Document-method: Opal::OpalParamRecording.m_callToken

  call-seq:
    m_callToken -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamRecording.m_callToken=

  call-seq:
    m_callToken=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamRecording_m_callToken_set(int argc, VALUE *argv, VALUE self) {
  OpalParamRecording *arg1 = (OpalParamRecording *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamRecording, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamRecording *","m_callToken", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamRecording * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_callToken", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_callToken = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_callToken = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamRecording_m_callToken_get(int argc, VALUE *argv, VALUE self) {
  OpalParamRecording *arg1 = (OpalParamRecording *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamRecording, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamRecording *","m_callToken", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamRecording * >(argp1);
  result = (char *) ((arg1)->m_callToken);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamRecording.m_file

  call-seq:
    m_file -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamRecording.m_file=

  call-seq:
    m_file=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamRecording_m_file_set(int argc, VALUE *argv, VALUE self) {
  OpalParamRecording *arg1 = (OpalParamRecording *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamRecording, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamRecording *","m_file", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamRecording * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_file", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_file = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_file = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamRecording_m_file_get(int argc, VALUE *argv, VALUE self) {
  OpalParamRecording *arg1 = (OpalParamRecording *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamRecording, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamRecording *","m_file", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamRecording * >(argp1);
  result = (char *) ((arg1)->m_file);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamRecording.m_channels

  call-seq:
    m_channels -> unsigned int

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamRecording.m_channels=

  call-seq:
    m_channels=(x) -> unsigned int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamRecording_m_channels_set(int argc, VALUE *argv, VALUE self) {
  OpalParamRecording *arg1 = (OpalParamRecording *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamRecording, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamRecording *","m_channels", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamRecording * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","m_channels", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->m_channels = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamRecording_m_channels_get(int argc, VALUE *argv, VALUE self) {
  OpalParamRecording *arg1 = (OpalParamRecording *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamRecording, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamRecording *","m_channels", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamRecording * >(argp1);
  result = (unsigned int) ((arg1)->m_channels);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamRecording.m_audioFormat

  call-seq:
    m_audioFormat -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamRecording.m_audioFormat=

  call-seq:
    m_audioFormat=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamRecording_m_audioFormat_set(int argc, VALUE *argv, VALUE self) {
  OpalParamRecording *arg1 = (OpalParamRecording *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamRecording, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamRecording *","m_audioFormat", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamRecording * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_audioFormat", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_audioFormat = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_audioFormat = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamRecording_m_audioFormat_get(int argc, VALUE *argv, VALUE self) {
  OpalParamRecording *arg1 = (OpalParamRecording *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamRecording, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamRecording *","m_audioFormat", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamRecording * >(argp1);
  result = (char *) ((arg1)->m_audioFormat);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamRecording.m_videoFormat

  call-seq:
    m_videoFormat -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamRecording.m_videoFormat=

  call-seq:
    m_videoFormat=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamRecording_m_videoFormat_set(int argc, VALUE *argv, VALUE self) {
  OpalParamRecording *arg1 = (OpalParamRecording *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamRecording, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamRecording *","m_videoFormat", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamRecording * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_videoFormat", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_videoFormat = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_videoFormat = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamRecording_m_videoFormat_get(int argc, VALUE *argv, VALUE self) {
  OpalParamRecording *arg1 = (OpalParamRecording *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamRecording, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamRecording *","m_videoFormat", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamRecording * >(argp1);
  result = (char *) ((arg1)->m_videoFormat);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamRecording.m_videoWidth

  call-seq:
    m_videoWidth -> unsigned int

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamRecording.m_videoWidth=

  call-seq:
    m_videoWidth=(x) -> unsigned int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamRecording_m_videoWidth_set(int argc, VALUE *argv, VALUE self) {
  OpalParamRecording *arg1 = (OpalParamRecording *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamRecording, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamRecording *","m_videoWidth", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamRecording * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","m_videoWidth", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->m_videoWidth = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamRecording_m_videoWidth_get(int argc, VALUE *argv, VALUE self) {
  OpalParamRecording *arg1 = (OpalParamRecording *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamRecording, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamRecording *","m_videoWidth", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamRecording * >(argp1);
  result = (unsigned int) ((arg1)->m_videoWidth);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamRecording.m_videoHeight

  call-seq:
    m_videoHeight -> unsigned int

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamRecording.m_videoHeight=

  call-seq:
    m_videoHeight=(x) -> unsigned int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamRecording_m_videoHeight_set(int argc, VALUE *argv, VALUE self) {
  OpalParamRecording *arg1 = (OpalParamRecording *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamRecording, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamRecording *","m_videoHeight", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamRecording * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","m_videoHeight", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->m_videoHeight = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamRecording_m_videoHeight_get(int argc, VALUE *argv, VALUE self) {
  OpalParamRecording *arg1 = (OpalParamRecording *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamRecording, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamRecording *","m_videoHeight", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamRecording * >(argp1);
  result = (unsigned int) ((arg1)->m_videoHeight);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamRecording.m_videoRate

  call-seq:
    m_videoRate -> unsigned int

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamRecording.m_videoRate=

  call-seq:
    m_videoRate=(x) -> unsigned int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamRecording_m_videoRate_set(int argc, VALUE *argv, VALUE self) {
  OpalParamRecording *arg1 = (OpalParamRecording *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamRecording, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamRecording *","m_videoRate", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamRecording * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","m_videoRate", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->m_videoRate = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamRecording_m_videoRate_get(int argc, VALUE *argv, VALUE self) {
  OpalParamRecording *arg1 = (OpalParamRecording *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamRecording, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamRecording *","m_videoRate", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamRecording * >(argp1);
  result = (unsigned int) ((arg1)->m_videoRate);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamRecording.m_videoMixing

  call-seq:
    m_videoMixing -> int

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamRecording.m_videoMixing=

  call-seq:
    m_videoMixing=(x) -> int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamRecording_m_videoMixing_set(int argc, VALUE *argv, VALUE self) {
  OpalParamRecording *arg1 = (OpalParamRecording *) 0 ;
  OpalVideoRecordMixMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamRecording, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamRecording *","m_videoMixing", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamRecording * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "OpalVideoRecordMixMode","m_videoMixing", 2, argv[0] ));
  } 
  arg2 = static_cast< OpalVideoRecordMixMode >(val2);
  if (arg1) (arg1)->m_videoMixing = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamRecording_m_videoMixing_get(int argc, VALUE *argv, VALUE self) {
  OpalParamRecording *arg1 = (OpalParamRecording *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalVideoRecordMixMode result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamRecording, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamRecording *","m_videoMixing", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamRecording * >(argp1);
  result = (OpalVideoRecordMixMode) ((arg1)->m_videoMixing);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_OpalParamRecording_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_OpalParamRecording_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_OpalParamRecording);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: Opal::OpalParamRecording.new

  call-seq:
    OpalParamRecording.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_OpalParamRecording(int argc, VALUE *argv, VALUE self) {
  OpalParamRecording *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (OpalParamRecording *)new OpalParamRecording();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_OpalParamRecording(OpalParamRecording *arg1) {
    delete arg1;
}


/*
  Document-class: Opal::OpalStatusCallCleared

  Proxy of C++ Opal::OpalStatusCallCleared class


*/
swig_class SwigClassOpalStatusCallCleared;


/*
  Document-method: Opal::OpalStatusCallCleared.m_callToken

  call-seq:
    m_callToken -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalStatusCallCleared.m_callToken=

  call-seq:
    m_callToken=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalStatusCallCleared_m_callToken_set(int argc, VALUE *argv, VALUE self) {
  OpalStatusCallCleared *arg1 = (OpalStatusCallCleared *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusCallCleared, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusCallCleared *","m_callToken", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusCallCleared * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_callToken", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_callToken = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_callToken = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalStatusCallCleared_m_callToken_get(int argc, VALUE *argv, VALUE self) {
  OpalStatusCallCleared *arg1 = (OpalStatusCallCleared *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusCallCleared, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusCallCleared *","m_callToken", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusCallCleared * >(argp1);
  result = (char *) ((arg1)->m_callToken);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalStatusCallCleared.m_reason

  call-seq:
    m_reason -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalStatusCallCleared.m_reason=

  call-seq:
    m_reason=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalStatusCallCleared_m_reason_set(int argc, VALUE *argv, VALUE self) {
  OpalStatusCallCleared *arg1 = (OpalStatusCallCleared *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusCallCleared, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusCallCleared *","m_reason", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusCallCleared * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_reason", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_reason = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_reason = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalStatusCallCleared_m_reason_get(int argc, VALUE *argv, VALUE self) {
  OpalStatusCallCleared *arg1 = (OpalStatusCallCleared *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalStatusCallCleared, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalStatusCallCleared *","m_reason", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalStatusCallCleared * >(argp1);
  result = (char *) ((arg1)->m_reason);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_OpalStatusCallCleared_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_OpalStatusCallCleared_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_OpalStatusCallCleared);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: Opal::OpalStatusCallCleared.new

  call-seq:
    OpalStatusCallCleared.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_OpalStatusCallCleared(int argc, VALUE *argv, VALUE self) {
  OpalStatusCallCleared *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (OpalStatusCallCleared *)new OpalStatusCallCleared();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_OpalStatusCallCleared(OpalStatusCallCleared *arg1) {
    delete arg1;
}


/*
  Document-class: Opal::OpalParamCallCleared

  Proxy of C++ Opal::OpalParamCallCleared class


*/
swig_class SwigClassOpalParamCallCleared;


/*
  Document-method: Opal::OpalParamCallCleared.m_callToken

  call-seq:
    m_callToken -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamCallCleared.m_callToken=

  call-seq:
    m_callToken=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamCallCleared_m_callToken_set(int argc, VALUE *argv, VALUE self) {
  OpalParamCallCleared *arg1 = (OpalParamCallCleared *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamCallCleared, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamCallCleared *","m_callToken", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamCallCleared * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_callToken", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_callToken = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_callToken = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamCallCleared_m_callToken_get(int argc, VALUE *argv, VALUE self) {
  OpalParamCallCleared *arg1 = (OpalParamCallCleared *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamCallCleared, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamCallCleared *","m_callToken", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamCallCleared * >(argp1);
  result = (char *) ((arg1)->m_callToken);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalParamCallCleared.m_reason

  call-seq:
    m_reason -> int

Get value of attribute.

*/

/*
  Document-method: Opal::OpalParamCallCleared.m_reason=

  call-seq:
    m_reason=(x) -> int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalParamCallCleared_m_reason_set(int argc, VALUE *argv, VALUE self) {
  OpalParamCallCleared *arg1 = (OpalParamCallCleared *) 0 ;
  OpalCallEndReason arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamCallCleared, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamCallCleared *","m_reason", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamCallCleared * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "OpalCallEndReason","m_reason", 2, argv[0] ));
  } 
  arg2 = static_cast< OpalCallEndReason >(val2);
  if (arg1) (arg1)->m_reason = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalParamCallCleared_m_reason_get(int argc, VALUE *argv, VALUE self) {
  OpalParamCallCleared *arg1 = (OpalParamCallCleared *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalCallEndReason result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalParamCallCleared, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalParamCallCleared *","m_reason", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalParamCallCleared * >(argp1);
  result = (OpalCallEndReason) ((arg1)->m_reason);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_OpalParamCallCleared_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_OpalParamCallCleared_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_OpalParamCallCleared);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: Opal::OpalParamCallCleared.new

  call-seq:
    OpalParamCallCleared.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_OpalParamCallCleared(int argc, VALUE *argv, VALUE self) {
  OpalParamCallCleared *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (OpalParamCallCleared *)new OpalParamCallCleared();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_OpalParamCallCleared(OpalParamCallCleared *arg1) {
    delete arg1;
}


/*
  Document-class: Opal::OpalMessage

  Proxy of C++ Opal::OpalMessage class


*/
swig_class SwigClassOpalMessage;


/*
  Document-method: Opal::OpalMessage.m_type

  call-seq:
    m_type -> int

Get value of attribute.

*/

/*
  Document-method: Opal::OpalMessage.m_type=

  call-seq:
    m_type=(x) -> int

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalMessage_m_type_set(int argc, VALUE *argv, VALUE self) {
  OpalMessage *arg1 = (OpalMessage *) 0 ;
  OpalMessageType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessage *","m_type", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessage * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "OpalMessageType","m_type", 2, argv[0] ));
  } 
  arg2 = static_cast< OpalMessageType >(val2);
  if (arg1) (arg1)->m_type = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalMessage_m_type_get(int argc, VALUE *argv, VALUE self) {
  OpalMessage *arg1 = (OpalMessage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalMessageType result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessage *","m_type", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessage * >(argp1);
  result = (OpalMessageType) ((arg1)->m_type);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalMessage.m_param

  call-seq:
    m_param -> OpalMessage_m_param

Get value of attribute.

*/
SWIGINTERN VALUE
_wrap_OpalMessage_m_param_get(int argc, VALUE *argv, VALUE self) {
  OpalMessage *arg1 = (OpalMessage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalMessage_m_param *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessage *","m_param", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessage * >(argp1);
  result = (OpalMessage_m_param *)& ((arg1)->m_param);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpalMessage_m_param, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_OpalMessage_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_OpalMessage_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_OpalMessage);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: Opal::OpalMessage.new

  call-seq:
    OpalMessage.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_OpalMessage(int argc, VALUE *argv, VALUE self) {
  OpalMessage *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (OpalMessage *)new OpalMessage();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_OpalMessage(OpalMessage *arg1) {
    delete arg1;
}


/*
  Document-class: Opal::OpalMessage_m_param

  Proxy of C++ Opal::OpalMessage_m_param class


*/
swig_class SwigClassOpalMessage_m_param;


/*
  Document-method: Opal::OpalMessage_m_param.m_commandError

  call-seq:
    m_commandError -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalMessage_m_param.m_commandError=

  call-seq:
    m_commandError=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalMessage_m_param_m_commandError_set(int argc, VALUE *argv, VALUE self) {
  OpalMessage_m_param *arg1 = (OpalMessage_m_param *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessage_m_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessage_m_param *","m_commandError", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessage_m_param * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_commandError", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_commandError = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_commandError = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalMessage_m_param_m_commandError_get(int argc, VALUE *argv, VALUE self) {
  OpalMessage_m_param *arg1 = (OpalMessage_m_param *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessage_m_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessage_m_param *","m_commandError", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessage_m_param * >(argp1);
  result = (char *) ((arg1)->m_commandError);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalMessage_m_param.m_general

  call-seq:
    m_general -> OpalParamGeneral

Get value of attribute.

*/

/*
  Document-method: Opal::OpalMessage_m_param.m_general=

  call-seq:
    m_general=(x) -> OpalParamGeneral

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalMessage_m_param_m_general_set(int argc, VALUE *argv, VALUE self) {
  OpalMessage_m_param *arg1 = (OpalMessage_m_param *) 0 ;
  OpalParamGeneral *arg2 = (OpalParamGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessage_m_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessage_m_param *","m_general", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessage_m_param * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "OpalParamGeneral *","m_general", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< OpalParamGeneral * >(argp2);
  if (arg1) (arg1)->m_general = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalMessage_m_param_m_general_get(int argc, VALUE *argv, VALUE self) {
  OpalMessage_m_param *arg1 = (OpalMessage_m_param *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalParamGeneral *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessage_m_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessage_m_param *","m_general", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessage_m_param * >(argp1);
  result = (OpalParamGeneral *)& ((arg1)->m_general);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalMessage_m_param.m_protocol

  call-seq:
    m_protocol -> OpalParamProtocol

Get value of attribute.

*/

/*
  Document-method: Opal::OpalMessage_m_param.m_protocol=

  call-seq:
    m_protocol=(x) -> OpalParamProtocol

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalMessage_m_param_m_protocol_set(int argc, VALUE *argv, VALUE self) {
  OpalMessage_m_param *arg1 = (OpalMessage_m_param *) 0 ;
  OpalParamProtocol *arg2 = (OpalParamProtocol *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessage_m_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessage_m_param *","m_protocol", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessage_m_param * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_OpalParamProtocol, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "OpalParamProtocol *","m_protocol", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< OpalParamProtocol * >(argp2);
  if (arg1) (arg1)->m_protocol = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalMessage_m_param_m_protocol_get(int argc, VALUE *argv, VALUE self) {
  OpalMessage_m_param *arg1 = (OpalMessage_m_param *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalParamProtocol *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessage_m_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessage_m_param *","m_protocol", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessage_m_param * >(argp1);
  result = (OpalParamProtocol *)& ((arg1)->m_protocol);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpalParamProtocol, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalMessage_m_param.m_registrationInfo

  call-seq:
    m_registrationInfo -> OpalParamRegistration

Get value of attribute.

*/

/*
  Document-method: Opal::OpalMessage_m_param.m_registrationInfo=

  call-seq:
    m_registrationInfo=(x) -> OpalParamRegistration

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalMessage_m_param_m_registrationInfo_set(int argc, VALUE *argv, VALUE self) {
  OpalMessage_m_param *arg1 = (OpalMessage_m_param *) 0 ;
  OpalParamRegistration *arg2 = (OpalParamRegistration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessage_m_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessage_m_param *","m_registrationInfo", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessage_m_param * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_OpalParamRegistration, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "OpalParamRegistration *","m_registrationInfo", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< OpalParamRegistration * >(argp2);
  if (arg1) (arg1)->m_registrationInfo = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalMessage_m_param_m_registrationInfo_get(int argc, VALUE *argv, VALUE self) {
  OpalMessage_m_param *arg1 = (OpalMessage_m_param *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalParamRegistration *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessage_m_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessage_m_param *","m_registrationInfo", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessage_m_param * >(argp1);
  result = (OpalParamRegistration *)& ((arg1)->m_registrationInfo);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpalParamRegistration, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalMessage_m_param.m_registrationStatus

  call-seq:
    m_registrationStatus -> OpalStatusRegistration

Get value of attribute.

*/

/*
  Document-method: Opal::OpalMessage_m_param.m_registrationStatus=

  call-seq:
    m_registrationStatus=(x) -> OpalStatusRegistration

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalMessage_m_param_m_registrationStatus_set(int argc, VALUE *argv, VALUE self) {
  OpalMessage_m_param *arg1 = (OpalMessage_m_param *) 0 ;
  OpalStatusRegistration *arg2 = (OpalStatusRegistration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessage_m_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessage_m_param *","m_registrationStatus", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessage_m_param * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_OpalStatusRegistration, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "OpalStatusRegistration *","m_registrationStatus", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< OpalStatusRegistration * >(argp2);
  if (arg1) (arg1)->m_registrationStatus = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalMessage_m_param_m_registrationStatus_get(int argc, VALUE *argv, VALUE self) {
  OpalMessage_m_param *arg1 = (OpalMessage_m_param *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalStatusRegistration *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessage_m_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessage_m_param *","m_registrationStatus", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessage_m_param * >(argp1);
  result = (OpalStatusRegistration *)& ((arg1)->m_registrationStatus);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpalStatusRegistration, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalMessage_m_param.m_callSetUp

  call-seq:
    m_callSetUp -> OpalParamSetUpCall

Get value of attribute.

*/

/*
  Document-method: Opal::OpalMessage_m_param.m_callSetUp=

  call-seq:
    m_callSetUp=(x) -> OpalParamSetUpCall

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalMessage_m_param_m_callSetUp_set(int argc, VALUE *argv, VALUE self) {
  OpalMessage_m_param *arg1 = (OpalMessage_m_param *) 0 ;
  OpalParamSetUpCall *arg2 = (OpalParamSetUpCall *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessage_m_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessage_m_param *","m_callSetUp", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessage_m_param * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_OpalParamSetUpCall, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "OpalParamSetUpCall *","m_callSetUp", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< OpalParamSetUpCall * >(argp2);
  if (arg1) (arg1)->m_callSetUp = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalMessage_m_param_m_callSetUp_get(int argc, VALUE *argv, VALUE self) {
  OpalMessage_m_param *arg1 = (OpalMessage_m_param *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalParamSetUpCall *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessage_m_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessage_m_param *","m_callSetUp", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessage_m_param * >(argp1);
  result = (OpalParamSetUpCall *)& ((arg1)->m_callSetUp);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpalParamSetUpCall, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalMessage_m_param.m_callToken

  call-seq:
    m_callToken -> char

Get value of attribute.

*/

/*
  Document-method: Opal::OpalMessage_m_param.m_callToken=

  call-seq:
    m_callToken=(x) -> char

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalMessage_m_param_m_callToken_set(int argc, VALUE *argv, VALUE self) {
  OpalMessage_m_param *arg1 = (OpalMessage_m_param *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessage_m_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessage_m_param *","m_callToken", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessage_m_param * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","m_callToken", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->m_callToken = (char const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->m_callToken = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalMessage_m_param_m_callToken_get(int argc, VALUE *argv, VALUE self) {
  OpalMessage_m_param *arg1 = (OpalMessage_m_param *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessage_m_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessage_m_param *","m_callToken", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessage_m_param * >(argp1);
  result = (char *) ((arg1)->m_callToken);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalMessage_m_param.m_incomingCall

  call-seq:
    m_incomingCall -> OpalStatusIncomingCall

Get value of attribute.

*/

/*
  Document-method: Opal::OpalMessage_m_param.m_incomingCall=

  call-seq:
    m_incomingCall=(x) -> OpalStatusIncomingCall

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalMessage_m_param_m_incomingCall_set(int argc, VALUE *argv, VALUE self) {
  OpalMessage_m_param *arg1 = (OpalMessage_m_param *) 0 ;
  OpalStatusIncomingCall *arg2 = (OpalStatusIncomingCall *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessage_m_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessage_m_param *","m_incomingCall", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessage_m_param * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_OpalStatusIncomingCall, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "OpalStatusIncomingCall *","m_incomingCall", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< OpalStatusIncomingCall * >(argp2);
  if (arg1) (arg1)->m_incomingCall = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalMessage_m_param_m_incomingCall_get(int argc, VALUE *argv, VALUE self) {
  OpalMessage_m_param *arg1 = (OpalMessage_m_param *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalStatusIncomingCall *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessage_m_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessage_m_param *","m_incomingCall", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessage_m_param * >(argp1);
  result = (OpalStatusIncomingCall *)& ((arg1)->m_incomingCall);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpalStatusIncomingCall, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalMessage_m_param.m_userInput

  call-seq:
    m_userInput -> OpalStatusUserInput

Get value of attribute.

*/

/*
  Document-method: Opal::OpalMessage_m_param.m_userInput=

  call-seq:
    m_userInput=(x) -> OpalStatusUserInput

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalMessage_m_param_m_userInput_set(int argc, VALUE *argv, VALUE self) {
  OpalMessage_m_param *arg1 = (OpalMessage_m_param *) 0 ;
  OpalStatusUserInput *arg2 = (OpalStatusUserInput *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessage_m_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessage_m_param *","m_userInput", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessage_m_param * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_OpalStatusUserInput, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "OpalStatusUserInput *","m_userInput", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< OpalStatusUserInput * >(argp2);
  if (arg1) (arg1)->m_userInput = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalMessage_m_param_m_userInput_get(int argc, VALUE *argv, VALUE self) {
  OpalMessage_m_param *arg1 = (OpalMessage_m_param *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalStatusUserInput *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessage_m_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessage_m_param *","m_userInput", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessage_m_param * >(argp1);
  result = (OpalStatusUserInput *)& ((arg1)->m_userInput);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpalStatusUserInput, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalMessage_m_param.m_messageWaiting

  call-seq:
    m_messageWaiting -> OpalStatusMessageWaiting

Get value of attribute.

*/

/*
  Document-method: Opal::OpalMessage_m_param.m_messageWaiting=

  call-seq:
    m_messageWaiting=(x) -> OpalStatusMessageWaiting

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalMessage_m_param_m_messageWaiting_set(int argc, VALUE *argv, VALUE self) {
  OpalMessage_m_param *arg1 = (OpalMessage_m_param *) 0 ;
  OpalStatusMessageWaiting *arg2 = (OpalStatusMessageWaiting *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessage_m_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessage_m_param *","m_messageWaiting", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessage_m_param * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_OpalStatusMessageWaiting, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "OpalStatusMessageWaiting *","m_messageWaiting", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< OpalStatusMessageWaiting * >(argp2);
  if (arg1) (arg1)->m_messageWaiting = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalMessage_m_param_m_messageWaiting_get(int argc, VALUE *argv, VALUE self) {
  OpalMessage_m_param *arg1 = (OpalMessage_m_param *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalStatusMessageWaiting *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessage_m_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessage_m_param *","m_messageWaiting", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessage_m_param * >(argp1);
  result = (OpalStatusMessageWaiting *)& ((arg1)->m_messageWaiting);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpalStatusMessageWaiting, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalMessage_m_param.m_lineAppearance

  call-seq:
    m_lineAppearance -> OpalStatusLineAppearance

Get value of attribute.

*/

/*
  Document-method: Opal::OpalMessage_m_param.m_lineAppearance=

  call-seq:
    m_lineAppearance=(x) -> OpalStatusLineAppearance

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalMessage_m_param_m_lineAppearance_set(int argc, VALUE *argv, VALUE self) {
  OpalMessage_m_param *arg1 = (OpalMessage_m_param *) 0 ;
  OpalStatusLineAppearance *arg2 = (OpalStatusLineAppearance *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessage_m_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessage_m_param *","m_lineAppearance", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessage_m_param * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_OpalStatusLineAppearance, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "OpalStatusLineAppearance *","m_lineAppearance", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< OpalStatusLineAppearance * >(argp2);
  if (arg1) (arg1)->m_lineAppearance = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalMessage_m_param_m_lineAppearance_get(int argc, VALUE *argv, VALUE self) {
  OpalMessage_m_param *arg1 = (OpalMessage_m_param *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalStatusLineAppearance *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessage_m_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessage_m_param *","m_lineAppearance", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessage_m_param * >(argp1);
  result = (OpalStatusLineAppearance *)& ((arg1)->m_lineAppearance);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpalStatusLineAppearance, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalMessage_m_param.m_callCleared

  call-seq:
    m_callCleared -> OpalStatusCallCleared

Get value of attribute.

*/

/*
  Document-method: Opal::OpalMessage_m_param.m_callCleared=

  call-seq:
    m_callCleared=(x) -> OpalStatusCallCleared

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalMessage_m_param_m_callCleared_set(int argc, VALUE *argv, VALUE self) {
  OpalMessage_m_param *arg1 = (OpalMessage_m_param *) 0 ;
  OpalStatusCallCleared *arg2 = (OpalStatusCallCleared *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessage_m_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessage_m_param *","m_callCleared", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessage_m_param * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_OpalStatusCallCleared, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "OpalStatusCallCleared *","m_callCleared", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< OpalStatusCallCleared * >(argp2);
  if (arg1) (arg1)->m_callCleared = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalMessage_m_param_m_callCleared_get(int argc, VALUE *argv, VALUE self) {
  OpalMessage_m_param *arg1 = (OpalMessage_m_param *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalStatusCallCleared *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessage_m_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessage_m_param *","m_callCleared", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessage_m_param * >(argp1);
  result = (OpalStatusCallCleared *)& ((arg1)->m_callCleared);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpalStatusCallCleared, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalMessage_m_param.m_clearCall

  call-seq:
    m_clearCall -> OpalParamCallCleared

Get value of attribute.

*/

/*
  Document-method: Opal::OpalMessage_m_param.m_clearCall=

  call-seq:
    m_clearCall=(x) -> OpalParamCallCleared

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalMessage_m_param_m_clearCall_set(int argc, VALUE *argv, VALUE self) {
  OpalMessage_m_param *arg1 = (OpalMessage_m_param *) 0 ;
  OpalParamCallCleared *arg2 = (OpalParamCallCleared *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessage_m_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessage_m_param *","m_clearCall", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessage_m_param * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_OpalParamCallCleared, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "OpalParamCallCleared *","m_clearCall", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< OpalParamCallCleared * >(argp2);
  if (arg1) (arg1)->m_clearCall = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalMessage_m_param_m_clearCall_get(int argc, VALUE *argv, VALUE self) {
  OpalMessage_m_param *arg1 = (OpalMessage_m_param *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalParamCallCleared *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessage_m_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessage_m_param *","m_clearCall", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessage_m_param * >(argp1);
  result = (OpalParamCallCleared *)& ((arg1)->m_clearCall);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpalParamCallCleared, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalMessage_m_param.m_mediaStream

  call-seq:
    m_mediaStream -> OpalStatusMediaStream

Get value of attribute.

*/

/*
  Document-method: Opal::OpalMessage_m_param.m_mediaStream=

  call-seq:
    m_mediaStream=(x) -> OpalStatusMediaStream

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalMessage_m_param_m_mediaStream_set(int argc, VALUE *argv, VALUE self) {
  OpalMessage_m_param *arg1 = (OpalMessage_m_param *) 0 ;
  OpalStatusMediaStream *arg2 = (OpalStatusMediaStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessage_m_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessage_m_param *","m_mediaStream", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessage_m_param * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_OpalStatusMediaStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "OpalStatusMediaStream *","m_mediaStream", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< OpalStatusMediaStream * >(argp2);
  if (arg1) (arg1)->m_mediaStream = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalMessage_m_param_m_mediaStream_get(int argc, VALUE *argv, VALUE self) {
  OpalMessage_m_param *arg1 = (OpalMessage_m_param *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalStatusMediaStream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessage_m_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessage_m_param *","m_mediaStream", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessage_m_param * >(argp1);
  result = (OpalStatusMediaStream *)& ((arg1)->m_mediaStream);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpalStatusMediaStream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalMessage_m_param.m_setUserData

  call-seq:
    m_setUserData -> OpalParamSetUserData

Get value of attribute.

*/

/*
  Document-method: Opal::OpalMessage_m_param.m_setUserData=

  call-seq:
    m_setUserData=(x) -> OpalParamSetUserData

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalMessage_m_param_m_setUserData_set(int argc, VALUE *argv, VALUE self) {
  OpalMessage_m_param *arg1 = (OpalMessage_m_param *) 0 ;
  OpalParamSetUserData *arg2 = (OpalParamSetUserData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessage_m_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessage_m_param *","m_setUserData", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessage_m_param * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_OpalParamSetUserData, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "OpalParamSetUserData *","m_setUserData", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< OpalParamSetUserData * >(argp2);
  if (arg1) (arg1)->m_setUserData = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalMessage_m_param_m_setUserData_get(int argc, VALUE *argv, VALUE self) {
  OpalMessage_m_param *arg1 = (OpalMessage_m_param *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalParamSetUserData *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessage_m_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessage_m_param *","m_setUserData", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessage_m_param * >(argp1);
  result = (OpalParamSetUserData *)& ((arg1)->m_setUserData);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpalParamSetUserData, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalMessage_m_param.m_recording

  call-seq:
    m_recording -> OpalParamRecording

Get value of attribute.

*/

/*
  Document-method: Opal::OpalMessage_m_param.m_recording=

  call-seq:
    m_recording=(x) -> OpalParamRecording

Set new value for attribute.

*/
SWIGINTERN VALUE
_wrap_OpalMessage_m_param_m_recording_set(int argc, VALUE *argv, VALUE self) {
  OpalMessage_m_param *arg1 = (OpalMessage_m_param *) 0 ;
  OpalParamRecording *arg2 = (OpalParamRecording *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessage_m_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessage_m_param *","m_recording", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessage_m_param * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_OpalParamRecording, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "OpalParamRecording *","m_recording", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< OpalParamRecording * >(argp2);
  if (arg1) (arg1)->m_recording = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalMessage_m_param_m_recording_get(int argc, VALUE *argv, VALUE self) {
  OpalMessage_m_param *arg1 = (OpalMessage_m_param *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalParamRecording *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessage_m_param, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessage_m_param *","m_recording", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessage_m_param * >(argp1);
  result = (OpalParamRecording *)& ((arg1)->m_recording);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpalParamRecording, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_OpalMessage_m_param_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_OpalMessage_m_param_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_OpalMessage_m_param);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: Opal::OpalMessage_m_param.new

  call-seq:
    OpalMessage_m_param.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_OpalMessage_m_param(int argc, VALUE *argv, VALUE self) {
  OpalMessage_m_param *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (OpalMessage_m_param *)new OpalMessage_m_param();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_OpalMessage_m_param(OpalMessage_m_param *arg1) {
    delete arg1;
}


/*
  Document-class: Opal::OpalMessagePtr

  Proxy of C++ Opal::OpalMessagePtr class


*/
swig_class SwigClassOpalMessagePtr;


/*
  Document-method: Opal::OpalMessagePtr.new

  call-seq:
    OpalMessagePtr.new(OpalMessageType type=OpalIndCommandError)
    OpalMessagePtr.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_OpalMessagePtr__SWIG_0(int argc, VALUE *argv, VALUE self) {
  OpalMessageType arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  OpalMessagePtr *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "OpalMessageType","OpalMessagePtr", 1, argv[0] ));
  } 
  arg1 = static_cast< OpalMessageType >(val1);
  result = (OpalMessagePtr *)new OpalMessagePtr(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_OpalMessagePtr_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_OpalMessagePtr_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_OpalMessagePtr);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_OpalMessagePtr__SWIG_1(int argc, VALUE *argv, VALUE self) {
  OpalMessagePtr *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (OpalMessagePtr *)new OpalMessagePtr();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_OpalMessagePtr(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_OpalMessagePtr__SWIG_1(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_OpalMessagePtr__SWIG_0(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "OpalMessagePtr.new", 
    "    OpalMessagePtr.new(OpalMessageType type)\n"
    "    OpalMessagePtr.new()\n");
  
  return Qnil;
}


SWIGINTERN void
free_OpalMessagePtr(OpalMessagePtr *arg1) {
    delete arg1;
}


/*
  Document-method: Opal::OpalMessagePtr.GetType

  call-seq:
    GetType -> int

An instance method.

*/
SWIGINTERN VALUE
_wrap_OpalMessagePtr_GetType(int argc, VALUE *argv, VALUE self) {
  OpalMessagePtr *arg1 = (OpalMessagePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalMessageType result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessagePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessagePtr const *","GetType", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessagePtr * >(argp1);
  result = (OpalMessageType)((OpalMessagePtr const *)arg1)->GetType();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalMessagePtr.SetType

  call-seq:
    SetType(OpalMessageType type)

An instance method.

*/
SWIGINTERN VALUE
_wrap_OpalMessagePtr_SetType(int argc, VALUE *argv, VALUE self) {
  OpalMessagePtr *arg1 = (OpalMessagePtr *) 0 ;
  OpalMessageType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessagePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessagePtr *","SetType", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessagePtr * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "OpalMessageType","SetType", 2, argv[0] ));
  } 
  arg2 = static_cast< OpalMessageType >(val2);
  (arg1)->SetType(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalMessagePtr.GetCallToken

  call-seq:
    GetCallToken -> char

An instance method.

*/
SWIGINTERN VALUE
_wrap_OpalMessagePtr_GetCallToken(int argc, VALUE *argv, VALUE self) {
  OpalMessagePtr *arg1 = (OpalMessagePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessagePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessagePtr const *","GetCallToken", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessagePtr * >(argp1);
  result = (char *)((OpalMessagePtr const *)arg1)->GetCallToken();
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalMessagePtr.SetCallToken

  call-seq:
    SetCallToken(char token)

An instance method.

*/
SWIGINTERN VALUE
_wrap_OpalMessagePtr_SetCallToken(int argc, VALUE *argv, VALUE self) {
  OpalMessagePtr *arg1 = (OpalMessagePtr *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessagePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessagePtr *","SetCallToken", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessagePtr * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","SetCallToken", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->SetCallToken((char const *)arg2);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}



/*
  Document-method: Opal::OpalMessagePtr.GetCommandError

  call-seq:
    GetCommandError -> char

An instance method.

*/
SWIGINTERN VALUE
_wrap_OpalMessagePtr_GetCommandError(int argc, VALUE *argv, VALUE self) {
  OpalMessagePtr *arg1 = (OpalMessagePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessagePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessagePtr const *","GetCommandError", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessagePtr * >(argp1);
  result = (char *)((OpalMessagePtr const *)arg1)->GetCommandError();
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalMessagePtr.GetGeneralParams

  call-seq:
    GetGeneralParams -> OpalParamGeneral

An instance method.

*/
SWIGINTERN VALUE
_wrap_OpalMessagePtr_GetGeneralParams(int argc, VALUE *argv, VALUE self) {
  OpalMessagePtr *arg1 = (OpalMessagePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalParamGeneral *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessagePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessagePtr const *","GetGeneralParams", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessagePtr * >(argp1);
  result = (OpalParamGeneral *)((OpalMessagePtr const *)arg1)->GetGeneralParams();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpalParamGeneral, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalMessagePtr.GetProtocolParams

  call-seq:
    GetProtocolParams -> OpalParamProtocol

An instance method.

*/
SWIGINTERN VALUE
_wrap_OpalMessagePtr_GetProtocolParams(int argc, VALUE *argv, VALUE self) {
  OpalMessagePtr *arg1 = (OpalMessagePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalParamProtocol *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessagePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessagePtr const *","GetProtocolParams", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessagePtr * >(argp1);
  result = (OpalParamProtocol *)((OpalMessagePtr const *)arg1)->GetProtocolParams();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpalParamProtocol, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalMessagePtr.GetRegistrationInfo

  call-seq:
    GetRegistrationInfo -> OpalParamRegistration

An instance method.

*/
SWIGINTERN VALUE
_wrap_OpalMessagePtr_GetRegistrationInfo(int argc, VALUE *argv, VALUE self) {
  OpalMessagePtr *arg1 = (OpalMessagePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalParamRegistration *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessagePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessagePtr const *","GetRegistrationInfo", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessagePtr * >(argp1);
  result = (OpalParamRegistration *)((OpalMessagePtr const *)arg1)->GetRegistrationInfo();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpalParamRegistration, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalMessagePtr.GetRegistrationStatus

  call-seq:
    GetRegistrationStatus -> OpalStatusRegistration

An instance method.

*/
SWIGINTERN VALUE
_wrap_OpalMessagePtr_GetRegistrationStatus(int argc, VALUE *argv, VALUE self) {
  OpalMessagePtr *arg1 = (OpalMessagePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalStatusRegistration *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessagePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessagePtr const *","GetRegistrationStatus", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessagePtr * >(argp1);
  result = (OpalStatusRegistration *)((OpalMessagePtr const *)arg1)->GetRegistrationStatus();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpalStatusRegistration, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalMessagePtr.GetCallSetUp

  call-seq:
    GetCallSetUp -> OpalParamSetUpCall

An instance method.

*/
SWIGINTERN VALUE
_wrap_OpalMessagePtr_GetCallSetUp(int argc, VALUE *argv, VALUE self) {
  OpalMessagePtr *arg1 = (OpalMessagePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalParamSetUpCall *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessagePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessagePtr const *","GetCallSetUp", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessagePtr * >(argp1);
  result = (OpalParamSetUpCall *)((OpalMessagePtr const *)arg1)->GetCallSetUp();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpalParamSetUpCall, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalMessagePtr.GetIncomingCall

  call-seq:
    GetIncomingCall -> OpalStatusIncomingCall

An instance method.

*/
SWIGINTERN VALUE
_wrap_OpalMessagePtr_GetIncomingCall(int argc, VALUE *argv, VALUE self) {
  OpalMessagePtr *arg1 = (OpalMessagePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalStatusIncomingCall *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessagePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessagePtr const *","GetIncomingCall", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessagePtr * >(argp1);
  result = (OpalStatusIncomingCall *)((OpalMessagePtr const *)arg1)->GetIncomingCall();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpalStatusIncomingCall, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalMessagePtr.GetUserInput

  call-seq:
    GetUserInput -> OpalStatusUserInput

An instance method.

*/
SWIGINTERN VALUE
_wrap_OpalMessagePtr_GetUserInput(int argc, VALUE *argv, VALUE self) {
  OpalMessagePtr *arg1 = (OpalMessagePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalStatusUserInput *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessagePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessagePtr const *","GetUserInput", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessagePtr * >(argp1);
  result = (OpalStatusUserInput *)((OpalMessagePtr const *)arg1)->GetUserInput();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpalStatusUserInput, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalMessagePtr.GetMessageWaiting

  call-seq:
    GetMessageWaiting -> OpalStatusMessageWaiting

An instance method.

*/
SWIGINTERN VALUE
_wrap_OpalMessagePtr_GetMessageWaiting(int argc, VALUE *argv, VALUE self) {
  OpalMessagePtr *arg1 = (OpalMessagePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalStatusMessageWaiting *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessagePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessagePtr const *","GetMessageWaiting", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessagePtr * >(argp1);
  result = (OpalStatusMessageWaiting *)((OpalMessagePtr const *)arg1)->GetMessageWaiting();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpalStatusMessageWaiting, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalMessagePtr.GetLineAppearance

  call-seq:
    GetLineAppearance -> OpalStatusLineAppearance

An instance method.

*/
SWIGINTERN VALUE
_wrap_OpalMessagePtr_GetLineAppearance(int argc, VALUE *argv, VALUE self) {
  OpalMessagePtr *arg1 = (OpalMessagePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalStatusLineAppearance *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessagePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessagePtr const *","GetLineAppearance", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessagePtr * >(argp1);
  result = (OpalStatusLineAppearance *)((OpalMessagePtr const *)arg1)->GetLineAppearance();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpalStatusLineAppearance, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalMessagePtr.GetCallCleared

  call-seq:
    GetCallCleared -> OpalStatusCallCleared

An instance method.

*/
SWIGINTERN VALUE
_wrap_OpalMessagePtr_GetCallCleared(int argc, VALUE *argv, VALUE self) {
  OpalMessagePtr *arg1 = (OpalMessagePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalStatusCallCleared *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessagePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessagePtr const *","GetCallCleared", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessagePtr * >(argp1);
  result = (OpalStatusCallCleared *)((OpalMessagePtr const *)arg1)->GetCallCleared();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpalStatusCallCleared, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalMessagePtr.GetClearCall

  call-seq:
    GetClearCall -> OpalParamCallCleared

An instance method.

*/
SWIGINTERN VALUE
_wrap_OpalMessagePtr_GetClearCall(int argc, VALUE *argv, VALUE self) {
  OpalMessagePtr *arg1 = (OpalMessagePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalParamCallCleared *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessagePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessagePtr const *","GetClearCall", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessagePtr * >(argp1);
  result = (OpalParamCallCleared *)((OpalMessagePtr const *)arg1)->GetClearCall();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpalParamCallCleared, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalMessagePtr.GetMediaStream

  call-seq:
    GetMediaStream -> OpalStatusMediaStream

An instance method.

*/
SWIGINTERN VALUE
_wrap_OpalMessagePtr_GetMediaStream(int argc, VALUE *argv, VALUE self) {
  OpalMessagePtr *arg1 = (OpalMessagePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalStatusMediaStream *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessagePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessagePtr const *","GetMediaStream", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessagePtr * >(argp1);
  result = (OpalStatusMediaStream *)((OpalMessagePtr const *)arg1)->GetMediaStream();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpalStatusMediaStream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalMessagePtr.GetSetUserData

  call-seq:
    GetSetUserData -> OpalParamSetUserData

An instance method.

*/
SWIGINTERN VALUE
_wrap_OpalMessagePtr_GetSetUserData(int argc, VALUE *argv, VALUE self) {
  OpalMessagePtr *arg1 = (OpalMessagePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalParamSetUserData *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessagePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessagePtr const *","GetSetUserData", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessagePtr * >(argp1);
  result = (OpalParamSetUserData *)((OpalMessagePtr const *)arg1)->GetSetUserData();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpalParamSetUserData, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalMessagePtr.GetRecording

  call-seq:
    GetRecording -> OpalParamRecording

An instance method.

*/
SWIGINTERN VALUE
_wrap_OpalMessagePtr_GetRecording(int argc, VALUE *argv, VALUE self) {
  OpalMessagePtr *arg1 = (OpalMessagePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OpalParamRecording *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalMessagePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalMessagePtr const *","GetRecording", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalMessagePtr * >(argp1);
  result = (OpalParamRecording *)((OpalMessagePtr const *)arg1)->GetRecording();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OpalParamRecording, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-class: Opal::OpalContext

  Proxy of C++ Opal::OpalContext class


*/
swig_class SwigClassOpalContext;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_OpalContext_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_OpalContext_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_OpalContext);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: Opal::OpalContext.new

  call-seq:
    OpalContext.new

Class constructor.

*/
SWIGINTERN VALUE
_wrap_new_OpalContext(int argc, VALUE *argv, VALUE self) {
  OpalContext *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (OpalContext *)new OpalContext();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_OpalContext(OpalContext *arg1) {
    delete arg1;
}


/*
  Document-method: Opal::OpalContext.Initialise

  call-seq:
    Initialise(char options, unsigned int version=21) -> unsigned int
    Initialise(char options) -> unsigned int

An instance method.

*/
SWIGINTERN VALUE
_wrap_OpalContext_Initialise__SWIG_0(int argc, VALUE *argv, VALUE self) {
  OpalContext *arg1 = (OpalContext *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalContext *","Initialise", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalContext * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Initialise", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","Initialise", 3, argv[1] ));
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (unsigned int)(arg1)->Initialise((char const *)arg2,arg3);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalContext_Initialise__SWIG_1(int argc, VALUE *argv, VALUE self) {
  OpalContext *arg1 = (OpalContext *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalContext *","Initialise", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalContext * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","Initialise", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (unsigned int)(arg1)->Initialise((char const *)arg2);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_OpalContext_Initialise(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpalContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_OpalContext_Initialise__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpalContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_OpalContext_Initialise__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "OpalContext.Initialise", 
    "    unsigned int OpalContext.Initialise(char const *options, unsigned int version)\n"
    "    unsigned int OpalContext.Initialise(char const *options)\n");
  
  return Qnil;
}



/*
  Document-method: Opal::OpalContext.IsInitialised

  call-seq:
    IsInitialised -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_OpalContext_IsInitialised(int argc, VALUE *argv, VALUE self) {
  OpalContext *arg1 = (OpalContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalContext const *","IsInitialised", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalContext * >(argp1);
  result = (bool)((OpalContext const *)arg1)->IsInitialised();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalContext.ShutDown

  call-seq:
    ShutDown

An instance method.

*/
SWIGINTERN VALUE
_wrap_OpalContext_ShutDown(int argc, VALUE *argv, VALUE self) {
  OpalContext *arg1 = (OpalContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalContext *","ShutDown", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalContext * >(argp1);
  (arg1)->ShutDown();
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalContext.GetMessage

  call-seq:
    GetMessage(OpalMessagePtr message, unsigned int timeout=0) -> bool
    GetMessage(OpalMessagePtr message) -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_OpalContext_GetMessage__SWIG_0(int argc, VALUE *argv, VALUE self) {
  OpalContext *arg1 = (OpalContext *) 0 ;
  OpalMessagePtr *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalContext *","GetMessage", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalContext * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_OpalMessagePtr,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "OpalMessagePtr &","GetMessage", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "OpalMessagePtr &","GetMessage", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< OpalMessagePtr * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","GetMessage", 3, argv[1] ));
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (bool)(arg1)->GetMessage(*arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalContext_GetMessage__SWIG_1(int argc, VALUE *argv, VALUE self) {
  OpalContext *arg1 = (OpalContext *) 0 ;
  OpalMessagePtr *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalContext *","GetMessage", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalContext * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_OpalMessagePtr,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "OpalMessagePtr &","GetMessage", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "OpalMessagePtr &","GetMessage", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< OpalMessagePtr * >(argp2);
  result = (bool)(arg1)->GetMessage(*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_OpalContext_GetMessage(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpalContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_OpalMessagePtr, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_OpalContext_GetMessage__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpalContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_OpalMessagePtr, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_OpalContext_GetMessage__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "OpalContext.GetMessage", 
    "    bool OpalContext.GetMessage(OpalMessagePtr &message, unsigned int timeout)\n"
    "    bool OpalContext.GetMessage(OpalMessagePtr &message)\n");
  
  return Qnil;
}



/*
  Document-method: Opal::OpalContext.SendMessage

  call-seq:
    SendMessage(OpalMessagePtr message, OpalMessagePtr response) -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_OpalContext_SendMessage(int argc, VALUE *argv, VALUE self) {
  OpalContext *arg1 = (OpalContext *) 0 ;
  OpalMessagePtr *arg2 = 0 ;
  OpalMessagePtr *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalContext *","SendMessage", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalContext * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_OpalMessagePtr,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "OpalMessagePtr const &","SendMessage", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "OpalMessagePtr const &","SendMessage", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< OpalMessagePtr * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_OpalMessagePtr,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "OpalMessagePtr &","SendMessage", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "OpalMessagePtr &","SendMessage", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< OpalMessagePtr * >(argp3);
  result = (bool)(arg1)->SendMessage((OpalMessagePtr const &)*arg2,*arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Opal::OpalContext.SetUpCall

  call-seq:
    SetUpCall(OpalMessagePtr response, char partyB, char partyA=nil, 
    char alertingType=nil) -> bool
    SetUpCall(OpalMessagePtr response, char partyB, char partyA=nil) -> bool
    SetUpCall(OpalMessagePtr response, char partyB) -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_OpalContext_SetUpCall__SWIG_0(int argc, VALUE *argv, VALUE self) {
  OpalContext *arg1 = (OpalContext *) 0 ;
  OpalMessagePtr *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalContext *","SetUpCall", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalContext * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_OpalMessagePtr,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "OpalMessagePtr &","SetUpCall", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "OpalMessagePtr &","SetUpCall", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< OpalMessagePtr * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","SetUpCall", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","SetUpCall", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(argv[3], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), Ruby_Format_TypeError( "", "char const *","SetUpCall", 5, argv[3] ));
  }
  arg5 = reinterpret_cast< char * >(buf5);
  result = (bool)(arg1)->SetUpCall(*arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return vresult;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalContext_SetUpCall__SWIG_1(int argc, VALUE *argv, VALUE self) {
  OpalContext *arg1 = (OpalContext *) 0 ;
  OpalMessagePtr *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalContext *","SetUpCall", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalContext * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_OpalMessagePtr,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "OpalMessagePtr &","SetUpCall", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "OpalMessagePtr &","SetUpCall", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< OpalMessagePtr * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","SetUpCall", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "char const *","SetUpCall", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< char * >(buf4);
  result = (bool)(arg1)->SetUpCall(*arg2,(char const *)arg3,(char const *)arg4);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return vresult;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalContext_SetUpCall__SWIG_2(int argc, VALUE *argv, VALUE self) {
  OpalContext *arg1 = (OpalContext *) 0 ;
  OpalMessagePtr *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalContext *","SetUpCall", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalContext * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_OpalMessagePtr,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "OpalMessagePtr &","SetUpCall", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "OpalMessagePtr &","SetUpCall", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< OpalMessagePtr * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","SetUpCall", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = (bool)(arg1)->SetUpCall(*arg2,(char const *)arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return vresult;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE _wrap_OpalContext_SetUpCall(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpalContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_OpalMessagePtr, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_OpalContext_SetUpCall__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpalContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_OpalMessagePtr, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_OpalContext_SetUpCall__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpalContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_OpalMessagePtr, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_OpalContext_SetUpCall__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "OpalContext.SetUpCall", 
    "    bool OpalContext.SetUpCall(OpalMessagePtr &response, char const *partyB, char const *partyA, char const *alertingType)\n"
    "    bool OpalContext.SetUpCall(OpalMessagePtr &response, char const *partyB, char const *partyA)\n"
    "    bool OpalContext.SetUpCall(OpalMessagePtr &response, char const *partyB)\n");
  
  return Qnil;
}



/*
  Document-method: Opal::OpalContext.AnswerCall

  call-seq:
    AnswerCall(char callToken) -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_OpalContext_AnswerCall(int argc, VALUE *argv, VALUE self) {
  OpalContext *arg1 = (OpalContext *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalContext *","AnswerCall", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalContext * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","AnswerCall", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (bool)(arg1)->AnswerCall((char const *)arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}



/*
  Document-method: Opal::OpalContext.ClearCall

  call-seq:
    ClearCall(char callToken, OpalCallEndReason reason=OpalCallEndedByLocalUser) -> bool
    ClearCall(char callToken) -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_OpalContext_ClearCall__SWIG_0(int argc, VALUE *argv, VALUE self) {
  OpalContext *arg1 = (OpalContext *) 0 ;
  char *arg2 = (char *) 0 ;
  OpalCallEndReason arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalContext *","ClearCall", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalContext * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","ClearCall", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "OpalCallEndReason","ClearCall", 3, argv[1] ));
  } 
  arg3 = static_cast< OpalCallEndReason >(val3);
  result = (bool)(arg1)->ClearCall((char const *)arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalContext_ClearCall__SWIG_1(int argc, VALUE *argv, VALUE self) {
  OpalContext *arg1 = (OpalContext *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalContext *","ClearCall", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalContext * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","ClearCall", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (bool)(arg1)->ClearCall((char const *)arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_OpalContext_ClearCall(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpalContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_OpalContext_ClearCall__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpalContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_OpalContext_ClearCall__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "OpalContext.ClearCall", 
    "    bool OpalContext.ClearCall(char const *callToken, OpalCallEndReason reason)\n"
    "    bool OpalContext.ClearCall(char const *callToken)\n");
  
  return Qnil;
}



/*
  Document-method: Opal::OpalContext.SendUserInput

  call-seq:
    SendUserInput(char callToken, char userInput, unsigned int duration=0) -> bool
    SendUserInput(char callToken, char userInput) -> bool

An instance method.

*/
SWIGINTERN VALUE
_wrap_OpalContext_SendUserInput__SWIG_0(int argc, VALUE *argv, VALUE self) {
  OpalContext *arg1 = (OpalContext *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalContext *","SendUserInput", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalContext * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","SendUserInput", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","SendUserInput", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","SendUserInput", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  result = (bool)(arg1)->SendUserInput((char const *)arg2,(char const *)arg3,arg4);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OpalContext_SendUserInput__SWIG_1(int argc, VALUE *argv, VALUE self) {
  OpalContext *arg1 = (OpalContext *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_OpalContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "OpalContext *","SendUserInput", 1, self )); 
  }
  arg1 = reinterpret_cast< OpalContext * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","SendUserInput", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "char const *","SendUserInput", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = (bool)(arg1)->SendUserInput((char const *)arg2,(char const *)arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE _wrap_OpalContext_SendUserInput(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpalContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_OpalContext_SendUserInput__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_OpalContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_OpalContext_SendUserInput__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "OpalContext.SendUserInput", 
    "    bool OpalContext.SendUserInput(char const *callToken, char const *userInput, unsigned int duration)\n"
    "    bool OpalContext.SendUserInput(char const *callToken, char const *userInput)\n");
  
  return Qnil;
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_OpalCallEndReason = {"_p_OpalCallEndReason", "enum OpalCallEndReason *|OpalCallEndReason *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpalContext = {"_p_OpalContext", "OpalContext *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpalEchoCancelMode = {"_p_OpalEchoCancelMode", "enum OpalEchoCancelMode *|OpalEchoCancelMode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpalHandleStruct = {"_p_OpalHandleStruct", "OpalHandle|OpalHandleStruct *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpalLineAppearanceStates = {"_p_OpalLineAppearanceStates", "enum OpalLineAppearanceStates *|OpalLineAppearanceStates *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpalMediaDataType = {"_p_OpalMediaDataType", "enum OpalMediaDataType *|OpalMediaDataType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpalMediaStates = {"_p_OpalMediaStates", "enum OpalMediaStates *|OpalMediaStates *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpalMediaTiming = {"_p_OpalMediaTiming", "enum OpalMediaTiming *|OpalMediaTiming *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpalMessage = {"_p_OpalMessage", "OpalMessage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpalMessagePtr = {"_p_OpalMessagePtr", "OpalMessagePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpalMessageType = {"_p_OpalMessageType", "enum OpalMessageType *|OpalMessageType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpalMessage_m_param = {"_p_OpalMessage_m_param", "OpalMessage_m_param *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpalParamCallCleared = {"_p_OpalParamCallCleared", "OpalParamCallCleared *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpalParamGeneral = {"_p_OpalParamGeneral", "OpalParamGeneral *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpalParamProtocol = {"_p_OpalParamProtocol", "OpalParamProtocol *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpalParamRecording = {"_p_OpalParamRecording", "OpalParamRecording *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpalParamRegistration = {"_p_OpalParamRegistration", "OpalParamRegistration *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpalParamSetUpCall = {"_p_OpalParamSetUpCall", "OpalParamSetUpCall *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpalParamSetUserData = {"_p_OpalParamSetUserData", "OpalParamSetUserData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpalProductDescription = {"_p_OpalProductDescription", "OpalProductDescription *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpalRegistrationStates = {"_p_OpalRegistrationStates", "enum OpalRegistrationStates *|OpalRegistrationStates *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpalSilenceDetectMode = {"_p_OpalSilenceDetectMode", "enum OpalSilenceDetectMode *|OpalSilenceDetectMode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpalStatusCallCleared = {"_p_OpalStatusCallCleared", "OpalStatusCallCleared *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpalStatusIncomingCall = {"_p_OpalStatusIncomingCall", "OpalStatusIncomingCall *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpalStatusLineAppearance = {"_p_OpalStatusLineAppearance", "OpalStatusLineAppearance *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpalStatusMediaStream = {"_p_OpalStatusMediaStream", "OpalStatusMediaStream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpalStatusMessageWaiting = {"_p_OpalStatusMessageWaiting", "OpalStatusMessageWaiting *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpalStatusRegistration = {"_p_OpalStatusRegistration", "OpalStatusRegistration *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpalStatusUserInput = {"_p_OpalStatusUserInput", "OpalStatusUserInput *|OpalParamUserInput *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OpalVideoRecordMixMode = {"_p_OpalVideoRecordMixMode", "enum OpalVideoRecordMixMode *|OpalVideoRecordMixMode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_q_const__OpalMessage__int = {"_p_f_p_q_const__OpalMessage__int", "int (*)(OpalMessage const *)|OpalMessageAvailableFunction", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_q_const__char_p_q_const__char_p_q_const__char_p_void_p_void_int__int = {"_p_f_p_q_const__char_p_q_const__char_p_q_const__char_p_void_p_void_int__int", "OpalMediaDataFunction|int (*)(char const *,char const *,char const *,void *,void *,int)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_OpalCallEndReason,
  &_swigt__p_OpalContext,
  &_swigt__p_OpalEchoCancelMode,
  &_swigt__p_OpalHandleStruct,
  &_swigt__p_OpalLineAppearanceStates,
  &_swigt__p_OpalMediaDataType,
  &_swigt__p_OpalMediaStates,
  &_swigt__p_OpalMediaTiming,
  &_swigt__p_OpalMessage,
  &_swigt__p_OpalMessagePtr,
  &_swigt__p_OpalMessageType,
  &_swigt__p_OpalMessage_m_param,
  &_swigt__p_OpalParamCallCleared,
  &_swigt__p_OpalParamGeneral,
  &_swigt__p_OpalParamProtocol,
  &_swigt__p_OpalParamRecording,
  &_swigt__p_OpalParamRegistration,
  &_swigt__p_OpalParamSetUpCall,
  &_swigt__p_OpalParamSetUserData,
  &_swigt__p_OpalProductDescription,
  &_swigt__p_OpalRegistrationStates,
  &_swigt__p_OpalSilenceDetectMode,
  &_swigt__p_OpalStatusCallCleared,
  &_swigt__p_OpalStatusIncomingCall,
  &_swigt__p_OpalStatusLineAppearance,
  &_swigt__p_OpalStatusMediaStream,
  &_swigt__p_OpalStatusMessageWaiting,
  &_swigt__p_OpalStatusRegistration,
  &_swigt__p_OpalStatusUserInput,
  &_swigt__p_OpalVideoRecordMixMode,
  &_swigt__p_char,
  &_swigt__p_f_p_q_const__OpalMessage__int,
  &_swigt__p_f_p_q_const__char_p_q_const__char_p_q_const__char_p_void_p_void_int__int,
  &_swigt__p_unsigned_int,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_OpalCallEndReason[] = {  {&_swigt__p_OpalCallEndReason, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpalContext[] = {  {&_swigt__p_OpalContext, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpalEchoCancelMode[] = {  {&_swigt__p_OpalEchoCancelMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpalHandleStruct[] = {  {&_swigt__p_OpalHandleStruct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpalLineAppearanceStates[] = {  {&_swigt__p_OpalLineAppearanceStates, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpalMediaDataType[] = {  {&_swigt__p_OpalMediaDataType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpalMediaStates[] = {  {&_swigt__p_OpalMediaStates, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpalMediaTiming[] = {  {&_swigt__p_OpalMediaTiming, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpalMessage[] = {  {&_swigt__p_OpalMessage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpalMessagePtr[] = {  {&_swigt__p_OpalMessagePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpalMessageType[] = {  {&_swigt__p_OpalMessageType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpalMessage_m_param[] = {  {&_swigt__p_OpalMessage_m_param, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpalParamCallCleared[] = {  {&_swigt__p_OpalParamCallCleared, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpalParamGeneral[] = {  {&_swigt__p_OpalParamGeneral, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpalParamProtocol[] = {  {&_swigt__p_OpalParamProtocol, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpalParamRecording[] = {  {&_swigt__p_OpalParamRecording, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpalParamRegistration[] = {  {&_swigt__p_OpalParamRegistration, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpalParamSetUpCall[] = {  {&_swigt__p_OpalParamSetUpCall, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpalParamSetUserData[] = {  {&_swigt__p_OpalParamSetUserData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpalProductDescription[] = {  {&_swigt__p_OpalProductDescription, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpalRegistrationStates[] = {  {&_swigt__p_OpalRegistrationStates, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpalSilenceDetectMode[] = {  {&_swigt__p_OpalSilenceDetectMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpalStatusCallCleared[] = {  {&_swigt__p_OpalStatusCallCleared, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpalStatusIncomingCall[] = {  {&_swigt__p_OpalStatusIncomingCall, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpalStatusLineAppearance[] = {  {&_swigt__p_OpalStatusLineAppearance, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpalStatusMediaStream[] = {  {&_swigt__p_OpalStatusMediaStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpalStatusMessageWaiting[] = {  {&_swigt__p_OpalStatusMessageWaiting, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpalStatusRegistration[] = {  {&_swigt__p_OpalStatusRegistration, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpalStatusUserInput[] = {  {&_swigt__p_OpalStatusUserInput, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OpalVideoRecordMixMode[] = {  {&_swigt__p_OpalVideoRecordMixMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_q_const__OpalMessage__int[] = {  {&_swigt__p_f_p_q_const__OpalMessage__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_q_const__char_p_q_const__char_p_q_const__char_p_void_p_void_int__int[] = {  {&_swigt__p_f_p_q_const__char_p_q_const__char_p_q_const__char_p_void_p_void_int__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_OpalCallEndReason,
  _swigc__p_OpalContext,
  _swigc__p_OpalEchoCancelMode,
  _swigc__p_OpalHandleStruct,
  _swigc__p_OpalLineAppearanceStates,
  _swigc__p_OpalMediaDataType,
  _swigc__p_OpalMediaStates,
  _swigc__p_OpalMediaTiming,
  _swigc__p_OpalMessage,
  _swigc__p_OpalMessagePtr,
  _swigc__p_OpalMessageType,
  _swigc__p_OpalMessage_m_param,
  _swigc__p_OpalParamCallCleared,
  _swigc__p_OpalParamGeneral,
  _swigc__p_OpalParamProtocol,
  _swigc__p_OpalParamRecording,
  _swigc__p_OpalParamRegistration,
  _swigc__p_OpalParamSetUpCall,
  _swigc__p_OpalParamSetUserData,
  _swigc__p_OpalProductDescription,
  _swigc__p_OpalRegistrationStates,
  _swigc__p_OpalSilenceDetectMode,
  _swigc__p_OpalStatusCallCleared,
  _swigc__p_OpalStatusIncomingCall,
  _swigc__p_OpalStatusLineAppearance,
  _swigc__p_OpalStatusMediaStream,
  _swigc__p_OpalStatusMessageWaiting,
  _swigc__p_OpalStatusRegistration,
  _swigc__p_OpalStatusUserInput,
  _swigc__p_OpalVideoRecordMixMode,
  _swigc__p_char,
  _swigc__p_f_p_q_const__OpalMessage__int,
  _swigc__p_f_p_q_const__char_p_q_const__char_p_q_const__char_p_void_p_void_int__int,
  _swigc__p_unsigned_int,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif

/*

*/
#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void Init_opal(void) {
  size_t i;
  
  SWIG_InitRuntime();
  mOpal = rb_define_module("Opal");
  
  SWIG_InitializeModule(0);
  for (i = 0; i < swig_module.size; i++) {
    SWIG_define_class(swig_module.types[i]);
  }
  
  SWIG_RubyInitializeTrackings();
  rb_define_const(mOpal, "OPAL_C_API_VERSION", SWIG_From_int(static_cast< int >(21)));
  rb_define_module_function(mOpal, "OpalInitialise", VALUEFUNC(_wrap_OpalInitialise), -1);
  rb_define_const(mOpal, "OPAL_INITIALISE_FUNCTION", SWIG_FromCharPtr("OpalInitialise"));
  rb_define_module_function(mOpal, "OpalShutDown", VALUEFUNC(_wrap_OpalShutDown), -1);
  rb_define_const(mOpal, "OPAL_SHUTDOWN_FUNCTION", SWIG_FromCharPtr("OpalShutDown"));
  rb_define_module_function(mOpal, "OpalGetMessage", VALUEFUNC(_wrap_OpalGetMessage), -1);
  rb_define_const(mOpal, "OPAL_GET_MESSAGE_FUNCTION", SWIG_FromCharPtr("OpalGetMessage"));
  rb_define_module_function(mOpal, "OpalSendMessage", VALUEFUNC(_wrap_OpalSendMessage), -1);
  rb_define_const(mOpal, "OPAL_SEND_MESSAGE_FUNCTION", SWIG_FromCharPtr("OpalSendMessage"));
  rb_define_module_function(mOpal, "OpalFreeMessage", VALUEFUNC(_wrap_OpalFreeMessage), -1);
  rb_define_const(mOpal, "OPAL_FREE_MESSAGE_FUNCTION", SWIG_FromCharPtr("OpalFreeMessage"));
  rb_define_const(mOpal, "OPAL_PREFIX_H323", SWIG_FromCharPtr("h323"));
  rb_define_const(mOpal, "OPAL_PREFIX_SIP", SWIG_FromCharPtr("sip"));
  rb_define_const(mOpal, "OPAL_PREFIX_IAX2", SWIG_FromCharPtr("iax2"));
  rb_define_const(mOpal, "OPAL_PREFIX_PCSS", SWIG_FromCharPtr("pc"));
  rb_define_const(mOpal, "OPAL_PREFIX_LOCAL", SWIG_FromCharPtr("local"));
  rb_define_const(mOpal, "OPAL_PREFIX_POTS", SWIG_FromCharPtr("pots"));
  rb_define_const(mOpal, "OPAL_PREFIX_PSTN", SWIG_FromCharPtr("pstn"));
  rb_define_const(mOpal, "OPAL_PREFIX_IVR", SWIG_FromCharPtr("ivr"));
  rb_define_const(mOpal, "OPAL_PREFIX_ALL", SWIG_FromCharPtr("h323 sip iax2 pc local pots pstn ivr"));
  rb_define_const(mOpal, "OpalIndCommandError", SWIG_From_int(static_cast< int >(OpalIndCommandError)));
  rb_define_const(mOpal, "OpalCmdSetGeneralParameters", SWIG_From_int(static_cast< int >(OpalCmdSetGeneralParameters)));
  rb_define_const(mOpal, "OpalCmdSetProtocolParameters", SWIG_From_int(static_cast< int >(OpalCmdSetProtocolParameters)));
  rb_define_const(mOpal, "OpalCmdRegistration", SWIG_From_int(static_cast< int >(OpalCmdRegistration)));
  rb_define_const(mOpal, "OpalIndRegistration", SWIG_From_int(static_cast< int >(OpalIndRegistration)));
  rb_define_const(mOpal, "OpalCmdSetUpCall", SWIG_From_int(static_cast< int >(OpalCmdSetUpCall)));
  rb_define_const(mOpal, "OpalIndIncomingCall", SWIG_From_int(static_cast< int >(OpalIndIncomingCall)));
  rb_define_const(mOpal, "OpalCmdAnswerCall", SWIG_From_int(static_cast< int >(OpalCmdAnswerCall)));
  rb_define_const(mOpal, "OpalCmdClearCall", SWIG_From_int(static_cast< int >(OpalCmdClearCall)));
  rb_define_const(mOpal, "OpalIndAlerting", SWIG_From_int(static_cast< int >(OpalIndAlerting)));
  rb_define_const(mOpal, "OpalIndEstablished", SWIG_From_int(static_cast< int >(OpalIndEstablished)));
  rb_define_const(mOpal, "OpalIndUserInput", SWIG_From_int(static_cast< int >(OpalIndUserInput)));
  rb_define_const(mOpal, "OpalIndCallCleared", SWIG_From_int(static_cast< int >(OpalIndCallCleared)));
  rb_define_const(mOpal, "OpalCmdHoldCall", SWIG_From_int(static_cast< int >(OpalCmdHoldCall)));
  rb_define_const(mOpal, "OpalCmdRetrieveCall", SWIG_From_int(static_cast< int >(OpalCmdRetrieveCall)));
  rb_define_const(mOpal, "OpalCmdTransferCall", SWIG_From_int(static_cast< int >(OpalCmdTransferCall)));
  rb_define_const(mOpal, "OpalCmdUserInput", SWIG_From_int(static_cast< int >(OpalCmdUserInput)));
  rb_define_const(mOpal, "OpalIndMessageWaiting", SWIG_From_int(static_cast< int >(OpalIndMessageWaiting)));
  rb_define_const(mOpal, "OpalIndMediaStream", SWIG_From_int(static_cast< int >(OpalIndMediaStream)));
  rb_define_const(mOpal, "OpalCmdMediaStream", SWIG_From_int(static_cast< int >(OpalCmdMediaStream)));
  rb_define_const(mOpal, "OpalCmdSetUserData", SWIG_From_int(static_cast< int >(OpalCmdSetUserData)));
  rb_define_const(mOpal, "OpalIndLineAppearance", SWIG_From_int(static_cast< int >(OpalIndLineAppearance)));
  rb_define_const(mOpal, "OpalCmdStartRecording", SWIG_From_int(static_cast< int >(OpalCmdStartRecording)));
  rb_define_const(mOpal, "OpalCmdStopRecording", SWIG_From_int(static_cast< int >(OpalCmdStopRecording)));
  rb_define_const(mOpal, "OpalIndProceeding", SWIG_From_int(static_cast< int >(OpalIndProceeding)));
  rb_define_const(mOpal, "OpalCmdAlerting", SWIG_From_int(static_cast< int >(OpalCmdAlerting)));
  rb_define_const(mOpal, "OpalMessageTypeCount", SWIG_From_int(static_cast< int >(OpalMessageTypeCount)));
  rb_define_const(mOpal, "OpalSilenceDetectNoChange", SWIG_From_int(static_cast< int >(OpalSilenceDetectNoChange)));
  rb_define_const(mOpal, "OpalSilenceDetectDisabled", SWIG_From_int(static_cast< int >(OpalSilenceDetectDisabled)));
  rb_define_const(mOpal, "OpalSilenceDetectFixed", SWIG_From_int(static_cast< int >(OpalSilenceDetectFixed)));
  rb_define_const(mOpal, "OpalSilenceDetectAdaptive", SWIG_From_int(static_cast< int >(OpalSilenceDetectAdaptive)));
  rb_define_const(mOpal, "OpalEchoCancelNoChange", SWIG_From_int(static_cast< int >(OpalEchoCancelNoChange)));
  rb_define_const(mOpal, "OpalEchoCancelDisabled", SWIG_From_int(static_cast< int >(OpalEchoCancelDisabled)));
  rb_define_const(mOpal, "OpalEchoCancelEnabled", SWIG_From_int(static_cast< int >(OpalEchoCancelEnabled)));
  rb_define_const(mOpal, "OpalMediaDataNoChange", SWIG_From_int(static_cast< int >(OpalMediaDataNoChange)));
  rb_define_const(mOpal, "OpalMediaDataPayloadOnly", SWIG_From_int(static_cast< int >(OpalMediaDataPayloadOnly)));
  rb_define_const(mOpal, "OpalMediaDataWithHeader", SWIG_From_int(static_cast< int >(OpalMediaDataWithHeader)));
  rb_define_const(mOpal, "OpalMediaTimingNoChange", SWIG_From_int(static_cast< int >(OpalMediaTimingNoChange)));
  rb_define_const(mOpal, "OpalMediaTimingSynchronous", SWIG_From_int(static_cast< int >(OpalMediaTimingSynchronous)));
  rb_define_const(mOpal, "OpalMediaTimingAsynchronous", SWIG_From_int(static_cast< int >(OpalMediaTimingAsynchronous)));
  
  SwigClassOpalParamGeneral.klass = rb_define_class_under(mOpal, "OpalParamGeneral", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_OpalParamGeneral, (void *) &SwigClassOpalParamGeneral);
  rb_define_alloc_func(SwigClassOpalParamGeneral.klass, _wrap_OpalParamGeneral_allocate);
  rb_define_method(SwigClassOpalParamGeneral.klass, "initialize", VALUEFUNC(_wrap_new_OpalParamGeneral), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_audioRecordDevice=", VALUEFUNC(_wrap_OpalParamGeneral_m_audioRecordDevice_set), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_audioRecordDevice", VALUEFUNC(_wrap_OpalParamGeneral_m_audioRecordDevice_get), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_audioPlayerDevice=", VALUEFUNC(_wrap_OpalParamGeneral_m_audioPlayerDevice_set), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_audioPlayerDevice", VALUEFUNC(_wrap_OpalParamGeneral_m_audioPlayerDevice_get), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_videoInputDevice=", VALUEFUNC(_wrap_OpalParamGeneral_m_videoInputDevice_set), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_videoInputDevice", VALUEFUNC(_wrap_OpalParamGeneral_m_videoInputDevice_get), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_videoOutputDevice=", VALUEFUNC(_wrap_OpalParamGeneral_m_videoOutputDevice_set), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_videoOutputDevice", VALUEFUNC(_wrap_OpalParamGeneral_m_videoOutputDevice_get), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_videoPreviewDevice=", VALUEFUNC(_wrap_OpalParamGeneral_m_videoPreviewDevice_set), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_videoPreviewDevice", VALUEFUNC(_wrap_OpalParamGeneral_m_videoPreviewDevice_get), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_mediaOrder=", VALUEFUNC(_wrap_OpalParamGeneral_m_mediaOrder_set), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_mediaOrder", VALUEFUNC(_wrap_OpalParamGeneral_m_mediaOrder_get), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_mediaMask=", VALUEFUNC(_wrap_OpalParamGeneral_m_mediaMask_set), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_mediaMask", VALUEFUNC(_wrap_OpalParamGeneral_m_mediaMask_get), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_autoRxMedia=", VALUEFUNC(_wrap_OpalParamGeneral_m_autoRxMedia_set), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_autoRxMedia", VALUEFUNC(_wrap_OpalParamGeneral_m_autoRxMedia_get), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_autoTxMedia=", VALUEFUNC(_wrap_OpalParamGeneral_m_autoTxMedia_set), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_autoTxMedia", VALUEFUNC(_wrap_OpalParamGeneral_m_autoTxMedia_get), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_natRouter=", VALUEFUNC(_wrap_OpalParamGeneral_m_natRouter_set), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_natRouter", VALUEFUNC(_wrap_OpalParamGeneral_m_natRouter_get), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_stunServer=", VALUEFUNC(_wrap_OpalParamGeneral_m_stunServer_set), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_stunServer", VALUEFUNC(_wrap_OpalParamGeneral_m_stunServer_get), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_tcpPortBase=", VALUEFUNC(_wrap_OpalParamGeneral_m_tcpPortBase_set), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_tcpPortBase", VALUEFUNC(_wrap_OpalParamGeneral_m_tcpPortBase_get), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_tcpPortMax=", VALUEFUNC(_wrap_OpalParamGeneral_m_tcpPortMax_set), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_tcpPortMax", VALUEFUNC(_wrap_OpalParamGeneral_m_tcpPortMax_get), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_udpPortBase=", VALUEFUNC(_wrap_OpalParamGeneral_m_udpPortBase_set), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_udpPortBase", VALUEFUNC(_wrap_OpalParamGeneral_m_udpPortBase_get), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_udpPortMax=", VALUEFUNC(_wrap_OpalParamGeneral_m_udpPortMax_set), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_udpPortMax", VALUEFUNC(_wrap_OpalParamGeneral_m_udpPortMax_get), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_rtpPortBase=", VALUEFUNC(_wrap_OpalParamGeneral_m_rtpPortBase_set), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_rtpPortBase", VALUEFUNC(_wrap_OpalParamGeneral_m_rtpPortBase_get), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_rtpPortMax=", VALUEFUNC(_wrap_OpalParamGeneral_m_rtpPortMax_set), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_rtpPortMax", VALUEFUNC(_wrap_OpalParamGeneral_m_rtpPortMax_get), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_rtpTypeOfService=", VALUEFUNC(_wrap_OpalParamGeneral_m_rtpTypeOfService_set), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_rtpTypeOfService", VALUEFUNC(_wrap_OpalParamGeneral_m_rtpTypeOfService_get), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_rtpMaxPayloadSize=", VALUEFUNC(_wrap_OpalParamGeneral_m_rtpMaxPayloadSize_set), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_rtpMaxPayloadSize", VALUEFUNC(_wrap_OpalParamGeneral_m_rtpMaxPayloadSize_get), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_minAudioJitter=", VALUEFUNC(_wrap_OpalParamGeneral_m_minAudioJitter_set), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_minAudioJitter", VALUEFUNC(_wrap_OpalParamGeneral_m_minAudioJitter_get), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_maxAudioJitter=", VALUEFUNC(_wrap_OpalParamGeneral_m_maxAudioJitter_set), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_maxAudioJitter", VALUEFUNC(_wrap_OpalParamGeneral_m_maxAudioJitter_get), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_silenceDetectMode=", VALUEFUNC(_wrap_OpalParamGeneral_m_silenceDetectMode_set), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_silenceDetectMode", VALUEFUNC(_wrap_OpalParamGeneral_m_silenceDetectMode_get), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_silenceThreshold=", VALUEFUNC(_wrap_OpalParamGeneral_m_silenceThreshold_set), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_silenceThreshold", VALUEFUNC(_wrap_OpalParamGeneral_m_silenceThreshold_get), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_signalDeadband=", VALUEFUNC(_wrap_OpalParamGeneral_m_signalDeadband_set), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_signalDeadband", VALUEFUNC(_wrap_OpalParamGeneral_m_signalDeadband_get), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_silenceDeadband=", VALUEFUNC(_wrap_OpalParamGeneral_m_silenceDeadband_set), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_silenceDeadband", VALUEFUNC(_wrap_OpalParamGeneral_m_silenceDeadband_get), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_silenceAdaptPeriod=", VALUEFUNC(_wrap_OpalParamGeneral_m_silenceAdaptPeriod_set), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_silenceAdaptPeriod", VALUEFUNC(_wrap_OpalParamGeneral_m_silenceAdaptPeriod_get), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_echoCancellation=", VALUEFUNC(_wrap_OpalParamGeneral_m_echoCancellation_set), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_echoCancellation", VALUEFUNC(_wrap_OpalParamGeneral_m_echoCancellation_get), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_audioBuffers=", VALUEFUNC(_wrap_OpalParamGeneral_m_audioBuffers_set), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_audioBuffers", VALUEFUNC(_wrap_OpalParamGeneral_m_audioBuffers_get), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_mediaReadData=", VALUEFUNC(_wrap_OpalParamGeneral_m_mediaReadData_set), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_mediaReadData", VALUEFUNC(_wrap_OpalParamGeneral_m_mediaReadData_get), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_mediaWriteData=", VALUEFUNC(_wrap_OpalParamGeneral_m_mediaWriteData_set), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_mediaWriteData", VALUEFUNC(_wrap_OpalParamGeneral_m_mediaWriteData_get), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_mediaDataHeader=", VALUEFUNC(_wrap_OpalParamGeneral_m_mediaDataHeader_set), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_mediaDataHeader", VALUEFUNC(_wrap_OpalParamGeneral_m_mediaDataHeader_get), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_messageAvailable=", VALUEFUNC(_wrap_OpalParamGeneral_m_messageAvailable_set), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_messageAvailable", VALUEFUNC(_wrap_OpalParamGeneral_m_messageAvailable_get), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_mediaOptions=", VALUEFUNC(_wrap_OpalParamGeneral_m_mediaOptions_set), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_mediaOptions", VALUEFUNC(_wrap_OpalParamGeneral_m_mediaOptions_get), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_audioBufferTime=", VALUEFUNC(_wrap_OpalParamGeneral_m_audioBufferTime_set), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_audioBufferTime", VALUEFUNC(_wrap_OpalParamGeneral_m_audioBufferTime_get), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_manualAlerting=", VALUEFUNC(_wrap_OpalParamGeneral_m_manualAlerting_set), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_manualAlerting", VALUEFUNC(_wrap_OpalParamGeneral_m_manualAlerting_get), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_mediaTiming=", VALUEFUNC(_wrap_OpalParamGeneral_m_mediaTiming_set), -1);
  rb_define_method(SwigClassOpalParamGeneral.klass, "m_mediaTiming", VALUEFUNC(_wrap_OpalParamGeneral_m_mediaTiming_get), -1);
  SwigClassOpalParamGeneral.mark = 0;
  SwigClassOpalParamGeneral.destroy = (void (*)(void *)) free_OpalParamGeneral;
  SwigClassOpalParamGeneral.trackObjects = 0;
  
  SwigClassOpalProductDescription.klass = rb_define_class_under(mOpal, "OpalProductDescription", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_OpalProductDescription, (void *) &SwigClassOpalProductDescription);
  rb_define_alloc_func(SwigClassOpalProductDescription.klass, _wrap_OpalProductDescription_allocate);
  rb_define_method(SwigClassOpalProductDescription.klass, "initialize", VALUEFUNC(_wrap_new_OpalProductDescription), -1);
  rb_define_method(SwigClassOpalProductDescription.klass, "m_vendor=", VALUEFUNC(_wrap_OpalProductDescription_m_vendor_set), -1);
  rb_define_method(SwigClassOpalProductDescription.klass, "m_vendor", VALUEFUNC(_wrap_OpalProductDescription_m_vendor_get), -1);
  rb_define_method(SwigClassOpalProductDescription.klass, "m_name=", VALUEFUNC(_wrap_OpalProductDescription_m_name_set), -1);
  rb_define_method(SwigClassOpalProductDescription.klass, "m_name", VALUEFUNC(_wrap_OpalProductDescription_m_name_get), -1);
  rb_define_method(SwigClassOpalProductDescription.klass, "m_version=", VALUEFUNC(_wrap_OpalProductDescription_m_version_set), -1);
  rb_define_method(SwigClassOpalProductDescription.klass, "m_version", VALUEFUNC(_wrap_OpalProductDescription_m_version_get), -1);
  rb_define_method(SwigClassOpalProductDescription.klass, "m_t35CountryCode=", VALUEFUNC(_wrap_OpalProductDescription_m_t35CountryCode_set), -1);
  rb_define_method(SwigClassOpalProductDescription.klass, "m_t35CountryCode", VALUEFUNC(_wrap_OpalProductDescription_m_t35CountryCode_get), -1);
  rb_define_method(SwigClassOpalProductDescription.klass, "m_t35Extension=", VALUEFUNC(_wrap_OpalProductDescription_m_t35Extension_set), -1);
  rb_define_method(SwigClassOpalProductDescription.klass, "m_t35Extension", VALUEFUNC(_wrap_OpalProductDescription_m_t35Extension_get), -1);
  rb_define_method(SwigClassOpalProductDescription.klass, "m_manufacturerCode=", VALUEFUNC(_wrap_OpalProductDescription_m_manufacturerCode_set), -1);
  rb_define_method(SwigClassOpalProductDescription.klass, "m_manufacturerCode", VALUEFUNC(_wrap_OpalProductDescription_m_manufacturerCode_get), -1);
  SwigClassOpalProductDescription.mark = 0;
  SwigClassOpalProductDescription.destroy = (void (*)(void *)) free_OpalProductDescription;
  SwigClassOpalProductDescription.trackObjects = 0;
  
  SwigClassOpalParamProtocol.klass = rb_define_class_under(mOpal, "OpalParamProtocol", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_OpalParamProtocol, (void *) &SwigClassOpalParamProtocol);
  rb_define_alloc_func(SwigClassOpalParamProtocol.klass, _wrap_OpalParamProtocol_allocate);
  rb_define_method(SwigClassOpalParamProtocol.klass, "initialize", VALUEFUNC(_wrap_new_OpalParamProtocol), -1);
  rb_define_method(SwigClassOpalParamProtocol.klass, "m_prefix=", VALUEFUNC(_wrap_OpalParamProtocol_m_prefix_set), -1);
  rb_define_method(SwigClassOpalParamProtocol.klass, "m_prefix", VALUEFUNC(_wrap_OpalParamProtocol_m_prefix_get), -1);
  rb_define_method(SwigClassOpalParamProtocol.klass, "m_userName=", VALUEFUNC(_wrap_OpalParamProtocol_m_userName_set), -1);
  rb_define_method(SwigClassOpalParamProtocol.klass, "m_userName", VALUEFUNC(_wrap_OpalParamProtocol_m_userName_get), -1);
  rb_define_method(SwigClassOpalParamProtocol.klass, "m_displayName=", VALUEFUNC(_wrap_OpalParamProtocol_m_displayName_set), -1);
  rb_define_method(SwigClassOpalParamProtocol.klass, "m_displayName", VALUEFUNC(_wrap_OpalParamProtocol_m_displayName_get), -1);
  rb_define_method(SwigClassOpalParamProtocol.klass, "m_product=", VALUEFUNC(_wrap_OpalParamProtocol_m_product_set), -1);
  rb_define_method(SwigClassOpalParamProtocol.klass, "m_product", VALUEFUNC(_wrap_OpalParamProtocol_m_product_get), -1);
  rb_define_method(SwigClassOpalParamProtocol.klass, "m_interfaceAddresses=", VALUEFUNC(_wrap_OpalParamProtocol_m_interfaceAddresses_set), -1);
  rb_define_method(SwigClassOpalParamProtocol.klass, "m_interfaceAddresses", VALUEFUNC(_wrap_OpalParamProtocol_m_interfaceAddresses_get), -1);
  SwigClassOpalParamProtocol.mark = 0;
  SwigClassOpalParamProtocol.destroy = (void (*)(void *)) free_OpalParamProtocol;
  SwigClassOpalParamProtocol.trackObjects = 0;
  rb_define_const(mOpal, "OPAL_MWI_EVENT_PACKAGE", SWIG_FromCharPtr("message-summary"));
  rb_define_const(mOpal, "OPAL_LINE_APPEARANCE_EVENT_PACKAGE", SWIG_FromCharPtr("dialog;sla;ma"));
  
  SwigClassOpalParamRegistration.klass = rb_define_class_under(mOpal, "OpalParamRegistration", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_OpalParamRegistration, (void *) &SwigClassOpalParamRegistration);
  rb_define_alloc_func(SwigClassOpalParamRegistration.klass, _wrap_OpalParamRegistration_allocate);
  rb_define_method(SwigClassOpalParamRegistration.klass, "initialize", VALUEFUNC(_wrap_new_OpalParamRegistration), -1);
  rb_define_method(SwigClassOpalParamRegistration.klass, "m_protocol=", VALUEFUNC(_wrap_OpalParamRegistration_m_protocol_set), -1);
  rb_define_method(SwigClassOpalParamRegistration.klass, "m_protocol", VALUEFUNC(_wrap_OpalParamRegistration_m_protocol_get), -1);
  rb_define_method(SwigClassOpalParamRegistration.klass, "m_identifier=", VALUEFUNC(_wrap_OpalParamRegistration_m_identifier_set), -1);
  rb_define_method(SwigClassOpalParamRegistration.klass, "m_identifier", VALUEFUNC(_wrap_OpalParamRegistration_m_identifier_get), -1);
  rb_define_method(SwigClassOpalParamRegistration.klass, "m_hostName=", VALUEFUNC(_wrap_OpalParamRegistration_m_hostName_set), -1);
  rb_define_method(SwigClassOpalParamRegistration.klass, "m_hostName", VALUEFUNC(_wrap_OpalParamRegistration_m_hostName_get), -1);
  rb_define_method(SwigClassOpalParamRegistration.klass, "m_authUserName=", VALUEFUNC(_wrap_OpalParamRegistration_m_authUserName_set), -1);
  rb_define_method(SwigClassOpalParamRegistration.klass, "m_authUserName", VALUEFUNC(_wrap_OpalParamRegistration_m_authUserName_get), -1);
  rb_define_method(SwigClassOpalParamRegistration.klass, "m_password=", VALUEFUNC(_wrap_OpalParamRegistration_m_password_set), -1);
  rb_define_method(SwigClassOpalParamRegistration.klass, "m_password", VALUEFUNC(_wrap_OpalParamRegistration_m_password_get), -1);
  rb_define_method(SwigClassOpalParamRegistration.klass, "m_adminEntity=", VALUEFUNC(_wrap_OpalParamRegistration_m_adminEntity_set), -1);
  rb_define_method(SwigClassOpalParamRegistration.klass, "m_adminEntity", VALUEFUNC(_wrap_OpalParamRegistration_m_adminEntity_get), -1);
  rb_define_method(SwigClassOpalParamRegistration.klass, "m_timeToLive=", VALUEFUNC(_wrap_OpalParamRegistration_m_timeToLive_set), -1);
  rb_define_method(SwigClassOpalParamRegistration.klass, "m_timeToLive", VALUEFUNC(_wrap_OpalParamRegistration_m_timeToLive_get), -1);
  rb_define_method(SwigClassOpalParamRegistration.klass, "m_restoreTime=", VALUEFUNC(_wrap_OpalParamRegistration_m_restoreTime_set), -1);
  rb_define_method(SwigClassOpalParamRegistration.klass, "m_restoreTime", VALUEFUNC(_wrap_OpalParamRegistration_m_restoreTime_get), -1);
  rb_define_method(SwigClassOpalParamRegistration.klass, "m_eventPackage=", VALUEFUNC(_wrap_OpalParamRegistration_m_eventPackage_set), -1);
  rb_define_method(SwigClassOpalParamRegistration.klass, "m_eventPackage", VALUEFUNC(_wrap_OpalParamRegistration_m_eventPackage_get), -1);
  SwigClassOpalParamRegistration.mark = 0;
  SwigClassOpalParamRegistration.destroy = (void (*)(void *)) free_OpalParamRegistration;
  SwigClassOpalParamRegistration.trackObjects = 0;
  rb_define_const(mOpal, "OpalRegisterSuccessful", SWIG_From_int(static_cast< int >(OpalRegisterSuccessful)));
  rb_define_const(mOpal, "OpalRegisterRemoved", SWIG_From_int(static_cast< int >(OpalRegisterRemoved)));
  rb_define_const(mOpal, "OpalRegisterFailed", SWIG_From_int(static_cast< int >(OpalRegisterFailed)));
  rb_define_const(mOpal, "OpalRegisterRetrying", SWIG_From_int(static_cast< int >(OpalRegisterRetrying)));
  rb_define_const(mOpal, "OpalRegisterRestored", SWIG_From_int(static_cast< int >(OpalRegisterRestored)));
  
  SwigClassOpalStatusRegistration.klass = rb_define_class_under(mOpal, "OpalStatusRegistration", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_OpalStatusRegistration, (void *) &SwigClassOpalStatusRegistration);
  rb_define_alloc_func(SwigClassOpalStatusRegistration.klass, _wrap_OpalStatusRegistration_allocate);
  rb_define_method(SwigClassOpalStatusRegistration.klass, "initialize", VALUEFUNC(_wrap_new_OpalStatusRegistration), -1);
  rb_define_method(SwigClassOpalStatusRegistration.klass, "m_protocol=", VALUEFUNC(_wrap_OpalStatusRegistration_m_protocol_set), -1);
  rb_define_method(SwigClassOpalStatusRegistration.klass, "m_protocol", VALUEFUNC(_wrap_OpalStatusRegistration_m_protocol_get), -1);
  rb_define_method(SwigClassOpalStatusRegistration.klass, "m_serverName=", VALUEFUNC(_wrap_OpalStatusRegistration_m_serverName_set), -1);
  rb_define_method(SwigClassOpalStatusRegistration.klass, "m_serverName", VALUEFUNC(_wrap_OpalStatusRegistration_m_serverName_get), -1);
  rb_define_method(SwigClassOpalStatusRegistration.klass, "m_error=", VALUEFUNC(_wrap_OpalStatusRegistration_m_error_set), -1);
  rb_define_method(SwigClassOpalStatusRegistration.klass, "m_error", VALUEFUNC(_wrap_OpalStatusRegistration_m_error_get), -1);
  rb_define_method(SwigClassOpalStatusRegistration.klass, "m_status=", VALUEFUNC(_wrap_OpalStatusRegistration_m_status_set), -1);
  rb_define_method(SwigClassOpalStatusRegistration.klass, "m_status", VALUEFUNC(_wrap_OpalStatusRegistration_m_status_get), -1);
  rb_define_method(SwigClassOpalStatusRegistration.klass, "m_product=", VALUEFUNC(_wrap_OpalStatusRegistration_m_product_set), -1);
  rb_define_method(SwigClassOpalStatusRegistration.klass, "m_product", VALUEFUNC(_wrap_OpalStatusRegistration_m_product_get), -1);
  SwigClassOpalStatusRegistration.mark = 0;
  SwigClassOpalStatusRegistration.destroy = (void (*)(void *)) free_OpalStatusRegistration;
  SwigClassOpalStatusRegistration.trackObjects = 0;
  
  SwigClassOpalParamSetUpCall.klass = rb_define_class_under(mOpal, "OpalParamSetUpCall", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_OpalParamSetUpCall, (void *) &SwigClassOpalParamSetUpCall);
  rb_define_alloc_func(SwigClassOpalParamSetUpCall.klass, _wrap_OpalParamSetUpCall_allocate);
  rb_define_method(SwigClassOpalParamSetUpCall.klass, "initialize", VALUEFUNC(_wrap_new_OpalParamSetUpCall), -1);
  rb_define_method(SwigClassOpalParamSetUpCall.klass, "m_partyA=", VALUEFUNC(_wrap_OpalParamSetUpCall_m_partyA_set), -1);
  rb_define_method(SwigClassOpalParamSetUpCall.klass, "m_partyA", VALUEFUNC(_wrap_OpalParamSetUpCall_m_partyA_get), -1);
  rb_define_method(SwigClassOpalParamSetUpCall.klass, "m_partyB=", VALUEFUNC(_wrap_OpalParamSetUpCall_m_partyB_set), -1);
  rb_define_method(SwigClassOpalParamSetUpCall.klass, "m_partyB", VALUEFUNC(_wrap_OpalParamSetUpCall_m_partyB_get), -1);
  rb_define_method(SwigClassOpalParamSetUpCall.klass, "m_callToken=", VALUEFUNC(_wrap_OpalParamSetUpCall_m_callToken_set), -1);
  rb_define_method(SwigClassOpalParamSetUpCall.klass, "m_callToken", VALUEFUNC(_wrap_OpalParamSetUpCall_m_callToken_get), -1);
  rb_define_method(SwigClassOpalParamSetUpCall.klass, "m_alertingType=", VALUEFUNC(_wrap_OpalParamSetUpCall_m_alertingType_set), -1);
  rb_define_method(SwigClassOpalParamSetUpCall.klass, "m_alertingType", VALUEFUNC(_wrap_OpalParamSetUpCall_m_alertingType_get), -1);
  rb_define_method(SwigClassOpalParamSetUpCall.klass, "m_protocolCallId=", VALUEFUNC(_wrap_OpalParamSetUpCall_m_protocolCallId_set), -1);
  rb_define_method(SwigClassOpalParamSetUpCall.klass, "m_protocolCallId", VALUEFUNC(_wrap_OpalParamSetUpCall_m_protocolCallId_get), -1);
  SwigClassOpalParamSetUpCall.mark = 0;
  SwigClassOpalParamSetUpCall.destroy = (void (*)(void *)) free_OpalParamSetUpCall;
  SwigClassOpalParamSetUpCall.trackObjects = 0;
  
  SwigClassOpalStatusIncomingCall.klass = rb_define_class_under(mOpal, "OpalStatusIncomingCall", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_OpalStatusIncomingCall, (void *) &SwigClassOpalStatusIncomingCall);
  rb_define_alloc_func(SwigClassOpalStatusIncomingCall.klass, _wrap_OpalStatusIncomingCall_allocate);
  rb_define_method(SwigClassOpalStatusIncomingCall.klass, "initialize", VALUEFUNC(_wrap_new_OpalStatusIncomingCall), -1);
  rb_define_method(SwigClassOpalStatusIncomingCall.klass, "m_callToken=", VALUEFUNC(_wrap_OpalStatusIncomingCall_m_callToken_set), -1);
  rb_define_method(SwigClassOpalStatusIncomingCall.klass, "m_callToken", VALUEFUNC(_wrap_OpalStatusIncomingCall_m_callToken_get), -1);
  rb_define_method(SwigClassOpalStatusIncomingCall.klass, "m_localAddress=", VALUEFUNC(_wrap_OpalStatusIncomingCall_m_localAddress_set), -1);
  rb_define_method(SwigClassOpalStatusIncomingCall.klass, "m_localAddress", VALUEFUNC(_wrap_OpalStatusIncomingCall_m_localAddress_get), -1);
  rb_define_method(SwigClassOpalStatusIncomingCall.klass, "m_remoteAddress=", VALUEFUNC(_wrap_OpalStatusIncomingCall_m_remoteAddress_set), -1);
  rb_define_method(SwigClassOpalStatusIncomingCall.klass, "m_remoteAddress", VALUEFUNC(_wrap_OpalStatusIncomingCall_m_remoteAddress_get), -1);
  rb_define_method(SwigClassOpalStatusIncomingCall.klass, "m_remotePartyNumber=", VALUEFUNC(_wrap_OpalStatusIncomingCall_m_remotePartyNumber_set), -1);
  rb_define_method(SwigClassOpalStatusIncomingCall.klass, "m_remotePartyNumber", VALUEFUNC(_wrap_OpalStatusIncomingCall_m_remotePartyNumber_get), -1);
  rb_define_method(SwigClassOpalStatusIncomingCall.klass, "m_remoteDisplayName=", VALUEFUNC(_wrap_OpalStatusIncomingCall_m_remoteDisplayName_set), -1);
  rb_define_method(SwigClassOpalStatusIncomingCall.klass, "m_remoteDisplayName", VALUEFUNC(_wrap_OpalStatusIncomingCall_m_remoteDisplayName_get), -1);
  rb_define_method(SwigClassOpalStatusIncomingCall.klass, "m_calledAddress=", VALUEFUNC(_wrap_OpalStatusIncomingCall_m_calledAddress_set), -1);
  rb_define_method(SwigClassOpalStatusIncomingCall.klass, "m_calledAddress", VALUEFUNC(_wrap_OpalStatusIncomingCall_m_calledAddress_get), -1);
  rb_define_method(SwigClassOpalStatusIncomingCall.klass, "m_calledPartyNumber=", VALUEFUNC(_wrap_OpalStatusIncomingCall_m_calledPartyNumber_set), -1);
  rb_define_method(SwigClassOpalStatusIncomingCall.klass, "m_calledPartyNumber", VALUEFUNC(_wrap_OpalStatusIncomingCall_m_calledPartyNumber_get), -1);
  rb_define_method(SwigClassOpalStatusIncomingCall.klass, "m_product=", VALUEFUNC(_wrap_OpalStatusIncomingCall_m_product_set), -1);
  rb_define_method(SwigClassOpalStatusIncomingCall.klass, "m_product", VALUEFUNC(_wrap_OpalStatusIncomingCall_m_product_get), -1);
  rb_define_method(SwigClassOpalStatusIncomingCall.klass, "m_alertingType=", VALUEFUNC(_wrap_OpalStatusIncomingCall_m_alertingType_set), -1);
  rb_define_method(SwigClassOpalStatusIncomingCall.klass, "m_alertingType", VALUEFUNC(_wrap_OpalStatusIncomingCall_m_alertingType_get), -1);
  rb_define_method(SwigClassOpalStatusIncomingCall.klass, "m_protocolCallId=", VALUEFUNC(_wrap_OpalStatusIncomingCall_m_protocolCallId_set), -1);
  rb_define_method(SwigClassOpalStatusIncomingCall.klass, "m_protocolCallId", VALUEFUNC(_wrap_OpalStatusIncomingCall_m_protocolCallId_get), -1);
  SwigClassOpalStatusIncomingCall.mark = 0;
  SwigClassOpalStatusIncomingCall.destroy = (void (*)(void *)) free_OpalStatusIncomingCall;
  SwigClassOpalStatusIncomingCall.trackObjects = 0;
  rb_define_const(mOpal, "OpalMediaStateNoChange", SWIG_From_int(static_cast< int >(OpalMediaStateNoChange)));
  rb_define_const(mOpal, "OpalMediaStateOpen", SWIG_From_int(static_cast< int >(OpalMediaStateOpen)));
  rb_define_const(mOpal, "OpalMediaStateClose", SWIG_From_int(static_cast< int >(OpalMediaStateClose)));
  rb_define_const(mOpal, "OpalMediaStatePause", SWIG_From_int(static_cast< int >(OpalMediaStatePause)));
  rb_define_const(mOpal, "OpalMediaStateResume", SWIG_From_int(static_cast< int >(OpalMediaStateResume)));
  
  SwigClassOpalStatusMediaStream.klass = rb_define_class_under(mOpal, "OpalStatusMediaStream", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_OpalStatusMediaStream, (void *) &SwigClassOpalStatusMediaStream);
  rb_define_alloc_func(SwigClassOpalStatusMediaStream.klass, _wrap_OpalStatusMediaStream_allocate);
  rb_define_method(SwigClassOpalStatusMediaStream.klass, "initialize", VALUEFUNC(_wrap_new_OpalStatusMediaStream), -1);
  rb_define_method(SwigClassOpalStatusMediaStream.klass, "m_callToken=", VALUEFUNC(_wrap_OpalStatusMediaStream_m_callToken_set), -1);
  rb_define_method(SwigClassOpalStatusMediaStream.klass, "m_callToken", VALUEFUNC(_wrap_OpalStatusMediaStream_m_callToken_get), -1);
  rb_define_method(SwigClassOpalStatusMediaStream.klass, "m_identifier=", VALUEFUNC(_wrap_OpalStatusMediaStream_m_identifier_set), -1);
  rb_define_method(SwigClassOpalStatusMediaStream.klass, "m_identifier", VALUEFUNC(_wrap_OpalStatusMediaStream_m_identifier_get), -1);
  rb_define_method(SwigClassOpalStatusMediaStream.klass, "m_type=", VALUEFUNC(_wrap_OpalStatusMediaStream_m_type_set), -1);
  rb_define_method(SwigClassOpalStatusMediaStream.klass, "m_type", VALUEFUNC(_wrap_OpalStatusMediaStream_m_type_get), -1);
  rb_define_method(SwigClassOpalStatusMediaStream.klass, "m_format=", VALUEFUNC(_wrap_OpalStatusMediaStream_m_format_set), -1);
  rb_define_method(SwigClassOpalStatusMediaStream.klass, "m_format", VALUEFUNC(_wrap_OpalStatusMediaStream_m_format_get), -1);
  rb_define_method(SwigClassOpalStatusMediaStream.klass, "m_state=", VALUEFUNC(_wrap_OpalStatusMediaStream_m_state_set), -1);
  rb_define_method(SwigClassOpalStatusMediaStream.klass, "m_state", VALUEFUNC(_wrap_OpalStatusMediaStream_m_state_get), -1);
  SwigClassOpalStatusMediaStream.mark = 0;
  SwigClassOpalStatusMediaStream.destroy = (void (*)(void *)) free_OpalStatusMediaStream;
  SwigClassOpalStatusMediaStream.trackObjects = 0;
  
  SwigClassOpalParamSetUserData.klass = rb_define_class_under(mOpal, "OpalParamSetUserData", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_OpalParamSetUserData, (void *) &SwigClassOpalParamSetUserData);
  rb_define_alloc_func(SwigClassOpalParamSetUserData.klass, _wrap_OpalParamSetUserData_allocate);
  rb_define_method(SwigClassOpalParamSetUserData.klass, "initialize", VALUEFUNC(_wrap_new_OpalParamSetUserData), -1);
  rb_define_method(SwigClassOpalParamSetUserData.klass, "m_callToken=", VALUEFUNC(_wrap_OpalParamSetUserData_m_callToken_set), -1);
  rb_define_method(SwigClassOpalParamSetUserData.klass, "m_callToken", VALUEFUNC(_wrap_OpalParamSetUserData_m_callToken_get), -1);
  rb_define_method(SwigClassOpalParamSetUserData.klass, "m_userData=", VALUEFUNC(_wrap_OpalParamSetUserData_m_userData_set), -1);
  rb_define_method(SwigClassOpalParamSetUserData.klass, "m_userData", VALUEFUNC(_wrap_OpalParamSetUserData_m_userData_get), -1);
  SwigClassOpalParamSetUserData.mark = 0;
  SwigClassOpalParamSetUserData.destroy = (void (*)(void *)) free_OpalParamSetUserData;
  SwigClassOpalParamSetUserData.trackObjects = 0;
  
  SwigClassOpalStatusUserInput.klass = rb_define_class_under(mOpal, "OpalStatusUserInput", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_OpalStatusUserInput, (void *) &SwigClassOpalStatusUserInput);
  rb_define_alloc_func(SwigClassOpalStatusUserInput.klass, _wrap_OpalStatusUserInput_allocate);
  rb_define_method(SwigClassOpalStatusUserInput.klass, "initialize", VALUEFUNC(_wrap_new_OpalStatusUserInput), -1);
  rb_define_method(SwigClassOpalStatusUserInput.klass, "m_callToken=", VALUEFUNC(_wrap_OpalStatusUserInput_m_callToken_set), -1);
  rb_define_method(SwigClassOpalStatusUserInput.klass, "m_callToken", VALUEFUNC(_wrap_OpalStatusUserInput_m_callToken_get), -1);
  rb_define_method(SwigClassOpalStatusUserInput.klass, "m_userInput=", VALUEFUNC(_wrap_OpalStatusUserInput_m_userInput_set), -1);
  rb_define_method(SwigClassOpalStatusUserInput.klass, "m_userInput", VALUEFUNC(_wrap_OpalStatusUserInput_m_userInput_get), -1);
  rb_define_method(SwigClassOpalStatusUserInput.klass, "m_duration=", VALUEFUNC(_wrap_OpalStatusUserInput_m_duration_set), -1);
  rb_define_method(SwigClassOpalStatusUserInput.klass, "m_duration", VALUEFUNC(_wrap_OpalStatusUserInput_m_duration_get), -1);
  SwigClassOpalStatusUserInput.mark = 0;
  SwigClassOpalStatusUserInput.destroy = (void (*)(void *)) free_OpalStatusUserInput;
  SwigClassOpalStatusUserInput.trackObjects = 0;
  
  SwigClassOpalStatusMessageWaiting.klass = rb_define_class_under(mOpal, "OpalStatusMessageWaiting", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_OpalStatusMessageWaiting, (void *) &SwigClassOpalStatusMessageWaiting);
  rb_define_alloc_func(SwigClassOpalStatusMessageWaiting.klass, _wrap_OpalStatusMessageWaiting_allocate);
  rb_define_method(SwigClassOpalStatusMessageWaiting.klass, "initialize", VALUEFUNC(_wrap_new_OpalStatusMessageWaiting), -1);
  rb_define_method(SwigClassOpalStatusMessageWaiting.klass, "m_party=", VALUEFUNC(_wrap_OpalStatusMessageWaiting_m_party_set), -1);
  rb_define_method(SwigClassOpalStatusMessageWaiting.klass, "m_party", VALUEFUNC(_wrap_OpalStatusMessageWaiting_m_party_get), -1);
  rb_define_method(SwigClassOpalStatusMessageWaiting.klass, "m_type=", VALUEFUNC(_wrap_OpalStatusMessageWaiting_m_type_set), -1);
  rb_define_method(SwigClassOpalStatusMessageWaiting.klass, "m_type", VALUEFUNC(_wrap_OpalStatusMessageWaiting_m_type_get), -1);
  rb_define_method(SwigClassOpalStatusMessageWaiting.klass, "m_extraInfo=", VALUEFUNC(_wrap_OpalStatusMessageWaiting_m_extraInfo_set), -1);
  rb_define_method(SwigClassOpalStatusMessageWaiting.klass, "m_extraInfo", VALUEFUNC(_wrap_OpalStatusMessageWaiting_m_extraInfo_get), -1);
  SwigClassOpalStatusMessageWaiting.mark = 0;
  SwigClassOpalStatusMessageWaiting.destroy = (void (*)(void *)) free_OpalStatusMessageWaiting;
  SwigClassOpalStatusMessageWaiting.trackObjects = 0;
  rb_define_const(mOpal, "OpalLineTerminated", SWIG_From_int(static_cast< int >(OpalLineTerminated)));
  rb_define_const(mOpal, "OpalLineTrying", SWIG_From_int(static_cast< int >(OpalLineTrying)));
  rb_define_const(mOpal, "OpalLineProceeding", SWIG_From_int(static_cast< int >(OpalLineProceeding)));
  rb_define_const(mOpal, "OpalLineRinging", SWIG_From_int(static_cast< int >(OpalLineRinging)));
  rb_define_const(mOpal, "OpalLineConnected", SWIG_From_int(static_cast< int >(OpalLineConnected)));
  rb_define_const(mOpal, "OpalLineSubcribed", SWIG_From_int(static_cast< int >(OpalLineSubcribed)));
  rb_define_const(mOpal, "OpalLineUnsubcribed", SWIG_From_int(static_cast< int >(OpalLineUnsubcribed)));
  rb_define_const(mOpal, "OpalLineIdle", SWIG_From_int(static_cast< int >(OpalLineIdle)));
  
  SwigClassOpalStatusLineAppearance.klass = rb_define_class_under(mOpal, "OpalStatusLineAppearance", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_OpalStatusLineAppearance, (void *) &SwigClassOpalStatusLineAppearance);
  rb_define_alloc_func(SwigClassOpalStatusLineAppearance.klass, _wrap_OpalStatusLineAppearance_allocate);
  rb_define_method(SwigClassOpalStatusLineAppearance.klass, "initialize", VALUEFUNC(_wrap_new_OpalStatusLineAppearance), -1);
  rb_define_method(SwigClassOpalStatusLineAppearance.klass, "m_line=", VALUEFUNC(_wrap_OpalStatusLineAppearance_m_line_set), -1);
  rb_define_method(SwigClassOpalStatusLineAppearance.klass, "m_line", VALUEFUNC(_wrap_OpalStatusLineAppearance_m_line_get), -1);
  rb_define_method(SwigClassOpalStatusLineAppearance.klass, "m_state=", VALUEFUNC(_wrap_OpalStatusLineAppearance_m_state_set), -1);
  rb_define_method(SwigClassOpalStatusLineAppearance.klass, "m_state", VALUEFUNC(_wrap_OpalStatusLineAppearance_m_state_get), -1);
  rb_define_method(SwigClassOpalStatusLineAppearance.klass, "m_appearance=", VALUEFUNC(_wrap_OpalStatusLineAppearance_m_appearance_set), -1);
  rb_define_method(SwigClassOpalStatusLineAppearance.klass, "m_appearance", VALUEFUNC(_wrap_OpalStatusLineAppearance_m_appearance_get), -1);
  rb_define_method(SwigClassOpalStatusLineAppearance.klass, "m_callId=", VALUEFUNC(_wrap_OpalStatusLineAppearance_m_callId_set), -1);
  rb_define_method(SwigClassOpalStatusLineAppearance.klass, "m_callId", VALUEFUNC(_wrap_OpalStatusLineAppearance_m_callId_get), -1);
  rb_define_method(SwigClassOpalStatusLineAppearance.klass, "m_partyA=", VALUEFUNC(_wrap_OpalStatusLineAppearance_m_partyA_set), -1);
  rb_define_method(SwigClassOpalStatusLineAppearance.klass, "m_partyA", VALUEFUNC(_wrap_OpalStatusLineAppearance_m_partyA_get), -1);
  rb_define_method(SwigClassOpalStatusLineAppearance.klass, "m_partyB=", VALUEFUNC(_wrap_OpalStatusLineAppearance_m_partyB_set), -1);
  rb_define_method(SwigClassOpalStatusLineAppearance.klass, "m_partyB", VALUEFUNC(_wrap_OpalStatusLineAppearance_m_partyB_get), -1);
  SwigClassOpalStatusLineAppearance.mark = 0;
  SwigClassOpalStatusLineAppearance.destroy = (void (*)(void *)) free_OpalStatusLineAppearance;
  SwigClassOpalStatusLineAppearance.trackObjects = 0;
  rb_define_const(mOpal, "OpalSideBySideLetterbox", SWIG_From_int(static_cast< int >(OpalSideBySideLetterbox)));
  rb_define_const(mOpal, "OpalSideBySideScaled", SWIG_From_int(static_cast< int >(OpalSideBySideScaled)));
  rb_define_const(mOpal, "OpalStackedPillarbox", SWIG_From_int(static_cast< int >(OpalStackedPillarbox)));
  rb_define_const(mOpal, "OpalStackedScaled", SWIG_From_int(static_cast< int >(OpalStackedScaled)));
  
  SwigClassOpalParamRecording.klass = rb_define_class_under(mOpal, "OpalParamRecording", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_OpalParamRecording, (void *) &SwigClassOpalParamRecording);
  rb_define_alloc_func(SwigClassOpalParamRecording.klass, _wrap_OpalParamRecording_allocate);
  rb_define_method(SwigClassOpalParamRecording.klass, "initialize", VALUEFUNC(_wrap_new_OpalParamRecording), -1);
  rb_define_method(SwigClassOpalParamRecording.klass, "m_callToken=", VALUEFUNC(_wrap_OpalParamRecording_m_callToken_set), -1);
  rb_define_method(SwigClassOpalParamRecording.klass, "m_callToken", VALUEFUNC(_wrap_OpalParamRecording_m_callToken_get), -1);
  rb_define_method(SwigClassOpalParamRecording.klass, "m_file=", VALUEFUNC(_wrap_OpalParamRecording_m_file_set), -1);
  rb_define_method(SwigClassOpalParamRecording.klass, "m_file", VALUEFUNC(_wrap_OpalParamRecording_m_file_get), -1);
  rb_define_method(SwigClassOpalParamRecording.klass, "m_channels=", VALUEFUNC(_wrap_OpalParamRecording_m_channels_set), -1);
  rb_define_method(SwigClassOpalParamRecording.klass, "m_channels", VALUEFUNC(_wrap_OpalParamRecording_m_channels_get), -1);
  rb_define_method(SwigClassOpalParamRecording.klass, "m_audioFormat=", VALUEFUNC(_wrap_OpalParamRecording_m_audioFormat_set), -1);
  rb_define_method(SwigClassOpalParamRecording.klass, "m_audioFormat", VALUEFUNC(_wrap_OpalParamRecording_m_audioFormat_get), -1);
  rb_define_method(SwigClassOpalParamRecording.klass, "m_videoFormat=", VALUEFUNC(_wrap_OpalParamRecording_m_videoFormat_set), -1);
  rb_define_method(SwigClassOpalParamRecording.klass, "m_videoFormat", VALUEFUNC(_wrap_OpalParamRecording_m_videoFormat_get), -1);
  rb_define_method(SwigClassOpalParamRecording.klass, "m_videoWidth=", VALUEFUNC(_wrap_OpalParamRecording_m_videoWidth_set), -1);
  rb_define_method(SwigClassOpalParamRecording.klass, "m_videoWidth", VALUEFUNC(_wrap_OpalParamRecording_m_videoWidth_get), -1);
  rb_define_method(SwigClassOpalParamRecording.klass, "m_videoHeight=", VALUEFUNC(_wrap_OpalParamRecording_m_videoHeight_set), -1);
  rb_define_method(SwigClassOpalParamRecording.klass, "m_videoHeight", VALUEFUNC(_wrap_OpalParamRecording_m_videoHeight_get), -1);
  rb_define_method(SwigClassOpalParamRecording.klass, "m_videoRate=", VALUEFUNC(_wrap_OpalParamRecording_m_videoRate_set), -1);
  rb_define_method(SwigClassOpalParamRecording.klass, "m_videoRate", VALUEFUNC(_wrap_OpalParamRecording_m_videoRate_get), -1);
  rb_define_method(SwigClassOpalParamRecording.klass, "m_videoMixing=", VALUEFUNC(_wrap_OpalParamRecording_m_videoMixing_set), -1);
  rb_define_method(SwigClassOpalParamRecording.klass, "m_videoMixing", VALUEFUNC(_wrap_OpalParamRecording_m_videoMixing_get), -1);
  SwigClassOpalParamRecording.mark = 0;
  SwigClassOpalParamRecording.destroy = (void (*)(void *)) free_OpalParamRecording;
  SwigClassOpalParamRecording.trackObjects = 0;
  
  SwigClassOpalStatusCallCleared.klass = rb_define_class_under(mOpal, "OpalStatusCallCleared", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_OpalStatusCallCleared, (void *) &SwigClassOpalStatusCallCleared);
  rb_define_alloc_func(SwigClassOpalStatusCallCleared.klass, _wrap_OpalStatusCallCleared_allocate);
  rb_define_method(SwigClassOpalStatusCallCleared.klass, "initialize", VALUEFUNC(_wrap_new_OpalStatusCallCleared), -1);
  rb_define_method(SwigClassOpalStatusCallCleared.klass, "m_callToken=", VALUEFUNC(_wrap_OpalStatusCallCleared_m_callToken_set), -1);
  rb_define_method(SwigClassOpalStatusCallCleared.klass, "m_callToken", VALUEFUNC(_wrap_OpalStatusCallCleared_m_callToken_get), -1);
  rb_define_method(SwigClassOpalStatusCallCleared.klass, "m_reason=", VALUEFUNC(_wrap_OpalStatusCallCleared_m_reason_set), -1);
  rb_define_method(SwigClassOpalStatusCallCleared.klass, "m_reason", VALUEFUNC(_wrap_OpalStatusCallCleared_m_reason_get), -1);
  SwigClassOpalStatusCallCleared.mark = 0;
  SwigClassOpalStatusCallCleared.destroy = (void (*)(void *)) free_OpalStatusCallCleared;
  SwigClassOpalStatusCallCleared.trackObjects = 0;
  rb_define_const(mOpal, "OpalCallEndedByLocalUser", SWIG_From_int(static_cast< int >(OpalCallEndedByLocalUser)));
  rb_define_const(mOpal, "OpalCallEndedByNoAccept", SWIG_From_int(static_cast< int >(OpalCallEndedByNoAccept)));
  rb_define_const(mOpal, "OpalCallEndedByAnswerDenied", SWIG_From_int(static_cast< int >(OpalCallEndedByAnswerDenied)));
  rb_define_const(mOpal, "OpalCallEndedByRemoteUser", SWIG_From_int(static_cast< int >(OpalCallEndedByRemoteUser)));
  rb_define_const(mOpal, "OpalCallEndedByRefusal", SWIG_From_int(static_cast< int >(OpalCallEndedByRefusal)));
  rb_define_const(mOpal, "OpalCallEndedByNoAnswer", SWIG_From_int(static_cast< int >(OpalCallEndedByNoAnswer)));
  rb_define_const(mOpal, "OpalCallEndedByCallerAbort", SWIG_From_int(static_cast< int >(OpalCallEndedByCallerAbort)));
  rb_define_const(mOpal, "OpalCallEndedByTransportFail", SWIG_From_int(static_cast< int >(OpalCallEndedByTransportFail)));
  rb_define_const(mOpal, "OpalCallEndedByConnectFail", SWIG_From_int(static_cast< int >(OpalCallEndedByConnectFail)));
  rb_define_const(mOpal, "OpalCallEndedByGatekeeper", SWIG_From_int(static_cast< int >(OpalCallEndedByGatekeeper)));
  rb_define_const(mOpal, "OpalCallEndedByNoUser", SWIG_From_int(static_cast< int >(OpalCallEndedByNoUser)));
  rb_define_const(mOpal, "OpalCallEndedByNoBandwidth", SWIG_From_int(static_cast< int >(OpalCallEndedByNoBandwidth)));
  rb_define_const(mOpal, "OpalCallEndedByCapabilityExchange", SWIG_From_int(static_cast< int >(OpalCallEndedByCapabilityExchange)));
  rb_define_const(mOpal, "OpalCallEndedByCallForwarded", SWIG_From_int(static_cast< int >(OpalCallEndedByCallForwarded)));
  rb_define_const(mOpal, "OpalCallEndedBySecurityDenial", SWIG_From_int(static_cast< int >(OpalCallEndedBySecurityDenial)));
  rb_define_const(mOpal, "OpalCallEndedByLocalBusy", SWIG_From_int(static_cast< int >(OpalCallEndedByLocalBusy)));
  rb_define_const(mOpal, "OpalCallEndedByLocalCongestion", SWIG_From_int(static_cast< int >(OpalCallEndedByLocalCongestion)));
  rb_define_const(mOpal, "OpalCallEndedByRemoteBusy", SWIG_From_int(static_cast< int >(OpalCallEndedByRemoteBusy)));
  rb_define_const(mOpal, "OpalCallEndedByRemoteCongestion", SWIG_From_int(static_cast< int >(OpalCallEndedByRemoteCongestion)));
  rb_define_const(mOpal, "OpalCallEndedByUnreachable", SWIG_From_int(static_cast< int >(OpalCallEndedByUnreachable)));
  rb_define_const(mOpal, "OpalCallEndedByNoEndPoint", SWIG_From_int(static_cast< int >(OpalCallEndedByNoEndPoint)));
  rb_define_const(mOpal, "OpalCallEndedByHostOffline", SWIG_From_int(static_cast< int >(OpalCallEndedByHostOffline)));
  rb_define_const(mOpal, "OpalCallEndedByTemporaryFailure", SWIG_From_int(static_cast< int >(OpalCallEndedByTemporaryFailure)));
  rb_define_const(mOpal, "OpalCallEndedByQ931Cause", SWIG_From_int(static_cast< int >(OpalCallEndedByQ931Cause)));
  rb_define_const(mOpal, "OpalCallEndedByDurationLimit", SWIG_From_int(static_cast< int >(OpalCallEndedByDurationLimit)));
  rb_define_const(mOpal, "OpalCallEndedByInvalidConferenceID", SWIG_From_int(static_cast< int >(OpalCallEndedByInvalidConferenceID)));
  rb_define_const(mOpal, "OpalCallEndedByNoDialTone", SWIG_From_int(static_cast< int >(OpalCallEndedByNoDialTone)));
  rb_define_const(mOpal, "OpalCallEndedByNoRingBackTone", SWIG_From_int(static_cast< int >(OpalCallEndedByNoRingBackTone)));
  rb_define_const(mOpal, "OpalCallEndedByOutOfService", SWIG_From_int(static_cast< int >(OpalCallEndedByOutOfService)));
  rb_define_const(mOpal, "OpalCallEndedByAcceptingCallWaiting", SWIG_From_int(static_cast< int >(OpalCallEndedByAcceptingCallWaiting)));
  rb_define_const(mOpal, "OpalCallEndedWithQ931Code", SWIG_From_int(static_cast< int >(OpalCallEndedWithQ931Code)));
  
  SwigClassOpalParamCallCleared.klass = rb_define_class_under(mOpal, "OpalParamCallCleared", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_OpalParamCallCleared, (void *) &SwigClassOpalParamCallCleared);
  rb_define_alloc_func(SwigClassOpalParamCallCleared.klass, _wrap_OpalParamCallCleared_allocate);
  rb_define_method(SwigClassOpalParamCallCleared.klass, "initialize", VALUEFUNC(_wrap_new_OpalParamCallCleared), -1);
  rb_define_method(SwigClassOpalParamCallCleared.klass, "m_callToken=", VALUEFUNC(_wrap_OpalParamCallCleared_m_callToken_set), -1);
  rb_define_method(SwigClassOpalParamCallCleared.klass, "m_callToken", VALUEFUNC(_wrap_OpalParamCallCleared_m_callToken_get), -1);
  rb_define_method(SwigClassOpalParamCallCleared.klass, "m_reason=", VALUEFUNC(_wrap_OpalParamCallCleared_m_reason_set), -1);
  rb_define_method(SwigClassOpalParamCallCleared.klass, "m_reason", VALUEFUNC(_wrap_OpalParamCallCleared_m_reason_get), -1);
  SwigClassOpalParamCallCleared.mark = 0;
  SwigClassOpalParamCallCleared.destroy = (void (*)(void *)) free_OpalParamCallCleared;
  SwigClassOpalParamCallCleared.trackObjects = 0;
  
  SwigClassOpalMessage.klass = rb_define_class_under(mOpal, "OpalMessage", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_OpalMessage, (void *) &SwigClassOpalMessage);
  rb_define_alloc_func(SwigClassOpalMessage.klass, _wrap_OpalMessage_allocate);
  rb_define_method(SwigClassOpalMessage.klass, "initialize", VALUEFUNC(_wrap_new_OpalMessage), -1);
  rb_define_method(SwigClassOpalMessage.klass, "m_type=", VALUEFUNC(_wrap_OpalMessage_m_type_set), -1);
  rb_define_method(SwigClassOpalMessage.klass, "m_type", VALUEFUNC(_wrap_OpalMessage_m_type_get), -1);
  rb_define_method(SwigClassOpalMessage.klass, "m_param", VALUEFUNC(_wrap_OpalMessage_m_param_get), -1);
  SwigClassOpalMessage.mark = 0;
  SwigClassOpalMessage.destroy = (void (*)(void *)) free_OpalMessage;
  SwigClassOpalMessage.trackObjects = 0;
  
  SwigClassOpalMessage_m_param.klass = rb_define_class_under(mOpal, "OpalMessage_m_param", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_OpalMessage_m_param, (void *) &SwigClassOpalMessage_m_param);
  rb_define_alloc_func(SwigClassOpalMessage_m_param.klass, _wrap_OpalMessage_m_param_allocate);
  rb_define_method(SwigClassOpalMessage_m_param.klass, "initialize", VALUEFUNC(_wrap_new_OpalMessage_m_param), -1);
  rb_define_method(SwigClassOpalMessage_m_param.klass, "m_commandError=", VALUEFUNC(_wrap_OpalMessage_m_param_m_commandError_set), -1);
  rb_define_method(SwigClassOpalMessage_m_param.klass, "m_commandError", VALUEFUNC(_wrap_OpalMessage_m_param_m_commandError_get), -1);
  rb_define_method(SwigClassOpalMessage_m_param.klass, "m_general=", VALUEFUNC(_wrap_OpalMessage_m_param_m_general_set), -1);
  rb_define_method(SwigClassOpalMessage_m_param.klass, "m_general", VALUEFUNC(_wrap_OpalMessage_m_param_m_general_get), -1);
  rb_define_method(SwigClassOpalMessage_m_param.klass, "m_protocol=", VALUEFUNC(_wrap_OpalMessage_m_param_m_protocol_set), -1);
  rb_define_method(SwigClassOpalMessage_m_param.klass, "m_protocol", VALUEFUNC(_wrap_OpalMessage_m_param_m_protocol_get), -1);
  rb_define_method(SwigClassOpalMessage_m_param.klass, "m_registrationInfo=", VALUEFUNC(_wrap_OpalMessage_m_param_m_registrationInfo_set), -1);
  rb_define_method(SwigClassOpalMessage_m_param.klass, "m_registrationInfo", VALUEFUNC(_wrap_OpalMessage_m_param_m_registrationInfo_get), -1);
  rb_define_method(SwigClassOpalMessage_m_param.klass, "m_registrationStatus=", VALUEFUNC(_wrap_OpalMessage_m_param_m_registrationStatus_set), -1);
  rb_define_method(SwigClassOpalMessage_m_param.klass, "m_registrationStatus", VALUEFUNC(_wrap_OpalMessage_m_param_m_registrationStatus_get), -1);
  rb_define_method(SwigClassOpalMessage_m_param.klass, "m_callSetUp=", VALUEFUNC(_wrap_OpalMessage_m_param_m_callSetUp_set), -1);
  rb_define_method(SwigClassOpalMessage_m_param.klass, "m_callSetUp", VALUEFUNC(_wrap_OpalMessage_m_param_m_callSetUp_get), -1);
  rb_define_method(SwigClassOpalMessage_m_param.klass, "m_callToken=", VALUEFUNC(_wrap_OpalMessage_m_param_m_callToken_set), -1);
  rb_define_method(SwigClassOpalMessage_m_param.klass, "m_callToken", VALUEFUNC(_wrap_OpalMessage_m_param_m_callToken_get), -1);
  rb_define_method(SwigClassOpalMessage_m_param.klass, "m_incomingCall=", VALUEFUNC(_wrap_OpalMessage_m_param_m_incomingCall_set), -1);
  rb_define_method(SwigClassOpalMessage_m_param.klass, "m_incomingCall", VALUEFUNC(_wrap_OpalMessage_m_param_m_incomingCall_get), -1);
  rb_define_method(SwigClassOpalMessage_m_param.klass, "m_userInput=", VALUEFUNC(_wrap_OpalMessage_m_param_m_userInput_set), -1);
  rb_define_method(SwigClassOpalMessage_m_param.klass, "m_userInput", VALUEFUNC(_wrap_OpalMessage_m_param_m_userInput_get), -1);
  rb_define_method(SwigClassOpalMessage_m_param.klass, "m_messageWaiting=", VALUEFUNC(_wrap_OpalMessage_m_param_m_messageWaiting_set), -1);
  rb_define_method(SwigClassOpalMessage_m_param.klass, "m_messageWaiting", VALUEFUNC(_wrap_OpalMessage_m_param_m_messageWaiting_get), -1);
  rb_define_method(SwigClassOpalMessage_m_param.klass, "m_lineAppearance=", VALUEFUNC(_wrap_OpalMessage_m_param_m_lineAppearance_set), -1);
  rb_define_method(SwigClassOpalMessage_m_param.klass, "m_lineAppearance", VALUEFUNC(_wrap_OpalMessage_m_param_m_lineAppearance_get), -1);
  rb_define_method(SwigClassOpalMessage_m_param.klass, "m_callCleared=", VALUEFUNC(_wrap_OpalMessage_m_param_m_callCleared_set), -1);
  rb_define_method(SwigClassOpalMessage_m_param.klass, "m_callCleared", VALUEFUNC(_wrap_OpalMessage_m_param_m_callCleared_get), -1);
  rb_define_method(SwigClassOpalMessage_m_param.klass, "m_clearCall=", VALUEFUNC(_wrap_OpalMessage_m_param_m_clearCall_set), -1);
  rb_define_method(SwigClassOpalMessage_m_param.klass, "m_clearCall", VALUEFUNC(_wrap_OpalMessage_m_param_m_clearCall_get), -1);
  rb_define_method(SwigClassOpalMessage_m_param.klass, "m_mediaStream=", VALUEFUNC(_wrap_OpalMessage_m_param_m_mediaStream_set), -1);
  rb_define_method(SwigClassOpalMessage_m_param.klass, "m_mediaStream", VALUEFUNC(_wrap_OpalMessage_m_param_m_mediaStream_get), -1);
  rb_define_method(SwigClassOpalMessage_m_param.klass, "m_setUserData=", VALUEFUNC(_wrap_OpalMessage_m_param_m_setUserData_set), -1);
  rb_define_method(SwigClassOpalMessage_m_param.klass, "m_setUserData", VALUEFUNC(_wrap_OpalMessage_m_param_m_setUserData_get), -1);
  rb_define_method(SwigClassOpalMessage_m_param.klass, "m_recording=", VALUEFUNC(_wrap_OpalMessage_m_param_m_recording_set), -1);
  rb_define_method(SwigClassOpalMessage_m_param.klass, "m_recording", VALUEFUNC(_wrap_OpalMessage_m_param_m_recording_get), -1);
  SwigClassOpalMessage_m_param.mark = 0;
  SwigClassOpalMessage_m_param.destroy = (void (*)(void *)) free_OpalMessage_m_param;
  SwigClassOpalMessage_m_param.trackObjects = 0;
  
  SwigClassOpalMessagePtr.klass = rb_define_class_under(mOpal, "OpalMessagePtr", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_OpalMessagePtr, (void *) &SwigClassOpalMessagePtr);
  rb_define_alloc_func(SwigClassOpalMessagePtr.klass, _wrap_OpalMessagePtr_allocate);
  rb_define_method(SwigClassOpalMessagePtr.klass, "initialize", VALUEFUNC(_wrap_new_OpalMessagePtr), -1);
  rb_define_method(SwigClassOpalMessagePtr.klass, "GetType", VALUEFUNC(_wrap_OpalMessagePtr_GetType), -1);
  rb_define_method(SwigClassOpalMessagePtr.klass, "SetType", VALUEFUNC(_wrap_OpalMessagePtr_SetType), -1);
  rb_define_method(SwigClassOpalMessagePtr.klass, "GetCallToken", VALUEFUNC(_wrap_OpalMessagePtr_GetCallToken), -1);
  rb_define_method(SwigClassOpalMessagePtr.klass, "SetCallToken", VALUEFUNC(_wrap_OpalMessagePtr_SetCallToken), -1);
  rb_define_method(SwigClassOpalMessagePtr.klass, "GetCommandError", VALUEFUNC(_wrap_OpalMessagePtr_GetCommandError), -1);
  rb_define_method(SwigClassOpalMessagePtr.klass, "GetGeneralParams", VALUEFUNC(_wrap_OpalMessagePtr_GetGeneralParams), -1);
  rb_define_method(SwigClassOpalMessagePtr.klass, "GetProtocolParams", VALUEFUNC(_wrap_OpalMessagePtr_GetProtocolParams), -1);
  rb_define_method(SwigClassOpalMessagePtr.klass, "GetRegistrationInfo", VALUEFUNC(_wrap_OpalMessagePtr_GetRegistrationInfo), -1);
  rb_define_method(SwigClassOpalMessagePtr.klass, "GetRegistrationStatus", VALUEFUNC(_wrap_OpalMessagePtr_GetRegistrationStatus), -1);
  rb_define_method(SwigClassOpalMessagePtr.klass, "GetCallSetUp", VALUEFUNC(_wrap_OpalMessagePtr_GetCallSetUp), -1);
  rb_define_method(SwigClassOpalMessagePtr.klass, "GetIncomingCall", VALUEFUNC(_wrap_OpalMessagePtr_GetIncomingCall), -1);
  rb_define_method(SwigClassOpalMessagePtr.klass, "GetUserInput", VALUEFUNC(_wrap_OpalMessagePtr_GetUserInput), -1);
  rb_define_method(SwigClassOpalMessagePtr.klass, "GetMessageWaiting", VALUEFUNC(_wrap_OpalMessagePtr_GetMessageWaiting), -1);
  rb_define_method(SwigClassOpalMessagePtr.klass, "GetLineAppearance", VALUEFUNC(_wrap_OpalMessagePtr_GetLineAppearance), -1);
  rb_define_method(SwigClassOpalMessagePtr.klass, "GetCallCleared", VALUEFUNC(_wrap_OpalMessagePtr_GetCallCleared), -1);
  rb_define_method(SwigClassOpalMessagePtr.klass, "GetClearCall", VALUEFUNC(_wrap_OpalMessagePtr_GetClearCall), -1);
  rb_define_method(SwigClassOpalMessagePtr.klass, "GetMediaStream", VALUEFUNC(_wrap_OpalMessagePtr_GetMediaStream), -1);
  rb_define_method(SwigClassOpalMessagePtr.klass, "GetSetUserData", VALUEFUNC(_wrap_OpalMessagePtr_GetSetUserData), -1);
  rb_define_method(SwigClassOpalMessagePtr.klass, "GetRecording", VALUEFUNC(_wrap_OpalMessagePtr_GetRecording), -1);
  SwigClassOpalMessagePtr.mark = 0;
  SwigClassOpalMessagePtr.destroy = (void (*)(void *)) free_OpalMessagePtr;
  SwigClassOpalMessagePtr.trackObjects = 0;
  
  SwigClassOpalContext.klass = rb_define_class_under(mOpal, "OpalContext", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_OpalContext, (void *) &SwigClassOpalContext);
  rb_define_alloc_func(SwigClassOpalContext.klass, _wrap_OpalContext_allocate);
  rb_define_method(SwigClassOpalContext.klass, "initialize", VALUEFUNC(_wrap_new_OpalContext), -1);
  rb_define_method(SwigClassOpalContext.klass, "Initialise", VALUEFUNC(_wrap_OpalContext_Initialise), -1);
  rb_define_method(SwigClassOpalContext.klass, "IsInitialised", VALUEFUNC(_wrap_OpalContext_IsInitialised), -1);
  rb_define_method(SwigClassOpalContext.klass, "ShutDown", VALUEFUNC(_wrap_OpalContext_ShutDown), -1);
  rb_define_method(SwigClassOpalContext.klass, "GetMessage", VALUEFUNC(_wrap_OpalContext_GetMessage), -1);
  rb_define_method(SwigClassOpalContext.klass, "SendMessage", VALUEFUNC(_wrap_OpalContext_SendMessage), -1);
  rb_define_method(SwigClassOpalContext.klass, "SetUpCall", VALUEFUNC(_wrap_OpalContext_SetUpCall), -1);
  rb_define_method(SwigClassOpalContext.klass, "AnswerCall", VALUEFUNC(_wrap_OpalContext_AnswerCall), -1);
  rb_define_method(SwigClassOpalContext.klass, "ClearCall", VALUEFUNC(_wrap_OpalContext_ClearCall), -1);
  rb_define_method(SwigClassOpalContext.klass, "SendUserInput", VALUEFUNC(_wrap_OpalContext_SendUserInput), -1);
  SwigClassOpalContext.mark = 0;
  SwigClassOpalContext.destroy = (void (*)(void *)) free_OpalContext;
  SwigClassOpalContext.trackObjects = 0;
}

